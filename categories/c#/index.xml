<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on dwmkerr.com</title><link>https://dwmkerr.com/categories/c#/</link><description>Recent content in C# on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Wed, 01 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/categories/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>Modernising .NET projects for .NET Core and beyond!</title><link>https://dwmkerr.com/modernising-dotnet-projects/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://dwmkerr.com/modernising-dotnet-projects/</guid><description>&lt;p>The world of .NET is going through a transformation. The .NET Framework is reaching end of life, &lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/">.NET Core&lt;/a> is an increasingly feature rich and robust platform to develop solutions which target Linux, MacOS, embedded devices, containers and more. There's also the .NET Standard.&lt;/p>
&lt;p>But what does this mean for .NET &lt;em>Framework&lt;/em> projects? In this article I'll describe how to modernise your .NET Framework projects for .NET Core, the .NET Standard and .NET 5, which is planned to be released this year. I'll also explain the high level differences between the platforms and what the consequences of upgrading are for consumers, developers and maintainers.&lt;/p>
&lt;!-- vim-markdown-toc GFM -->
&lt;ul>
&lt;li>&lt;a href="#the-net-framework-net-core-and-the-future">The .NET Framework, .NET Core and the Future&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-challenge-modernisation-and-compatibility">The Challenge: Modernisation and Compatibility&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-modernisation-process---introducing-our-two-villains">The Modernisation Process - Introducing our two Villains&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#step-1---understand-the-domain">Step 1 - Understand the Domain&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-2---understand-the-goal---multi-platform-builds">Step 2 - Understand the Goal - Multi-Platform Builds&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-3---migrate-projects-leaf-wise">Step 3 - Migrate Projects &amp;ldquo;Leaf-wise&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-4---refactor-rinse-repeat">Step 4 - Refactor, Rinse, Repeat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-5---update-your-builds">Step 5 - Update Your Builds&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-6---test-test-test">Step 6 - Test, Test, Test&lt;/a>&lt;/li>
&lt;li>&lt;a href="#step-7---document-compatibility">Step 7 - Document Compatibility&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#the-key-learnings">The Key Learnings&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- vim-markdown-toc -->
&lt;h1 id="the-net-framework-net-core-and-the-future">The .NET Framework, .NET Core and the Future&lt;/h1>
&lt;p>There's a lot which has been written on this topic, but it can still be a little overwhelming to understand just how all of these things fit together.&lt;/p>
&lt;p>Here's a simple visual I've created to try and put things into context:&lt;/p>
&lt;p>&lt;img src="images/dotnet-timeline.png" alt="Diagram: .NET Timeline">&lt;/p>
&lt;p>I'm only going to cover the bare essentials - but there are links to further reading on each topic if you want to go deeper. This article is mainly going to be focused on the practicality and consequence of migration and re-targeting.&lt;/p>
&lt;p>First, the &lt;strong>.NET Framework&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>The .NET Framework was created in 2002 as set of unified tools and standards to allow developers on the Microsoft Platform to more quickly build solutions, provide interoperability between languages and more. &lt;a href="https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet-framework">Read more about the .NET Framework&lt;/a>.&lt;/li>
&lt;li>The .NET Framework rapidly gained popularity, partly due to the convenience of developing in C# rather than Basic or C/C++. C# provided a more developer friendly language than C or C++ for many use cases, and was heavily inspired by Java. &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/">Read more about C#&lt;/a>.&lt;/li>
&lt;li>With the increase in popularity, the .NET Framework started to have more frequent releases and became a standard part of the Windows operating system, installed out of the box rather than on-demand if needed.&lt;/li>
&lt;li>However - the .NET Framework only functioned on Microsoft Windows, which greatly limited its potential uses cases, even as more and more engineers used it for Web, Client Applications and mobile.&lt;/li>
&lt;/ul>
&lt;p>Enter &lt;strong>.NET Core&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>Microsoft signaled a &lt;em>radical&lt;/em> switch in their strategy with the appointment of &lt;a href="https://en.wikipedia.org/wiki/Satya_Nadella">Satya Nadella&lt;/a>, becoming increasingly focused on open source, and more importantly, deciding that the Microsoft development toolchain should not &lt;em>force&lt;/em> users to use Windows as their execution environment&lt;/li>
&lt;li>.NET Core was developed as a lightweight version of the .NET Framework, which could run on multiple platforms - including Linux and MacOS. &lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/">Read more about .NET Core&lt;/a>.&lt;/li>
&lt;li>In a short period of time .NET Core became more and more feature rich, providing a lot of capabilities for web developers and front-end application developers.&lt;/li>
&lt;/ul>
&lt;p>The challenges of &lt;strong>divergence&lt;/strong> and the &lt;strong>.NET Standard&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>As .NET Core became more feature rich, the API became closer to the .NET Framework - but they are still fundamentally different runtimes. A binary compiled for the .NET Core does not run on the .NET Framework and vice-versa.&lt;/li>
&lt;li>To deal with this issue, Microsoft developed the &lt;strong>.NET Standard&lt;/strong> - a specification of a set of APIs. If a runtime offered these APIs, then solutions built on &lt;em>any runtime which meets the standard&lt;/em> could run on any compliant platform.&lt;/li>
&lt;/ul>
&lt;p>What does this mean? Basically, the table below shows the consequences of this. If you build on .NET Core 2.0 (for example), you can also run on the .NET Framework 4.6.1. Mono 5.4, Unity 2018.1 and more, because all of these runtimes implement the &lt;em>.NET Standard 2.0&lt;/em>.&lt;/p>
&lt;p>Of course, some features are always going to be very platform specific, so the standard started out small but has grown over time.&lt;/p>
&lt;p>Moving to &lt;strong>convergence&lt;/strong> and &lt;strong>.NET&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>Given that the later versions of the .NET Framework and .NET Core actually follow the same standard, the platforms are actually starting to become more and more similar.&lt;/li>
&lt;li>They are becoming &lt;em>so&lt;/em> similar that it no longer makes sense to maintain them separately. The next major version of &lt;em>both&lt;/em> platforms is &lt;strong>.NET 5&lt;/strong>. This is a new runtime which is the next version of .NET Core &lt;em>and&lt;/em> the .NET Framework.&lt;/li>
&lt;/ul>
&lt;p>This means that the .NET Framework and .NET Core are going to converge into a single platform, which will be wonderful for developers and simplify a complex landscape.&lt;/p>
&lt;p>But what does this mean if you have .NET Framework projects? How do we modernise, and do we have to make trade-offs around compatibility?&lt;/p>
&lt;h1 id="the-challenge-modernisation-and-compatibility">The Challenge: Modernisation and Compatibility&lt;/h1>
&lt;p>I have a number of projects which target the .NET Framework. On &lt;em>all&lt;/em> of these projects I have had multiple requests to migrate to the .NET Core, but I have had to hold off on this work until I could really understand in detail a few things:&lt;/p>
&lt;ol>
&lt;li>What would this mean for &lt;em>consumers&lt;/em> of the libraries? Would they have to change the platform they use? Could this break things for them?&lt;/li>
&lt;li>What would this mean for &lt;em>developers&lt;/em> on the platform? Would they need to change their development environment? Would this cause problems?&lt;/li>
&lt;li>What would this mean for &lt;em>maintainers&lt;/em> of the libraries? Would this greatly increase build and deployment complexity?&lt;/li>
&lt;/ol>
&lt;p>Finally I have found the time to be able to start to address these issues in detail - hopefully the learnings will be useful to anyone who is maintaining a .NET codebase and thinking about the future.&lt;/p>
&lt;h1 id="the-modernisation-process---introducing-our-two-villains">The Modernisation Process - Introducing our two Villains&lt;/h1>
&lt;p>There are two key projects I wanted to modernise. They are both reasonably well used, complex, and have some potentially serious complexities for multi-platform builds.&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/sharpgl">&lt;strong>SharpGL&lt;/strong>&lt;/a> is a library that allows developers to use &lt;a href="https://www.opengl.org/">OpenGL&lt;/a> in .NET applications. The big challenge? OpenGL is cross platform, but SharpGL &lt;em>specifically&lt;/em> provides an interface to the &lt;em>Windows&lt;/em> version of OpenGL. Can this possibly be made more future-proof? Could it ever target other platforms?&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/sharpshell">&lt;strong>SharpShell&lt;/strong>&lt;/a> is a library that allows developers to build &amp;lsquo;Shell Extensions&amp;rsquo; for Windows. Shell extensions are customisations to the Windows user interface, so would not be portable across platforms, but I still want to ensure that the project is future proof.&lt;/p>
&lt;p>What would be the experience with these two projects? I have other .NET projects, but they are far less popular and much more simple, my instinct is that if I can work through the process with &lt;em>these&lt;/em> projects, the others should be more straightforward.&lt;/p>
&lt;p>These are the steps I've followed to modernise. I'll finish the article with a summary of the key learnings.&lt;/p>
&lt;h2 id="step-1---understand-the-domain">Step 1 - Understand the Domain&lt;/h2>
&lt;p>I cannot stress this enough. In all meaningful technology work, &lt;em>understand the domain&lt;/em> you are dealing with. A quick Google on how to migrate, or following the formal migration guide was not enough for me. I knew I had to actually understand, at a reasonably detailed level, the differences in the runtime, the trade-offs, the process, the complexity.&lt;/p>
&lt;p>This article is the result of that work - sometimes writing about a topic is the best way to force yourself to learn it.&lt;/p>
&lt;p>Making changes rapidly and waiting to see what the consequences are can often work for small projects, internal tools and so on, but for a library which is relied upon by others is not good for the community. The last thing I wanted to do was make changes which had unintended consequences for users. So making sure that I learnt about this space, how things work under the hood, and what the expected changes in the future are was critical.&lt;/p>
&lt;p>Hopefully for others the process of understanding the domain will be a little easier with this article to cover the high level topics. During my actual process of writing and migrating, I went a lot deeper than this article goes.&lt;/p>
&lt;p>The key document to follow to actually &lt;em>execute&lt;/em> the migration is the excellent official &lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/porting/">.NET Framework to .NET Core Porting Guide&lt;/a>.&lt;/p>
&lt;h2 id="step-2---understand-the-goal---multi-platform-builds">Step 2 - Understand the Goal - Multi-Platform Builds&lt;/h2>
&lt;p>Given the understanding of the domain, it made it much easier to understand what the required steps would be. Essentially, all that would be needed would be to target a version of the .NET Framework which adheres to a recent version of the .NET Standard. Once this was done, in theory the project could be built for the .NET Framework &lt;em>and&lt;/em> for .NET Core, and also be ready for the upcoming .NET 5 release.&lt;/p>
&lt;p>Multi-platform builds are supported in Visual Studio 2019. These builds allow us to have a single codebase, but build libraries for multiple platforms (i.e. the .NET Framework and .NET Core). The resulting binaries can be packed as a single package, and when consumers install the package, the appropriate library is installed.&lt;/p>
&lt;p>This introduces the first of the significant consequences - modernising your project means you must migrate it to Visual Studio 2019.&lt;/p>
&lt;p>In the past, this might have been more of an issue, licenses for Visual Studio were expensive, and many organisations were locked onto specific versions for compatibility issues (or because they were slow to upgrade). This seems to be the case less often nowadays, but is still an important consideration.&lt;/p>
&lt;p>My projects were using Visual Studio 2017. This is how the project properties looked:&lt;/p>
&lt;p>&lt;img src="./images/sharpgl-target-framework-2017.png" alt="Screenshot: SharpGL Target Framework Properties for Visual Studio 2017">&lt;/p>
&lt;p>Unsurprisingly the .NET Standard isn't mentioned. Time to upgrade to 2019. While I installed it I could reminisce about the excitement of buying Visual C++ .NET Learning Edition:&lt;/p>
&lt;p>&lt;img src="./images/visual-cpp-dotnet-learning-edition.jpg" alt="Photo: Visual C++ .NET 2003 Learning Edition">&lt;/p>
&lt;p>And try and remember what is was like to be a 15 years old. I wonder if that box set is still kicking around somewhere, I want to see it again. So much has changed. But long install processes for Visual Studio haven't, at least they kept that:&lt;/p>
&lt;p>&lt;img src="./images/install-visual-studio-2019.png" alt="Screenshot: Visual Studio 2019 Installer">&lt;/p>
&lt;p>When installing, remember to enable the .NET Core features.&lt;/p>
&lt;h2 id="step-3---migrate-projects-leaf-wise">Step 3 - Migrate Projects &amp;ldquo;Leaf-wise&amp;rdquo;&lt;/h2>
&lt;p>As per the &lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/porting/">Porting Guide&lt;/a>, we need to migrate each of the projects which make up the solution, starting with the &amp;lsquo;leaves&amp;rsquo; (projects which don't depend on other projects) and then moving up the tree to the &amp;lsquo;root&amp;rsquo; projects (projects which are depended on by others).&lt;/p>
&lt;p>Visually, for a solution like SharpGL, that would mean the projects will need to be converted in the following order:&lt;/p>
&lt;p>&lt;img src="./images/sharpgl-project-structure.png" alt="Diagram: SharpGL Project Dependency Graph">&lt;/p>
&lt;p>I was expecting each project to have quite different experiences:&lt;/p>
&lt;ul>
&lt;li>&lt;code>SharpGL.Serialization&lt;/code> is just a set of classes which load data from files. In theory, this library should become completely portable.&lt;/li>
&lt;li>&lt;code>SharpGL.WPF&lt;/code> and &lt;code>SharpGL.WinForms&lt;/code> are &lt;em>specifically&lt;/em> for Windows front-end technologies. I expected these to be able to be ported, but don't expect them to work on other platforms (in the future there might be &lt;code>SharpGL.OSx&lt;/code>, or &lt;code>SharpGL.Gnome&lt;/code>, who knows)&lt;/li>
&lt;li>&lt;code>SharpGL.SceneGraph&lt;/code> is a set of classes which represent 3D scenes - things like lights, cameras, materials and so on. I expect &lt;em>some&lt;/em> of this to &amp;lsquo;just work&amp;rsquo;, but things like image loading to perhaps need some tweaking.&lt;/li>
&lt;li>&lt;code>SharpGL&lt;/code> is just a wrapper around the Windows &lt;code>opengl32.dll&lt;/code> library. I can't imagine this &lt;em>working&lt;/em> anywhere but Windows, but how would the project structure porting go and would it build?&lt;/li>
&lt;/ul>
&lt;p>The details on &lt;em>how&lt;/em> to migrate a project are in the &lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/porting/">Porting Guide&lt;/a>, but the general approach will be:&lt;/p>
&lt;ol>
&lt;li>Attempt to convert to the latest project format with the &lt;code>try-convert&lt;/code> tool&lt;/li>
&lt;li>Re-target the project to the .NET Framework 4.7.2 (the first version which supports the .NET standard)&lt;/li>
&lt;li>Repeat for projects which this project depends on, walking the tree of projects to the root&lt;/li>
&lt;li>Run the Portability Analysis tool to see if there are APIs which are not available on certain platforms&lt;/li>
&lt;/ol>
&lt;p>This is how you project might look after migration, having run the &lt;code>try-convert&lt;/code>:&lt;/p>
&lt;p>&lt;img src="./images/migrate-project.png" alt="Screenshot: Ported Visual Studio Project">&lt;/p>
&lt;p>Now we just need to edit the project files and change the line:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#f92672">&amp;lt;TargetFramework&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>4.7.2&lt;span style="color:#f92672">&amp;lt;/TargetFramework&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#f92672">&amp;lt;TargetFrameworks&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>netcoreapp2.0;netcoreapp3.0;netcoreapp3.1;net40;net45;net472&lt;span style="color:#f92672">&amp;lt;/TargetFrameworks&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The targets you will choose will depend on the APIs you want to use. There is an Portability Analysis extension available which can build a portability report, here's what one looks like:&lt;/p>
&lt;p>&lt;img src="./images/portability-report-summary.png" alt="Screenshot: Portability Report Summary">&lt;/p>
&lt;p>This will also show the &lt;em>specific&lt;/em> APIs which are not compatible with specific targets:&lt;/p>
&lt;p>&lt;img src="./images/portability-report.png" alt="Screenshot: Portability Report Details">&lt;/p>
&lt;p>Now it's time to move to the next step.&lt;/p>
&lt;h2 id="step-4---refactor-rinse-repeat">Step 4 - Refactor, Rinse, Repeat&lt;/h2>
&lt;p>This is the tricky part. You'll now need to work out whether you want to &lt;em>remove&lt;/em> API calls which are not portable, try and use alternatives, or conditionally compile the code for different platforms.&lt;/p>
&lt;p>If you are using non-portable APIs you may need to use conditional blocks to execute different code depending on the framework used. The &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#how-to-specify-target-frameworks">Target frameworks in SDK-style projects&lt;/a> guide shows how to do this.&lt;/p>
&lt;p>You may also have to manually edit the project file to ensure that certain dependencies are &lt;em>only&lt;/em> used for certain targets. You solution file and dependencies may end up looking something like this:&lt;/p>
&lt;p>&lt;img src="./images/conditional-dependencies.png" alt="Screenshot: Conditional Dependencies">&lt;/p>
&lt;p>Once you have reloaded the project you'll see your dependencies can now be specified on a per-framework basis, and a build generates assemblies for each of the targets:&lt;/p>
&lt;p>&lt;img src="./images/generated-assemblies.png" alt="Screenshot: Generated Assemblies">&lt;/p>
&lt;p>This process might be simple, or complex, depending on the nuances of your project. For me it was fairly iterative - starting by targeting only &lt;code>net40&lt;/code> (the original target framework which I'd used), then adding more and more targets.&lt;/p>
&lt;p>Some targets will simply not be possible - for example .NET Core only supports WinForms and WPF from .NET Core 3.0 onwards; you won't be able to build a WinForms or WPF assembly which targets a lower version, the framework doesn't support it.&lt;/p>
&lt;h2 id="step-5---update-your-builds">Step 5 - Update Your Builds&lt;/h2>
&lt;p>At this stage, having fixed compatibility issues, you should have code which builds in Visual Studio.&lt;/p>
&lt;p>Now I would recommend porting all of your build code to use the &lt;code>dotnet&lt;/code> build system. This is going to maximise the portability and future-proof your project, you'll be able to run the builds on multiple platforms and are using the preferred standard tool (&lt;code>msbuild&lt;/code> will essentially become legacy).&lt;/p>
&lt;p>The way I like to structure things personally is have a set of scripts which you can run to build, test and package the code locally. You can then call these scripts from you CI tool of choice to automate things, but still keep the logic in your own code, rather than hidden away in a build system.&lt;/p>
&lt;p>For example, in my SharpGL project I have the following scripts:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Script&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>config.ps1&lt;/code>&lt;/td>
&lt;td>Ensure your machine can run builds by installing necessary components such as &lt;code>nunit&lt;/code>. Should only need to be run once.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>build.ps1&lt;/code>&lt;/td>
&lt;td>Build all solutions.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>test.ps1&lt;/code>&lt;/td>
&lt;td>Run all tests, including those in samples.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>coverage.ps1&lt;/code>&lt;/td>
&lt;td>Create a coverage report. Reports are written to &lt;code>./artifacts/coverage&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pack.ps1&lt;/code>&lt;/td>
&lt;td>Create all of the SharpGL NuGet packages, which are copied to &lt;code>./artifacts/packages&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>I updated my scripts to use the &lt;code>dotnet&lt;/code> tool. For example, the &amp;lsquo;build&amp;rsquo; script looks something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ps" data-lang="ps">&lt;span style="color:#a6e22e">#&lt;/span> &lt;span style="color:#a6e22e">Run&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">build,&lt;/span> &lt;span style="color:#a6e22e">hiding&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">documentation&lt;/span> &lt;span style="color:#a6e22e">warnings&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span> &lt;span style="color:#a6e22e">pinvoke&lt;/span> &lt;span style="color:#a6e22e">code.&lt;/span>
&lt;span style="color:#a6e22e">$buildCommand&lt;/span> &lt;span style="color:#a6e22e">=&amp;#34;dotnet&lt;/span> &lt;span style="color:#a6e22e">msbuild&lt;/span> &lt;span style="color:#a6e22e">$PSScriptRoot\SharpGL.sln&lt;/span> &lt;span style="color:#a6e22e">-noWarn:CS1591&lt;/span> &lt;span style="color:#a6e22e">-noWarn:CS1573&lt;/span> &lt;span style="color:#a6e22e">-t:Rebuild&lt;/span> &lt;span style="color:#a6e22e">-p:Configuration=Release&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">Write-Host&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;Running:&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;&amp;#34;$buildCommand&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">Invoke-Expression&lt;/span> &lt;span style="color:#a6e22e">$buildCommand&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And the &amp;lsquo;pack&amp;rsquo; script looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ps" data-lang="ps">&lt;span style="color:#a6e22e">dotnet&lt;/span> &lt;span style="color:#a6e22e">pack&lt;/span> &lt;span style="color:#a6e22e">--no-restore&lt;/span> &lt;span style="color:#a6e22e">--no-build&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;$PSScriptRoot&lt;/span>/Core/SharpGL/SharpGL.csproj&amp;#34; &lt;span style="color:#a6e22e">-c:Release&lt;/span>
&lt;span style="color:#a6e22e">dotnet&lt;/span> &lt;span style="color:#a6e22e">pack&lt;/span> &lt;span style="color:#a6e22e">--no-restore&lt;/span> &lt;span style="color:#a6e22e">--no-build&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;$PSScriptRoot&lt;/span>/Core/SharpGL.SceneGraph/SharpGL.SceneGraph.csproj&amp;#34; &lt;span style="color:#a6e22e">-c:Release&lt;/span>
&lt;span style="color:#a6e22e">dotnet&lt;/span> &lt;span style="color:#a6e22e">pack&lt;/span> &lt;span style="color:#a6e22e">--no-restore&lt;/span> &lt;span style="color:#a6e22e">--no-build&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;$PSScriptRoot&lt;/span>/Core/SharpGL.Serialization/SharpGL.Serialization.csproj&amp;#34; &lt;span style="color:#a6e22e">-c:Release&lt;/span>
&lt;span style="color:#a6e22e">dotnet&lt;/span> &lt;span style="color:#a6e22e">pack&lt;/span> &lt;span style="color:#a6e22e">--no-restore&lt;/span> &lt;span style="color:#a6e22e">--no-build&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;$PSScriptRoot&lt;/span>/Core/SharpGL.WinForms/SharpGL.WinForms.csproj&amp;#34; &lt;span style="color:#a6e22e">-c:Release&lt;/span>
&lt;span style="color:#a6e22e">dotnet&lt;/span> &lt;span style="color:#a6e22e">pack&lt;/span> &lt;span style="color:#a6e22e">--no-restore&lt;/span> &lt;span style="color:#a6e22e">--no-build&lt;/span> &lt;span style="color:#a6e22e">&amp;#34;$PSScriptRoot&lt;/span>/Core/SharpGL.WPF/SharpGL.WPF.csproj&amp;#34; &lt;span style="color:#a6e22e">-c:Release&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The actual scripts are a little more complex. But the key thing here is that I can run &lt;em>any&lt;/em> part of the CI/CD process locally (to test, debug and so on) or on a CI/CD platform.&lt;/p>
&lt;p>One thing which you can do here is update your &lt;em>project files&lt;/em>. There is no need to maintain a separate &lt;code>*.nuspec&lt;/code> file or &lt;code>project.json&lt;/code> file. All project information can be kept in one place - the project file. These files have been improved considerably and should actually end up being &lt;em>smaller&lt;/em> than the originals, as well as consolidating all of the project information and dependency information into one place.&lt;/p>
&lt;p>You can see the &lt;a href="https://github.com/dwmkerr/sharpgl/pull/177">Pull Request&lt;/a> for SharpGL to see how the project files were updated in this case.&lt;/p>
&lt;p>You will most likely have to &lt;em>conditionally&lt;/em> reference certain components. The dependency for &lt;code>net40&lt;/code> might be different to that for &lt;code>netcoreapp3.0&lt;/code>. You'll see that in many of my project files there is now code like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#f92672">&amp;lt;ItemGroup&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Reference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Design&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net40&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Reference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Design&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net45&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Reference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Design&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net472&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Reference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Windows.Forms&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net40&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Reference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Windows.Forms&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net45&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;Reference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Windows.Forms&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net472&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/ItemGroup&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;ItemGroup&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.CSharp&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.7.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;netcoreapp3.0&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.CSharp&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.7.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;netcoreapp3.1&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.CSharp&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.7.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net45&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.CSharp&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.7.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net472&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Data.DataSetExtensions&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.5.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;netcoreapp3.0&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Data.DataSetExtensions&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.5.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;netcoreapp3.1&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Data.DataSetExtensions&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.5.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net45&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;PackageReference&lt;/span> &lt;span style="color:#a6e22e">Include=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.Data.DataSetExtensions&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Version=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.5.0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Condition=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#39;$(TargetFramework)&amp;#39; == &amp;#39;net472&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/ItemGroup&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In my case quite a bit of trial and error was needed to find the appropriate references for each platform.&lt;/p>
&lt;h2 id="step-6---test-test-test">Step 6 - Test, Test, Test&lt;/h2>
&lt;p>Now for the fun part. You are going to &lt;em>really&lt;/em> have to test the new packages on each platform. Sadly, this kind of migration is not something which will have issues exposed via unit tests, you'll need to create test projects which import your packages, ideally for each platform, and make sure they work. There could be runtime errors, particularly if you have made mistakes with the references.&lt;/p>
&lt;p>Many issues will be caught at compile time - some will not.&lt;/p>
&lt;p>Here's a screenshot of me having fun trying out the .NET Framework 4 package for WinForms, and the .NET Core 3.1 package for WPF:&lt;/p>
&lt;p>&lt;img src="./images/test-packages.png" alt="Screenshot: Testing SharpGL">&lt;/p>
&lt;p>How you test your packages will be very dependent on what you are building. If it is highly platform specific then you will likely have to do lots of testing. If it is fairly self-contained code then you might be able to get away with some basic smoke testing.&lt;/p>
&lt;h2 id="step-7---document-compatibility">Step 7 - Document Compatibility&lt;/h2>
&lt;p>If you are supporting multiple platforms and frameworks, it's going to be a lot of help to consumers of your code if you can be very clear about &lt;em>what is supported&lt;/em>.&lt;/p>
&lt;p>This may be more complex than you think. Your library may run fine as part of a .NET Core Console Application on Windows - but does it work on MacOS? What about Linux?&lt;/p>
&lt;p>Here's a screenshot I would never have imagined when I started the SharpGL project - a terminal application running on MacOS which is using the &lt;code>SharpGL.Serialization&lt;/code> library to load geometry from a file:&lt;/p>
&lt;p>&lt;img src="./images/sharpgl-on-mac.png" alt="Screenshot: Loading Geometry in SharpGL on MacOS">&lt;/p>
&lt;p>Now of course for something like SharpGL to run on a Mac or Linux, a lot more work would be needed. SharpGL is at its core nothing more than a wrapper around &lt;code>opengl32.dll&lt;/code> on Windows, on other platforms there are no DLLs, but OpenGL &lt;em>is&lt;/em> still available. So support is possible, but not ready yet. So at this stage, docmenting what you know works &lt;em>as well as what doesn't&lt;/em> will be really helpful.&lt;/p>
&lt;p>You might also want to preserve your &amp;lsquo;pre-migration&amp;rsquo; code in a separate branch, in case you have users who for some reason have issues migrating and need to use an older version. For SharpGL, I updated the project page to indicate compatibility, what has been tested and so on:&lt;/p>
&lt;p>&lt;img src="./images/readme-compatability.png" alt="Screenshot: SharpGL README showing compatibility information">&lt;/p>
&lt;h1 id="the-key-learnings">The Key Learnings&lt;/h1>
&lt;p>Here are the key learnings which stood out for me as I worked on migration of these projects.&lt;/p>
&lt;p>&lt;strong>Consumer Experience&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>If you are careful, you don't have to break anything for consumers - with multi-targeting you can &lt;em>still&lt;/em> target older frameworks.&lt;/li>
&lt;li>You can potentially greatly increase the compatability of your projects by offering support for .NET Core.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Developer Experience&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>You need to upgrade to Visual Studio 2019&amp;hellip;&lt;/li>
&lt;li>&amp;hellip;however, you can use Visual Studio for Mac or even the command-line to build across many platforms.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Maintainer Experience&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>You will have a much larger set of potential consumers, but you will likely find bugs which are framework or platform specific.&lt;/li>
&lt;li>You will likely need to work on migrating your project files and use the latest &lt;code>dotnet&lt;/code> tooling.&lt;/li>
&lt;li>You should be careful to document known compatability issues.&lt;/li>
&lt;/ul>
&lt;p>All in all, the process was less painful than I expected. Now that this work is done I can focus on more exciting things, such as potentially getting projects like SharpGL working on Linux or MacOS, which is much more exciting.&lt;/p>
&lt;p>As always, questions, comments, suggestions, rants, anything are welcome!&lt;/p>
&lt;p>The pull request which migrates the SharpGL project is below:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/sharpgl/pull/177/">github.com/dwmkerr/sharpgl/pull/177/&lt;/a>&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Useful References&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/">Microsoft Docs: .NET Core Documentation&lt;/a>
&lt;a href="https://docs.microsoft.com/en-gb/dotnet/core/porting/">Microsoft Docs: Overview of porting from .NET Framework to .NET Core&lt;/a>
&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/frameworks#how-to-specify-target-frameworks">Microsoft Docs: Target frameworks in SDK-style projects&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>Context Menu for Trello</title><link>https://dwmkerr.com/context-menu-for-trello/</link><pubDate>Thu, 27 Jun 2013 05:40:58 +0000</pubDate><guid>https://dwmkerr.com/context-menu-for-trello/</guid><description>&lt;p>I'm on holiday at the moment, back in sunny England. Holiday may not be the right term really, I'm mostly working through charity stuff (for my charity &lt;a title="Namaste - Children's Homes Nepal" href="http://www.childrenshomesnepal.org/" target="_blank">Namaste - Children's Homes Nepal&lt;/a>) and company administration. I'm also starting working on a big new project, which is pretty exciting.&lt;/p>
&lt;p>Anyway, I got a nice message from a fellow coder &lt;a title="Goerge Hahn on Twitter" href="https://twitter.com/George_Hahn" target="_blank">George Hahn&lt;/a> who has put together a pretty cool project that lets you send files directly to &lt;a title="Trello" href="https://trello.com/" target="_blank">Trello&lt;/a> as an attachment to a card, or even as a new card. Here's a screenshot of it in action:&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/wp-content/uploads/2013/06/TrelloContextMenuExample.png">&lt;img src="images/TrelloContextMenuExample.png" alt="TrelloContextMenuExample" width="503" />&lt;/a>&lt;/p>
&lt;p>It's a nice project, you can check it out on GitHub:&lt;/p>
&lt;table>
&lt;tbody>
&lt;tr>
&lt;td>&lt;iframe style="width: 170px; height: 30px;" src="http://ghbtns.com/github-btn.html?user=GeorgeHahn&amp;amp;repo=TrelloContextMenu&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=large" height="30" width="170" frameborder="0" scrolling="0">&lt;/iframe>&lt;/td>
&lt;td>&lt;iframe style="width: 170px; height: 30px;" src="http://ghbtns.com/github-btn.html?user=GeorgeHahn&amp;amp;repo=TrelloContextMenu&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=large" height="30" width="170" frameborder="0" scrolling="0">&lt;/iframe>&lt;/td>
&lt;td>&lt;iframe style="width: 240px; height: 30px;" src="http://ghbtns.com/github-btn.html?user=GeorgeHahn&amp;amp;type=follow&amp;amp;count=true&amp;amp;size=large" height="30" width="240" frameborder="0" scrolling="0">&lt;/iframe>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
What's also cool about this project is that it's the first project that someone's told me about that uses &lt;a title="SharpShell" href="https://sharpshell.codeplex.com/" target="_blank">SharpShell&lt;/a>. Many people have got in touch with me about SharpShell (in fact, &lt;a title="SharpShell Context Menus on the CodeProject" href="http://www.codeproject.com/Articles/512956/NET-Shell-Extensions-Shell-Context-Menus" target="_blank">the SharpShell Context Menus article on the CodeProject&lt;/a> is very popular), but so far this is the first real-world project where the writer got in touch after the project is completed.
&lt;p>Thanks George, I look forward to seeing what else you're working on!&lt;/p></description><category>CodeProject</category></item><item><title>Build Buttons for Facebook, Twitter, LinkedIn, GitHub and More!</title><link>https://dwmkerr.com/build-buttons-for-facebook-twitter-linkedin-github-and-more/</link><pubDate>Tue, 18 Jun 2013 02:34:59 +0000</pubDate><guid>https://dwmkerr.com/build-buttons-for-facebook-twitter-linkedin-github-and-more/</guid><description>&lt;p>Recently I've been working on a small project called &lt;a title="Build Buttons" href="http://www.buildbuttons.com" target="_blank">Build Buttons&lt;/a>. &lt;a title="Build Buttons" href="http://www.buildbuttons.com" target="_blank">Build Buttons&lt;/a> is a website that let's you quickly create buttons for sharing and promoting content. You can use Build Buttons to create Facebook &amp;lsquo;Like&amp;rsquo; or &amp;lsquo;Follow&amp;rsquo; buttons, LinkedIn &amp;lsquo;Share&amp;rsquo; buttons, Google +1 buttons, GitHub Star, Fork and Follow buttons and more. Here's how it works.&lt;/p>
&lt;p>First, go to &lt;a title="Build Buttons" href="http://www.buildbuttons.com" target="_blank">&lt;a href="http://www.buildbuttons.com">www.buildbuttons.com&lt;/a>&lt;/a>:&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/wp-content/uploads/2013/06/buildbuttons.jpg">&lt;img src="images/buildbuttons.jpg" alt="Build Buttons" width="800" />&lt;/a>&lt;/p>
&lt;p>Now choose the kind of buttons you want, in this example we'll select &amp;lsquo;Social Media&amp;rsquo; from the top menu:&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/wp-content/uploads/2013/06/socialmedia.jpg">&lt;img src="images/socialmedia.jpg" alt="Social Media Buttons" width="800" />&lt;/a>&lt;/p>
&lt;p>On each category page, there's a list of the different types of buttons that can be built. Social Media includes the &amp;lsquo;Share&amp;rsquo; button set. Click &amp;lsquo;Build It!':&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/wp-content/uploads/2013/06/sharebuttons.jpg">&lt;img src="images/sharebuttons.jpg" alt="Social Media Button Settings" width="733" />&lt;/a>&lt;/p>
&lt;p>Now just fill in the details to customise your buttons, enter a URL and select the sort of buttons you want to include. When you're ready to see how your buttons look, choose &amp;lsquo;Build it!':&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/wp-content/uploads/2013/06/results.jpg">&lt;img src="images/results.jpg" alt="Build Buttons Results" width="597" />&lt;/a>&lt;/p>
&lt;p>You get a working preview of how your buttons look, and a text box that includes the HTML you need to drop into your webpage or blog, easy!&lt;/p>
&lt;p>Build Buttons has quite a few different types of buttons you can create. You can:&lt;/p>
&lt;ul>
&lt;li>&lt;span style="line-height: 14px;">Create a set of social media buttons&lt;/span>&lt;/li>
&lt;li>Create Facebook Like and Follow buttons&lt;/li>
&lt;li>Create Google +1 buttons&lt;/li>
&lt;li>Create LinkedIn Share buttons&lt;/li>
&lt;li>Create GitHub Star, Follow and Fork buttons&lt;/li>
&lt;/ul></description><category>CodeProject</category></item><item><title>Getting Paths for Files in NUnit Tests</title><link>https://dwmkerr.com/getting-paths-for-files-in-nunit-tests/</link><pubDate>Thu, 02 May 2013 05:22:45 +0000</pubDate><guid>https://dwmkerr.com/getting-paths-for-files-in-nunit-tests/</guid><description>&lt;p>When using NUnit, sometimes you will want to access files in the test project. These might be xml files with data, assembly references or whatever. Now typically, NUnit will actually copy the files it thinks it needs into a temporary location. This causes the problem that you can then do things like use a relative path to get files in the project. You can use manifest resource streams but sometimes this just isn't suitable.&lt;/p>
&lt;p>To get the path of the root of your test project, you can use the snippet below. Make sure you call it in a unit test fixture that's actually in your test project, not from a class referenced in another project!&lt;/p>
&lt;p>This class, &amp;lsquo;TestHelper&amp;rsquo; can be included in a Unit Test project to let you quickly get the path to the test project.&lt;/p>
&lt;p>[code lang=&amp;quot;csharp&amp;rdquo;]public static class TestHelper
{
public static string GetTestsPath()
{
return Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase).Replace(@&amp;quot;file:&amp;amp;quot;, string.Empty);
}
}[/code]&lt;/p></description><category>CodeProject</category></item><item><title>Introducing FireKeys</title><link>https://dwmkerr.com/introducing-firekeys/</link><pubDate>Mon, 11 Mar 2013 11:11:29 +0000</pubDate><guid>https://dwmkerr.com/introducing-firekeys/</guid><description>&lt;p>I don't know when I learnt that Windows + E opened up Windows Explorer. It must have been a while ago. But it's imprinted in my muscle memory, the number of times I hit that combo every day is probably quite high. But how many other hotkeys do I use? Asides from a few other functional ones, like Win + D, I don't use hotkeys so much. And I got to thinking, I'd love to open Google Chrome with a hotkey just like I do with explorer.&lt;/p>
&lt;p>So I wrote FireKeys - a lightweight application that lets you assign hotkeys to actions. These actions could be opening program, a folder or a URL, but the underlying model is designed to be extensible.&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/wp-content/uploads/2013/03/FireKeysMain.jpg">&lt;img src="images/FireKeysMain.jpg" alt="FireKeysMain" width="600" />&lt;/a>&lt;/p>
&lt;p>You can get the tool from the &lt;a title="FireKeys" href="http://www.dwmkerr.com/firekeys/">FireKeys&lt;/a> page. There's an article on how it was developed on the CodeProject, &lt;a href="http://www.codeproject.com/Articles/559500/FireKeys-Open-Programs-Folders-or-URLs-with-Hot-Ke">FireKeys - Open Programs, Folders and URLs with Hot Keys&lt;/a>.&lt;/p></description><category>CodeProject</category></item><item><title>Spider Solitaire and Augmented Reality</title><link>https://dwmkerr.com/spider-solitaire-and-augmented-reality/</link><pubDate>Mon, 25 Feb 2013 16:16:20 +0000</pubDate><guid>https://dwmkerr.com/spider-solitaire-and-augmented-reality/</guid><description>&lt;p>A while ago, I made an implementation of Solitaire and Spider Solitaire using WPF and my Apex MVVM library. I wrote about it on the CodeProject, in an article called &lt;a title="Solitaire and Spider Solitaire for WPF" href="http://www.codeproject.com/Articles/252152/Solitaire-and-Spider-Solitaire-for-WPF">Solitaire and Spider Solitaire for WPF&lt;/a> (imaginative title indeed).&lt;/p>
&lt;p>Anyway, just recently I got a very interesting message from rupam rupam, who has made an augmented reality version of the project! In his application, you use your webcam to play the game physically by picking up cards with gestures. Other gestures, like thumbs up and thumbs down are bound to commands in the game - here's a screenshot:&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=wCOjuPdBooI">&lt;img src="images/SpiderAugmented.jpg" alt="SpiderAugmented" />&lt;/a>&lt;/p>
&lt;p>The project is called GesCard and as far as I know there isn't a page showing the code - but there are more links on the YouTube video for the page. Check out the YouTube video with the link here &lt;a href="https://www.youtube.com/watch?v=wCOjuPdBooI">&lt;a href="https://www.youtube.com/watch?v=wCOjuPdBooI">https://www.youtube.com/watch?v=wCOjuPdBooI&lt;/a>&lt;/a>. Thanks to rupam for getting in touch and sharing this very cool code!&lt;/p>
&lt;p> &lt;/p></description><category>CodeProject</category></item><item><title>Creating Info Tip Handlers with .NET</title><link>https://dwmkerr.com/creating-info-tip-handlers-with-net/</link><pubDate>Mon, 14 Jan 2013 03:47:44 +0000</pubDate><guid>https://dwmkerr.com/creating-info-tip-handlers-with-net/</guid><description>&lt;p>I have just added an article to the CodeProject that discusses how to create Info Tip shell extensions in .NET. These extensions are used by the shell to customise the tooltips shown over shell items.&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/2013/01/creating-info-tip-handlers-with-net/shellinfotiphandler/" rel="attachment wp-att-210">&lt;img src="images/ShellInfoTipHandler.png" alt="ShellInfoTipHandler" width="385" />&lt;/a>&lt;/p>
&lt;p>The article shows how you can use &lt;a title="SharpShell on CodePlex" href="http://sharpshell.codeplex.com">SharpShell &lt;/a>to very quickly create these extensions, you can find it at: &lt;a title="Shell Info Tip Handlers" href="http://www.codeproject.com/Articles/527058/NET-Shell-Extensions-Shell-Info-Tip-Handlers">&lt;a href="http://www.codeproject.com/Articles/527058/NET-Shell-Extensions-Shell-Info-Tip-Handlers">http://www.codeproject.com/Articles/527058/NET-Shell-Extensions-Shell-Info-Tip-Handlers&lt;/a>&lt;/a>.&lt;/p>
&lt;p>So just how easy does SharpShell make creating Shell Info Tip Handlers? The answer is pretty easy indeed. The code below shows the &lt;strong>full &lt;/strong>implementation of a Shell Info Tip Handler that changes the tooltips for folders to show the name of the folder and the number of items it contains:&lt;/p>
&lt;p>[csharp]/// &amp;lt;summary&amp;gt;
/// The FolderInfoTip handler is an example SharpInfoTipHandler that provides an info tip
/// for folders that shows the number of items in the folder.
/// &amp;lt;/summary&amp;gt;
[ComVisible(true)]
[COMServerAssociation(AssociationType.Directory)]
public class FolderInfoTipHandler : SharpInfoTipHandler
{
/// &amp;lt;summary&amp;gt;
/// Gets info for the selected item (SelectedItemPath).
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;infoType&amp;quot;&amp;gt;Type of info to return.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;singleLine&amp;quot;&amp;gt;if set to &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt;, put the info in a single line.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;
/// Specified info for the selected file.
/// &amp;lt;/returns&amp;gt;
protected override string GetInfo(RequestedInfoType infoType, bool singleLine)
{
// Switch on the tip of info we need to provide.
switch (infoType)
{
case RequestedInfoType.InfoTip:&lt;/p>
&lt;pre>&lt;code> // Format the formatted info tip.
return string.Format(singleLine
? &amp;amp;quot;{0} - {1} Items&amp;amp;quot;
: &amp;amp;quot;{0}&amp;amp;quot; + Environment.NewLine + &amp;amp;quot;Contains {1} Items&amp;amp;quot;,
Path.GetFileName(SelectedItemPath), Directory.GetFiles(SelectedItemPath).Length);
case RequestedInfoType.Name:
// Return the name of the folder.
return string.Format(&amp;amp;quot;Folder '{0}'&amp;amp;quot;, Path.GetFileName(SelectedItemPath));
default:
// We won't be asked for anything else, like shortcut paths, for folders, so we
// can return an empty string in the default case.
return string.Empty;
}
}
&lt;/code>&lt;/pre>
&lt;p>} [/csharp]&lt;/p>
&lt;p>As you can see, all of the COM interfaces are hidden away and handled for you, there is no ugly pinvoke code and no use of strange structures imported from Win32. SharpShell handles all of the plumbing for you.&lt;/p></description><category>CodeProject</category></item><item><title>SharpShell</title><link>https://dwmkerr.com/sharpshell/</link><pubDate>Tue, 08 Jan 2013 16:28:05 +0000</pubDate><guid>https://dwmkerr.com/sharpshell/</guid><description>&lt;p>SharpShell is a project that I have recently uploaded to CodePlex. This class library, and set of tools and samples, is designed to be a framework to enable rapid development of Shell Extensions using the .NET Framework. In time it may grow to contain some functionality for using Shell entities within managed applications (for example, allowing an Explorer context menu to be built dynamically for a given path).&lt;/p>
&lt;p>Anyway, the code is all at &lt;a title="SharpShell on CodePlex" href="http://sharpshell.codeplex.com" target="_blank">sharpshell.codeplex.com&lt;/a>. You can also see a nice article on the CodeProject that show's how to create a Shell Context Menu Extension using C#, the article is at: &lt;a title=".NET Shell Extensions - Shell Context Menus" href="http://www.codeproject.com/Articles/512956/NET-Shell-Extensions-Shell-Context-Menus" target="_blank">.NET Shell Extensions - Shell Context Menus&lt;/a>.&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/2013/01/sharpshell/screenshot1_exampleiconhandler/" rel="attachment wp-att-200">&lt;img src="images/Screenshot1_ExampleIconHandler.png" alt="Screenshot1_ExampleIconHandler" width="515" />&lt;/a>&lt;/p>
&lt;p>&lt;em>Above: An example of a Managed Shell Extension. This sample colours the icons for dlls differently, depending on whether they are native dlls or assemblies.&lt;/em>&lt;/p>
&lt;p>So far, in the repo on CodePlex there are also samples for Shell Icon Handlers (which customise icons in Explorer) and Shell Info Tip Handlers (which customise tooltips). Both of these extension types are fully supported in the current dev version and will be released in the next few days. There's also a partially functioning Shell Property Sheet implementation which will be delivered in the subsequent version. The Shell Property Sheet introduces some particularly strange code - 32 and 64 bit C++ dlls are embedded as manifest resource streams and extracted as needed to provide access to C++ function pointers - ouch.&lt;/p>
&lt;p>More to follow - check out the project and the article.&lt;/p></description><category>CodeProject</category></item><item><title>The GAC Manager</title><link>https://dwmkerr.com/the-gac-manager/</link><pubDate>Sun, 29 Jul 2012 08:44:00 +0000</pubDate><guid>https://dwmkerr.com/the-gac-manager/</guid><description>&lt;p>I have started a new project on CodePlex called 'GAC Manager'. This is a project that is in two parts, the first is a simple tool to allow users to manipulate their local global assembly cache, the second is an API that provides the core functionality.&lt;/p>
&lt;p>Here's a screenshot of the tool in its current state:&lt;/p>
&lt;p>&lt;img src="images/1_TheGacManagerTool.png" />&lt;/p>
&lt;p>An article on the project is available on the CodeProject at:&amp;nbsp;&lt;a href="http://www.codeproject.com/Articles/430568/A-GAC-Manager-Utility-and-API">http://www.codeproject.com/Articles/430568/A-GAC-Manager-Utility-and-API&lt;/a>&lt;/p>
&lt;p>The project itself is at:&amp;nbsp;&lt;a href="https://github.com/dwmkerr/gacmanager">https://github.com/dwmkerr/gacmanager&lt;/a>&lt;/p>
&lt;p>As always, comments, feature requests and so on are welcome!&lt;/p></description><category>CodeProject</category></item><item><title>Apex Part 2 - Adding Commands to an MVVM Application</title><link>https://dwmkerr.com/apex-part-2-adding-commands-to-an-mvvm-application/</link><pubDate>Tue, 15 May 2012 07:43:00 +0000</pubDate><guid>https://dwmkerr.com/apex-part-2-adding-commands-to-an-mvvm-application/</guid><description>&lt;p>In Part 2 of my video tutorial series on using Apex I show you how you can add commands to an MVVM application. Commands let you rapidly add functionality to a ViewModel, whilst still maintaining separation from UI.&lt;/p>
&lt;p>&lt;iframe src="http://www.youtube.com/embed/wt7nncMNRG8" frameborder="0" width="420" height="315">&lt;/iframe>&lt;/p>
&lt;p>A CodeProject article to accompany this video will be published shortly.&lt;/p></description><category>CodeProject</category></item><item><title>Apex Part 1 - Getting Started with the Apex SDK</title><link>https://dwmkerr.com/apex-part-1-getting-started-with-the-apex-sdk/</link><pubDate>Mon, 23 Apr 2012 05:35:00 +0000</pubDate><guid>https://dwmkerr.com/apex-part-1-getting-started-with-the-apex-sdk/</guid><description>&lt;p>Create an MVVM application in minutes with the new Apex SDK!&lt;/p>
&lt;p>The video below shows this in action, see what you think.&lt;/p>
&lt;p>&lt;iframe src="http://www.youtube.com/embed/m4cx9w5fiwk" frameborder="0" width="420" height="315">&lt;/iframe>&lt;/p>
&lt;p>There is also an accompanying article that describes what's going on. As always, would love to hear feedback!&lt;/p>
&lt;p>&lt;a href="http://www.codeproject.com/Articles/371217/Apex-Part-1-Create-Your-First-MVVM-Application">http://www.codeproject.com/Articles/371217/Apex-Part-1-Create-Your-First-MVVM-Application&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>Come on MS - Improve MFC</title><link>https://dwmkerr.com/come-on-ms-improve-mfc/</link><pubDate>Thu, 19 Apr 2012 09:02:00 +0000</pubDate><guid>https://dwmkerr.com/come-on-ms-improve-mfc/</guid><description>&lt;p>Loads of developers still use MFC. OK - if you're writing a new project, MFC would not be a great choice. But what if you're maintaining a 1.5 million line MFC app?&amp;nbsp;&lt;/p>
&lt;p>MFC support in Visual Studio has barely improved since VC++ 6.0 - in fact its got worse. Their cursory attempt to show an effort by adding support for the Ribbon Control with the MFC feature pack was not enough. Why can we still not properly use tab controls in the dialog editor?&lt;/p>
&lt;p>Those who use MFC are probably supporting big enterprise applications - for a long time now we've been neglected. Please vote for more MFC support in Visual Studio Uservoice below:&lt;/p>
&lt;p>&lt;a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2782934-improve-mfc">http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2782934-improve-mfc&lt;/a>&lt;/p>
&lt;p>Will they listen? Chances are not - unless lots of people vote. But I'd really like to see some effort on this, it's a technology still used by many.&lt;/p>
&lt;p>It would be interesting to see a survey of enterprise applications - and what they're written in. It'd be interesting to then compare this to how well MS support that platform. MS will put lots of efforts into what they &lt;em>think &lt;/em>that developers &lt;em>should &lt;/em>be using - but how well are they supporting their real customers who are creating real products?&lt;/p></description><category>CodeProject</category></item><item><title>Could not load file or assembly 'System.Windows, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e' or one of its dependencies.</title><link>https://dwmkerr.com/could-not-load-file-or-assembly-system-windows-version2-0-5-0-cultureneutral-publickeytoken7cec85d7bea7798e-or-one-of-its-dependencies/</link><pubDate>Mon, 16 Apr 2012 07:55:00 +0000</pubDate><guid>https://dwmkerr.com/could-not-load-file-or-assembly-system-windows-version2-0-5-0-cultureneutral-publickeytoken7cec85d7bea7798e-or-one-of-its-dependencies/</guid><description>&lt;p>Are you getting the error below when working with Silverlight projects?&lt;/p>
&lt;pre>Could not load file or assembly 'System.Windows, Version=2.0.5.0, &lt;br />Culture=neutral, PublicKeyToken=7cec85d7bea7798e' or&lt;br /> one of its dependencies.&lt;/pre>
&lt;p>It's a bit of an odd one. The solution that works for me is to re-register System.Core and System.Windows in the GAC. Use the commands below.&lt;/p>
&lt;p>&lt;strong>32 Bit System&lt;/strong>&lt;/p>
&lt;p>"C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\NETFX 4.0 Tools\gacutil" /i "C:\Program Files\Microsoft Silverlight\4.1.10111.0\System.Core.dll"&lt;br />"C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\NETFX 4.0 Tools\gacutil" /i "C:\Program Files\Microsoft Silverlight\4.1.10111.0\System.Windows.dll"&amp;nbsp;&amp;nbsp;&lt;/p>
&lt;p>&lt;strong>64 Bit System&lt;/strong>&lt;/p>
&lt;p>"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\bin\NETFX 4.0 Tools\gacutil" /i "C:\Program Files\Microsoft Silverlight\4.1.10111.0\System.Core.dll"&lt;br />"C:\Program Files&amp;nbsp;(x86)\Microsoft SDKs\Windows\v7.0A\bin\NETFX 4.0 Tools\gacutil" /i "C:\Program Files\Microsoft Silverlight\4.1.10111.0\System.Windows.dll"&amp;nbsp;&amp;nbsp;&lt;/p>
&lt;p>So far I am yet to understand why this happens - if anyone can shed any light please comment!&lt;/p></description><category>CodeProject</category></item><item><title>Embedding a Console in a C# application</title><link>https://dwmkerr.com/embedding-a-console-in-a-c-application/</link><pubDate>Tue, 28 Feb 2012 05:29:00 +0000</pubDate><guid>https://dwmkerr.com/embedding-a-console-in-a-c-application/</guid><description>&lt;p>I have uploaded a new article on the CodeProject - embedding a Console in a C# Application. Here's a screenshot of the control in use:&lt;/p>
&lt;p>&lt;img src="images/Screenshot_ConsoleControlSample.png" />&lt;/p>
&lt;p>As always, comments and suggestions are more than welcome - you can find the article here:&amp;nbsp;&lt;a href="http://www.codeproject.com/Articles/335909/Embedding-a-Console-in-a-C-Application?msg=4169170#xx4168613xx">http://www.codeproject.com/Articles/335909/Embedding-a-Console-in-a-C-Application&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>SharpGL 2.0</title><link>https://dwmkerr.com/sharpgl-2-0/</link><pubDate>Wed, 22 Feb 2012 03:42:00 +0000</pubDate><guid>https://dwmkerr.com/sharpgl-2-0/</guid><description>&lt;p>SharpGL 2.0 has been released - hit the GitHub site to get it:&amp;nbsp;&lt;a href="https://github.com/dwmkerr/sharpgl">https://github.com/dwmkerr/sharpgl&lt;/a>&lt;/p>
&lt;p>Some new features:&lt;/p>
&lt;ul>
&lt;li>Full support for all OpenGL functions up to OpenGL 4.2&lt;/li>
&lt;li>Full support for all commonly used OpenGL extensions&lt;/li>
&lt;li>Support for WinForms applications&lt;/li>
&lt;li>Support for WPF applications (without resorting to WinForms hosts)&lt;/li>
&lt;li>A powerful scene graph including polygons, shaders, NURBs and more&lt;/li>
&lt;li>Many sample applications as starting points for your own projects.&lt;/li>
&lt;li>Visual Studio Extension with SharpGL project templates for WPF and WinForms.&lt;/li>
&lt;/ul>
&lt;div>And a few screenshots:&lt;/div>
&lt;div>&amp;nbsp;&lt;/div>
&lt;div>&amp;nbsp;The Radial Blur Sample&lt;/div>
&lt;p>&lt;img src="images/RadialBlurSample.png" />&lt;/p>
&lt;p>The New Project Types&lt;/p>
&lt;p>&lt;img src="images/NewWpfApplication.png" />&lt;/p>
&lt;p>WPF Support&lt;/p>
&lt;p>&lt;img src="images/TeapotSample.png" />&lt;/p>
&lt;p>Text Rendering&lt;/p>
&lt;p>&lt;img src="images/TextRenderingSample.png" />&lt;/p></description><category>CodeProject</category></item><item><title>Debugger:: An unhandled non-continuable exception was thrown during process load</title><link>https://dwmkerr.com/debugger-an-unhandled-non-continuable-exception-was-thrown-during-process-load/</link><pubDate>Wed, 08 Feb 2012 06:54:00 +0000</pubDate><guid>https://dwmkerr.com/debugger-an-unhandled-non-continuable-exception-was-thrown-during-process-load/</guid><description>&lt;p>The following exception can be a very tricky one to deal with:&lt;/p>
&lt;pre>Debugger:: An unhandled non-continuable exception was thrown during process load&lt;/pre>
&lt;p>here's some tips if you get it.&lt;/p>
&lt;ol>
&lt;li>Are you linking to winmm.lib? If so avoid it - it can cause these problems.&lt;/li>
&lt;li>Are you delay-loading the module? If not, try it - this can often resolve this issue if other modules like winmm.lib are interfering with the module that causes this exception.&lt;/li>
&lt;li>Are you using C++/CLI for the excepting module? If so, try using #pragma pack around exported class definitions.&lt;/li>
&lt;/ol>
&lt;div>If you haven't specified packing - do so. This is good practice anyway. I've used libraries that change the packing (which is very bad behaviour) before and this has caused all sorts of problems, so try and do the following:&lt;/div>
&lt;div>
&lt;pre class="brush: c-sharp;">// Push packing options, specify the packing.
#pragma pack(push, 1)
&lt;p>// Exported class
class MY_API MyClass
{
public:&lt;/p>
&lt;pre>&lt;code>// ...etc
&lt;/code>&lt;/pre>
&lt;p>};&lt;/pre>&lt;/p>
&lt;pre class="brush: c-sharp;">// Restore packing options.
#pragma pack(pop)&lt;/pre>
&lt;/div></description><category>CodeProject</category></item><item><title>Switch</title><link>https://dwmkerr.com/switch/</link><pubDate>Sat, 04 Feb 2012 03:53:00 +0000</pubDate><guid>https://dwmkerr.com/switch/</guid><description>&lt;p>&lt;img src="images/Title.jpg" />&lt;/p>
&lt;p>I have written the second article in my series on Extending Visual Studio. In this article I describe how to create a Visual Studio Addin that allows you to switch between cpp/h files, WinForms code and designer, XAML and codebehind and so on. You can find the article on the CodeProject here:&lt;/p>
&lt;p>&lt;a href="http://www.codeproject.com/Articles/324611/Extending-Visual-Studio-Part-2-Creating-Addins">http://www.codeproject.com/Articles/324611/Extending-Visual-Studio-Part-2-Creating-Addins&lt;/a>&amp;nbsp;&lt;/p>
&lt;p>There is also a direct download page on this blog, you can get Switch from dwmkerr.com by going here:&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/page/Switch.aspx">http://www.dwmkerr.com/page/Switch.aspx&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>Funky WPF - Enumerations and the Combo Box</title><link>https://dwmkerr.com/funky-wpf-enumerations-and-the-combo-box/</link><pubDate>Wed, 18 Jan 2012 03:11:00 +0000</pubDate><guid>https://dwmkerr.com/funky-wpf-enumerations-and-the-combo-box/</guid><description>&lt;p class="MsoNormal">Binding a combo box to an enumeration in WPF is more work than it should be, creating an object data provider etc etc:&lt;/p>
&lt;pre class="brush: xml;">&amp;lt;Window.Resources&amp;gt;
&amp;lt;ObjectDataProvider MethodName="GetValues"
ObjectType="{x:Type sys:Enum}"
x:Key="CharacterEnumValues"&amp;gt;
&amp;lt;ObjectDataProvider.MethodParameters&amp;gt;
&amp;lt;x:Type TypeName="Character" /&amp;gt;
&amp;lt;/ObjectDataProvider.MethodParameters&amp;gt;
&amp;lt;/ObjectDataProvider&amp;gt;
&amp;lt;/Window.Resources&amp;gt;&lt;/pre>
&lt;p class="MsoNormal">Followed by&lt;/p>
&lt;pre class="brush: xml;">&amp;lt;ComboBox SelectedItem="{Binding Character}"&lt;br /> ItemsSource="{Binding &lt;br />Source={StaticResource CharacterValues}} "/&amp;gt;&lt;/pre>
&lt;p class="brush: xml;">What a pain! I have just added 'EnumerationComboBox' to my Apex library - so now you can do this:&lt;/p>
&lt;pre class="brush: xml;">&amp;lt;!-- The combo box, bound to an enumeration. --&amp;gt;
&amp;lt;apexControls:EnumerationComboBox &lt;br />SelectedEnumeration="{Binding Character}" /&amp;gt;&lt;/pre>
&lt;p class="MsoNormal">&lt;span lang="EN-US">No need for an ObjectDataProvider, an items source or anything &amp;ndash; and if you decorate enum&amp;rsquo;s with the &amp;lsquo;[Description]&amp;rsquo; attribute, it&amp;rsquo;ll use the description in the combo.&lt;/span>&lt;/p>
&lt;p class="MsoNormal">&lt;span lang="EN-US">There&amp;rsquo;s an article/download here for anyone who's interested:&lt;/span>&lt;/p>
&lt;p class="MsoNormal">&lt;a href="http://www.codeproject.com/KB/WPF/enumcombobox.aspx">http://www.codeproject.com/KB/WPF/enumcombobox.aspx&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>Apex 1.2 Released</title><link>https://dwmkerr.com/apex-1-2-released/</link><pubDate>Tue, 01 Nov 2011 07:31:00 +0000</pubDate><guid>https://dwmkerr.com/apex-1-2-released/</guid><description>&lt;p>Apex 1.2 has been released, with some new features:&lt;/p>
&lt;ul>
&lt;li>The &amp;lsquo;Compatibility&amp;rsquo; namespace, which contains classes to address compatibility issues between WPF, Silverlight and WP7.&lt;/li>
&lt;li>The &amp;lsquo;Asynchronous Command&amp;rsquo; object, which provides a powerful way to use Asynchronous Commands in MVVM.&lt;/li>
&lt;/ul>
&lt;p>The release is at: &lt;a href="https://github.com/dwmkerr/apex">https://github.com/dwmkerr/apex&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>MVVM Commanding</title><link>https://dwmkerr.com/mvvm-commanding/</link><pubDate>Sat, 29 Oct 2011 08:31:00 +0000</pubDate><guid>https://dwmkerr.com/mvvm-commanding/</guid><description>&lt;p>I have written an article that describes commanding in WPF, Silverlight and WP7 in detail. It is on the CodeProject at:&lt;/p>
&lt;p>&lt;a href="http://www.codeproject.com/KB/WPF/consistentmvvmcommands.aspx">http://www.codeproject.com/KB/WPF/consistentmvvmcommands.aspx&lt;/a>&lt;/p>
&lt;p>It uses the latest version of Apex (version 1.2) which will be released formally shortly. Enjoy!&lt;/p></description><category>CodeProject</category></item><item><title>MVVM: Asynchronous Commands</title><link>https://dwmkerr.com/mvvm-asynchronous-commands/</link><pubDate>Mon, 24 Oct 2011 03:51:00 +0000</pubDate><guid>https://dwmkerr.com/mvvm-asynchronous-commands/</guid><description>&lt;p>The latest cut of the Apex Code (&lt;a href="http://apex.codeplex.com/SourceControl/changeset/changes/6701">http://apex.codeplex.com/SourceControl/changeset/changes/6701&lt;/a>) contains a very cool new feature - Asynchronous Command Objects.&lt;/p>
&lt;p>An Asynchronous Command is a ViewModelCommand - the standard object used in Apex for commanding. However, what is different about this function is that it runs Asynchronously.&lt;/p>
&lt;p>One of the problems with running a view model command asynchronously is that generally the view model properties cannot be accessed - as they're created on a different dispatcher. This problem is resolved by using the 'ReportProgress' function. Here's an example:&lt;/p>
&lt;pre class="brush: c-sharp;">public class SomeViewModel : ViewModel
{
public SomeViewModel()
{
// Create the command.
asyncCommand = new AsynchronousCommand(DoAsyncCommand, true);
}
&lt;p>private void DoAsyncCommand()
{
for(int i = 0; i &amp;lt; 100; i++)
{
// Perform some long operation.
string message = DoSomeLongOperation();&lt;/p>
&lt;pre>&lt;code> // Add the message to the View Model - safely!
asyncCommand.ReportProgress(
() =&amp;amp;gt;
{
messages.Add(message);
}
);
}
&lt;/code>&lt;/pre>
&lt;p>}&lt;/p>
&lt;p>private ObservableCollection&amp;lt;string&amp;gt; messages =
new ObservableCollection&amp;lt;string&amp;gt;();&lt;/p>
&lt;p>public ObservableCollection&amp;lt;string&amp;gt; Messages
{
get { return messages; }
}&lt;/p>
&lt;p>private AsynchronousCommand asyncCommand;&lt;/p>
&lt;p>public AsynchronousCommand AsyncCommand
{
get { return asyncCommand; }
}
}&lt;/pre>&lt;/p>
&lt;p class="brush: c-sharp;">In this basic mock-up we have a command called 'AsyncCommand' (which we could bind a button to for example) which invokes DoAsyncCommand. However, it invokes it Asynchronously. We can also update the ViewModel properties by using ReportProgress - meaning AsyncCommands can seamlessly provide live feedback while they're working - and we're keeping well locked in with the MVVM commanding model!&lt;/p>
&lt;p class="brush: c-sharp;">Expect a full article soon on the CodeProject, until then the source is at:&lt;/p>
&lt;p class="brush: c-sharp;">&lt;a href="http://apex.codeplex.com/SourceControl/changeset/changes/6701">http://apex.codeplex.com/SourceControl/changeset/changes/6701&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>CodeProject Competition</title><link>https://dwmkerr.com/codeproject-competition/</link><pubDate>Thu, 06 Oct 2011 07:30:00 +0000</pubDate><guid>https://dwmkerr.com/codeproject-competition/</guid><description>&lt;p>My Solitaire and Spider Solitaire in WPF article is in two CodeProject competitions this month. The article is at:&lt;/p>
&lt;p>&lt;a href="https://www.codeproject.com/Articles/252152/Solitaire-and-Spider-Solitaire-for-WPF">https://www.codeproject.com/Articles/252152/Solitaire-and-Spider-Solitaire-for-WPF&lt;/a>&lt;/p>
&lt;p>If you think the article is worthy of a vote, then please go to the voting page for either of the two competitions!&lt;/p>
&lt;p>Best C# Article: &lt;a href="http://www.codeproject.com/script/Surveys/VoteForm.aspx?srvid=1209">&lt;a href="http://www.codeproject.com/script/Surveys/VoteForm.aspx?srvid=1209">http://www.codeproject.com/script/Surveys/VoteForm.aspx?srvid=1209&lt;/a>&lt;/a>&lt;/p>
&lt;p>Best Overall Article: &lt;a href="http://www.codeproject.com/script/Surveys/VoteForm.aspx?srvid=1212">&lt;a href="http://www.codeproject.com/script/Surveys/VoteForm.aspx?srvid=1212">http://www.codeproject.com/script/Surveys/VoteForm.aspx?srvid=1212&lt;/a>&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>Drawing a DIB Section in WPF</title><link>https://dwmkerr.com/drawing-a-dib-section-in-wpf/</link><pubDate>Fri, 30 Sep 2011 05:09:00 +0000</pubDate><guid>https://dwmkerr.com/drawing-a-dib-section-in-wpf/</guid><description>&lt;p>One of the most exciting new features in the forthcoming SharpGL 2.0 (which was actually planned for 2.1 but has been moved to 2.0) is the facility to do OpenGL drawing in a WPF control. This isn't done via a WinFormsHost (which has unpleasant side-effects due to Airspace, see&amp;nbsp;&lt;a href="http://msdn.microsoft.com/en-us/library/aa970688(v=VS.100).aspx">http://msdn.microsoft.com/en-us/library/aa970688(v=VS.100).aspx&lt;/a>) but actually via an Image in a WPF UserControl.&lt;/p>
&lt;p>What does this mean? Well it means that when you use the SharpGL.WPF libraries OpenGLControl you get what is essentially a genuine WPF control - you can overlay other controls on top of it, with transparency and bitmap effects and do everything you'd normally be able to do with a WPF control.&lt;/p>
&lt;p>How this works is an interesting bit of code so here are the details.&lt;/p>
&lt;p>When using a WPF OpenGL control we render either using a DIBSectionRenderContextProvider, or a FBORenderContextProvider. Here's the difference:&lt;/p>
&lt;p>&lt;strong>DIBSectionRenderContextProvider&lt;/strong>&amp;nbsp;- Renders directly to a DIB Section. Supported with any version of OpenGL but never hardware accelerated.&lt;/p>
&lt;p>&lt;strong>FBORenderContextProvider&lt;/strong>&amp;nbsp;- Renders to a Framebuffer object, via the GL_EXT_framebuffer_object extension. This is fully hardware accelerated but only supported in OpenGL 1.3 and upwards. The resultant framebuffer is copied into a DIB section also.&lt;/p>
&lt;p>With either render context provider we end up with a DIB section that contains the frame - here's how we can render it:&lt;/p>
&lt;pre class="brush: c-sharp;">/// &amp;lt;summary&amp;gt;
/// Converts a &amp;lt;see cref="System.Drawing.Bitmap"/&amp;gt; into a WPF &amp;lt;see cref="BitmapSource"/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;remarks&amp;gt;Uses GDI to do the conversion. Hence the call to the marshalled DeleteObject.
/// &amp;lt;/remarks&amp;gt;
/// &amp;lt;param name="source"&amp;gt;The source bitmap.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;A BitmapSource&amp;lt;/returns&amp;gt;
public static BitmapSource HBitmapToBitmapSource(IntPtr hBitmap)
{
BitmapSource bitSrc = null;
&lt;pre>&lt;code>try
{
bitSrc = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(
hBitmap,
IntPtr.Zero,
Int32Rect.Empty,
BitmapSizeOptions.FromEmptyOptions());
}
catch (Win32Exception)
{
bitSrc = null;
}
finally
{
Win32.DeleteObject(hBitmap);
}
return bitSrc;
&lt;/code>&lt;/pre>
&lt;p>}&lt;/pre>&lt;/p>
&lt;p>This function allows us to turn a handle to a DIB section into a BitmapSource. The OpenGLControl is essentially just an image, and with each frame we simply set the BitmapSource to the newly rendered DIBSection.&lt;/p>
&lt;p>The version of the code this post relates to is:&amp;nbsp;&lt;a href="http://sharpgl.codeplex.com/SourceControl/changeset/view/4805">http://sharpgl.codeplex.com/SourceControl/changeset/view/4805&lt;/a>&lt;/p>
&lt;p>The WPF example renders the Utah Teapot (&lt;a href="http://en.wikipedia.org/wiki/Utah_teapot">http://en.wikipedia.org/wiki/Utah_teapot&lt;/a>) directly in a WPF application. We're still pre-beta but grab the code if you want to try OpenGL in WPF.&lt;/p></description><category>CodeProject</category></item><item><title>Importing OpenGL Extensions Functions with wglGetProcAddress</title><link>https://dwmkerr.com/importing-opengl-extensions-functions-with-wglgetprocaddress/</link><pubDate>Sat, 24 Sep 2011 06:57:00 +0000</pubDate><guid>https://dwmkerr.com/importing-opengl-extensions-functions-with-wglgetprocaddress/</guid><description>&lt;p>There are only a small set of the core OpenGL functions that can be imported via p/invoke - the majority of OpenGL functions are actually extension functions which are supported only on specific video cards. OpenGL offers a function called&amp;nbsp;wglGetProcAddress which can return the address of a named function - but how do we deal with this in the managed world?&lt;/p>
&lt;p>Here's a brief description of how it's handled in SharpGL. As of this morning, SharpGL's latest version contains &lt;strong>all &lt;/strong>core functions up to OpenGL 4.2 and &lt;strong>all &lt;/strong>standard extensions up to OpenGL 4.2. This takes the support for OpenGL to the latest version - August 2011.&lt;/p>
&lt;p>First we must import the wglGetProcAddress function:&lt;/p>
&lt;pre class="brush: c-sharp;">[DllImport("opengl32.dll")]
public static extern IntPtr wglGetProcAddress(string name);&lt;/pre>
&lt;p>This is the correect p/invoke method of importing this function, however it returns an IntPtr, which we cannot call as a function. We could change the return type to a delegate but this function can return essentially any type of delegate - so where do we go from here?&lt;/p>
&lt;p>Well the next step is to define the delegates we want to use - they must have exactly the same name as the OpenGL functions and use the correct parameters for marshalling. Here are a couple of delegates for OpenGL 1.4:&lt;/p>
&lt;pre class="brush: c-sharp;">private delegate void glBlendFuncSeparate (uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);
&lt;p>private delegate void glMultiDrawArrays (uint mode, int[] first, int[] count, int primcount);&lt;/pre>&lt;/p>
&lt;p>Now we must create a function which will turn an IntPtr into a delegate and invoke it:&lt;/p>
&lt;pre class="brush: c-sharp;">/// &amp;lt;summary&amp;gt;
/// The set of extension functions.
/// &amp;lt;/summary&amp;gt;
private Dictionary&amp;lt;string, Delegate&amp;gt; extensionFunctions = new Dictionary&amp;lt;string, Delegate&amp;gt;();
&lt;p>/// &amp;lt;summary&amp;gt;
/// Invokes an extension function.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;typeparam name=&amp;quot;T&amp;rdquo;&amp;gt;The extension delegate type.&amp;lt;/typeparam&amp;gt;
/// &amp;lt;param name=&amp;quot;args&amp;rdquo;&amp;gt;The arguments to the pass to the function.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;The return value of the extension function.&amp;lt;/returns&amp;gt;
private object InvokeExtensionFunction&amp;lt;T&amp;gt;(params object[] args)
{
// Get the type of the extension function.
Type delegateType = typeof(T);&lt;/p>
&lt;pre>&lt;code>// Get the name of the extension function.
string name = delegateType.Name;
// Does the dictionary contain our extension function?
Delegate del = null;
if (extensionFunctions.ContainsKey(name) == false)
{
// We haven't loaded it yet. Load it now.
IntPtr proc = Win32.wglGetProcAddress(name);
if (proc == IntPtr.Zero)
throw new Exception(&amp;quot;Extension function &amp;quot; + name + &amp;quot; not supported&amp;quot;);
// Get the delegate for the function pointer.
del = Marshal.GetDelegateForFunctionPointer(proc, delegateType);
if (del == null)
throw new Exception(&amp;quot;Extension function &amp;quot; + name + &amp;quot; not supported&amp;quot;);
// Add to the dictionary.
extensionFunctions.Add(name, del);
}
// Get the delegate.
del = extensionFunctions[name];
// Try and invoke it.
object result = null;
try
{
result = del.DynamicInvoke(args);
}
catch
{
throw new Exception(&amp;quot;Cannot invoke extension function &amp;quot; + name);
}
return result;
&lt;/code>&lt;/pre>
&lt;p>}&lt;/pre>&lt;/p>
&lt;p>We now have a generalised way to invoke an extension function. The loaded functions are stored in a dictionary keyed by name so that the heavy lifting is only done the first time we try to invoke the function. &amp;nbsp;We can finally add the functions to the class as below:&lt;/p>
&lt;pre class="brush: c-sharp;">public void BlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
{
InvokeExtensionFunction&amp;lt;glBlendFuncSeparate&amp;gt;(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
&lt;p>public void MultiDrawArrays(uint mode, int[] first, int[] count, int primcount)
{
InvokeExtensionFunction&amp;lt;glMultiDrawArrays&amp;gt;(mode, first, count, primcount);
}&lt;/pre>&lt;/p>
&lt;p>This is pretty cool - we can invoke any extension function as long as we have defined a delegate for it. What's more, by making the InvokeExtensionFunction function public we can allow other developers to provide their own delegates and invoke other extension functions.&lt;/p>
&lt;p>This is the technique used in SharpGL 2.0 to import extension functions - the Core/OpenGLExtensions.cs file contains thousands of lines of functions defined like this, however knowing how to invoke any kind of delegate is a useful skill in the managed world, so this trick could be used in other places.&lt;/p>
&lt;p>The version of SharpGL this post relates to is at:&lt;/p>
&lt;p>&lt;a href="http://sharpgl.codeplex.com/SourceControl/changeset/view/4474">http://sharpgl.codeplex.com/SourceControl/changeset/view/4474&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>How ISupportInitialize Can Help</title><link>https://dwmkerr.com/how-isupportinitialize-can-help/</link><pubDate>Sun, 18 Sep 2011 14:49:00 +0000</pubDate><guid>https://dwmkerr.com/how-isupportinitialize-can-help/</guid><description>&lt;p>I have recently come to discover the &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.isupportinitialize.aspx">ISupportInitialize&lt;/a> interface and found that it is extremely useful when developing more complicated WinForms controls.&lt;/p>
&lt;p>Here's the link to the interface on MSDN: &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.isupportinitialize.aspx">ISupportInitialize&lt;/a> - here I'll describe how it can be useful.&lt;/p>
&lt;h3 id="the-problem">The Problem&lt;/h3>
&lt;p>I have a fairly complicated WinForms usercontrol called 'OpenGLControl', which allows OpenGL commands to be used to render 3D scenes in a C# WinForms application. The control has properties which are interdependent to each other. If these properties are set in the designer, code like this is generated:
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#75715e">// openGLControl1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
| System.Windows.Forms.AnchorStyles.Left)
| System.Windows.Forms.AnchorStyles.Right)));
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.BitDepth = &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.DrawRenderTime = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.FrameRate = &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">9.41176F&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.Location = &lt;span style="color:#66d9ef">new&lt;/span> System.Drawing.Point(&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.Name = &lt;span style="color:#e6db74">&amp;#34;openGLControl1&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.RenderContextType = SharpGL.RenderContextType.NativeWindow;
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.Size = &lt;span style="color:#66d9ef">new&lt;/span> System.Drawing.Size(&lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#ae81ff">7&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.TabIndex = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1.OpenGLDraw += &lt;span style="color:#66d9ef">new&lt;/span> System.Windows.Forms.PaintEventHandler(&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1_OpenGLDraw);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now this leads to a problem - BitDepth, OpenGLDraw, FrameRate etc must all be declared BEFORE the Size property is set - but how can we control this? Or how can we deal with this situation in general?&lt;/p>
&lt;p>This is where the ISupportInitialize interface comes in. If a control is added to the design surface with this interface, we'll get the following code wrapped around the designer code:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> InitializeComponent()
{
System.ComponentModel.ComponentResourceManager resources = &lt;span style="color:#66d9ef">new&lt;/span> System.ComponentModel.ComponentResourceManager(&lt;span style="color:#66d9ef">typeof&lt;/span>(FormExample1));
&lt;span style="color:#66d9ef">this&lt;/span>.label1 = &lt;span style="color:#66d9ef">new&lt;/span> System.Windows.Forms.Label();
&lt;span style="color:#66d9ef">this&lt;/span>.linkLabel1 = &lt;span style="color:#66d9ef">new&lt;/span> System.Windows.Forms.LinkLabel();
&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1 = &lt;span style="color:#66d9ef">new&lt;/span> SharpGL.OpenGLControl();
((System.ComponentModel.ISupportInitialize)(&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1)).BeginInit();
&lt;span style="color:#66d9ef">this&lt;/span>.SuspendLayout();
&lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...ordianry designer code...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ((System.ComponentModel.ISupportInitialize)(&lt;span style="color:#66d9ef">this&lt;/span>.openGLControl1)).EndInit();
&lt;span style="color:#66d9ef">this&lt;/span>.ResumeLayout(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.PerformLayout();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now just implement the ISupportInitialize interface in your control - in the &amp;lsquo;EndInit&amp;rsquo; function do any processing that depends on the interdependent properties. This is the earliest point that we can do processing like this. In certain circumstances, knowing about this interface can save you a lot of trouble.&lt;/p></description><category>CodeProject</category></item><item><title>P/Invoke Performance</title><link>https://dwmkerr.com/pinvoke-performance/</link><pubDate>Mon, 12 Sep 2011 13:09:00 +0000</pubDate><guid>https://dwmkerr.com/pinvoke-performance/</guid><description>&lt;p>SharpGL 2.0 has no P/Invoke - all native functions are called by a C++/CLI class library (OpenGLWrapper if you're getting the code from CodePlex) which calls functions directly. This means there's no more importing of PIXELFORMAT structures and so on.&lt;/p>
&lt;p>The thinking behind this was that a C++/CLI wrapper is faster than P/Invoke for a talkative API like OpenGL - but is this actually the case? In my new article on the CodeProject I investigate the performance differences between these two methods.&lt;/p>
&lt;p>&lt;a href="http://www.codeproject.com/KB/dotnet/pinvokeperformance.aspx">http://www.codeproject.com/KB/dotnet/pinvokeperformance.aspx&lt;/a>&lt;/p></description><category>CodeProject</category></item><item><title>Trials and Tribulations with SharpGL 2.0</title><link>https://dwmkerr.com/trials-and-tribulations-with-sharpgl-2-0/</link><pubDate>Mon, 12 Sep 2011 06:03:00 +0000</pubDate><guid>https://dwmkerr.com/trials-and-tribulations-with-sharpgl-2-0/</guid><description>&lt;p>SharpGL has not been updated for a while, the original CoreProject article is at: &lt;a href="http://www.codeproject.com/KB/openGL/sharpgl.aspx">http://www.codeproject.com/KB/openGL/sharpgl.aspx&lt;/a>&lt;/p>
&lt;p>Recently I have begun work on SharpGL 2.0, with plans to address some of the issues people have had with SharpGL 1.83. In preparation there is a public accessible repository on CodePlex: &lt;a href="http://sharpgl.codeplex.com/">http://sharpgl.codeplex.com/&lt;/a>&amp;nbsp;check it soon, it will shortly be online.&lt;/p>
&lt;p>Trying to squeeze acceptible performance from SharpGL has so far been an interesting task, I have found out many interesting things on the way, I'll be posting small snippets as I work on SharpGL 2.0 describing how I'm improving the performance and structure of the library.&lt;/p></description><category>CodeProject</category></item><item><title>Solitaire and Spider Solitaire on the CodeProject</title><link>https://dwmkerr.com/solitaire-and-spider-solitaire-on-the-codeproject/</link><pubDate>Mon, 12 Sep 2011 06:01:00 +0000</pubDate><guid>https://dwmkerr.com/solitaire-and-spider-solitaire-on-the-codeproject/</guid><description>&lt;p>I have uploaded a new article on the CodeProject, a step by step tutorial showing how to create Solitaire and Spider Solitaire for WPF with the help of Apex.&lt;/p>
&lt;p>The article is available at: &lt;a href="http://www.codeproject.com/KB/WPF/solitaire.aspx">http://www.codeproject.com/KB/WPF/solitaire.aspx&lt;/a>&lt;/p></description><category>CodeProject</category></item></channel></rss>