<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devsecops on dwmkerr.com</title><link>https://dwmkerr.com/categories/devsecops/</link><description>Recent content in devsecops on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Sun, 25 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/categories/devsecops/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple Makefile 'help' command</title><link>https://dwmkerr.com/makefile-help-command/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate><guid>https://dwmkerr.com/makefile-help-command/</guid><description>&lt;p>In this article I&amp;rsquo;m going to show you how to add a &lt;code>make help&lt;/code> command to your makefiles that quickly and easily shows simple documentation for your commands:&lt;/p>
&lt;p>&lt;img src="./images/demo.svg" alt="Screen recording of the &amp;lsquo;makefile help&amp;rsquo; command in action">&lt;/p>
&lt;p>To add the &lt;code>help&lt;/code> command to your makefile, add a recipe like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e"># Show help for each of the Makefile recipes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> @grep -E &lt;span style="color:#e6db74">&amp;#39;^[a-zA-Z0-9 -]+:.*#&amp;#39;&lt;/span> Makefile | sort | &lt;span style="color:#66d9ef">while&lt;/span> read -r l; &lt;span style="color:#66d9ef">do&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;\033[1;32m&lt;/span>$$&lt;span style="color:#e6db74">(echo &lt;/span>$$&lt;span style="color:#e6db74">l | cut -f 1 -d&amp;#39;:&amp;#39;)\033[00m:&lt;/span>$$&lt;span style="color:#e6db74">(echo &lt;/span>$$&lt;span style="color:#e6db74">l | cut -f 2- -d&amp;#39;#&amp;#39;)\n&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now just make sure that each of your recipes has a comment that follows the recipe name, which will be used as its documentation. For example, my &lt;a href="https://github.com/dwmkerr/dwmkerr.com">website repository&lt;/a> has the following recipes in the makefile:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-make" data-lang="make">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e"># Show help for each of the Makefile recipes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> @grep -E &lt;span style="color:#e6db74">&amp;#39;^[a-zA-Z0-9 -]+:.*#&amp;#39;&lt;/span> Makefile | sort | &lt;span style="color:#66d9ef">while&lt;/span> read -r l; &lt;span style="color:#66d9ef">do&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;\033[1;32m&lt;/span>$$&lt;span style="color:#e6db74">(echo &lt;/span>$$&lt;span style="color:#e6db74">l | cut -f 1 -d&amp;#39;:&amp;#39;)\033[00m:&lt;/span>$$&lt;span style="color:#e6db74">(echo &lt;/span>$$&lt;span style="color:#e6db74">l | cut -f 2- -d&amp;#39;#&amp;#39;)\n&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setup&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e"># Setup tools required for local development.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> brew install hugo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hugo version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git submodule update --init --recursive --remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> newpost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">newpost&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e"># Create a new post.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> cd dwmkerr.com; hugo new posts/my-first-post.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> serve
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">serve&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#75715e"># Serve the site locally for testing.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> cd dwmkerr.com; hugo server --baseURL &lt;span style="color:#e6db74">&amp;#34;http://localhost/&amp;#34;&lt;/span> --buildDrafts -v --debug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> build &lt;span style="color:#75715e"># Build the site.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cd dwmkerr.com; hugo --minify
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this setup, you can just enter &lt;code>make&lt;/code>, or &lt;code>make help&lt;/code>, to see the output below:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make help
help: Show help for each of the Makefile recipes.
newpost: Create a new post.
serve: Serve the site locally for testing.
setup: Setup tools required for local development.
&lt;/code>&lt;/pre>&lt;p>Simple! You can find the code at:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/makefile-help">https://github.com/dwmkerr/makefile-help&lt;/a>&lt;/p>
&lt;h2 id="how-it-works">How it Works&lt;/h2>
&lt;p>This project was inspired by the project &lt;a href="https://github.com/FalcoSuessgott/golang-cli-template">&lt;code>golang-cli-template&lt;/code>&lt;/a>, which I noticed had this cool feature of showing help for the makefile commands.&lt;/p>
&lt;p>I built my own version of the command, which is a little bit more verbose, but I think a little easier to read and parse. I&amp;rsquo;ve also included the original version, with a link to the source in the &lt;a href="https://github.com/dwmkerr/makefile-help">&lt;code>makefile-help&lt;/code>&lt;/a> repo.&lt;/p>
&lt;p>Essentially, the code simply:&lt;/p>
&lt;ol>
&lt;li>Searches for recipes - these are lines that start with text, have a colon and a hash symbol&lt;/li>
&lt;li>Goes through each recipe found, extracts the recipe name and documentation comment&lt;/li>
&lt;li>Write each of the recipe names and its documentation to the console&lt;/li>
&lt;/ol>
&lt;h2 id="testing-scripts">Testing Scripts&lt;/h2>
&lt;p>I wanted to make sure that if I improve on the script over time, or add different versions, the code won&amp;rsquo;t break. There&amp;rsquo;s a test script, which is a simple shell script that runs the two help commands and assets the output is as expected.&lt;/p>
&lt;p>At the time of writing, the shell script looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>recipes&lt;span style="color:#f92672">=(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;help-compact&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Some colour codes for formatting.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>green&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\033[1;32m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>red&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\033[1;31m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\033[00m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Default to success for the result of tests.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> recipe in &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>recipes[@]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Create the path to the expected output file.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expected_output&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;./test-cases/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>recipe&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-expected-output.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -f &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>expected_output&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#34;[&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>red&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">FAIL&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>reset&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">] &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>recipe&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; failed, test file &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>expected_output&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; not found\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> success&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>make &lt;span style="color:#e6db74">${&lt;/span>recipe&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cat &lt;span style="color:#e6db74">${&lt;/span>expected_output&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#34;[&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>green&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">PASS&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>reset&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">] &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>recipe&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; passed\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf &lt;span style="color:#e6db74">&amp;#34;[&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>red&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">FAIL&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>reset&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">] &amp;#39;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>recipe&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39; failed\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> success&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Return the exit code.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit &lt;span style="color:#e6db74">${&lt;/span>result&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One thing that is nice about the tests is that they are incorporated into a GitHub Action, which runs the tests using Ubuntu, MacOS and Windows, and tests on both Bash and the generic &lt;code>sh&lt;/code> shell.&lt;/p>
&lt;p>This uses the following features of GitHub actions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources">Runner Images&lt;/a> - predefined images are made available by GitHub for various operating systems&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell">Shell Specificity&lt;/a> - GitHub actions allow you to specify the shell used for a step&lt;/li>
&lt;li>&lt;a href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs">GitHub Action Matrix Strategies&lt;/a> - A matrix of operating systems is specified, to avoid duplicating the pipeline steps for each supported operating system&lt;/li>
&lt;/ul>
&lt;p>This project provides a nice template or starting point if you want to build a simple shell script with some basic testing features.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>If you found this interesting, you might enjoy &lt;a href="https://effective-shell.com">Effective Shell&lt;/a> - My free online book of shell techniques.&lt;/p></description><category>CodeProject</category></item></channel></rss>