<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on dwmkerr.com</title><link>https://dwmkerr.com/categories/javascript/</link><description>Recent content in Javascript on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Sun, 29 Jul 2018 23:36:46 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Procedural Smiles - Animating SVG with pure JavaScript</title><link>https://dwmkerr.com/procedural-smiles-animating-svg-with-pure-javascript/</link><pubDate>Sun, 29 Jul 2018 23:36:46 +0000</pubDate><guid>https://dwmkerr.com/procedural-smiles-animating-svg-with-pure-javascript/</guid><description>I recently needed to be able to generate a simple face image, with the face being able to scale from happy to sad.
(Why I needed to do this is a long story!)
This gave me the opportunity to have a play with SVG, which is something I've not done in a while and always wished I could spend more time with. You can see the result below, move the slider to see the smile animate:</description></item><item><title>Tips and Tricks for Beautifully Simple Mobile App CI</title><link>https://dwmkerr.com/tips-and-tricks-for-beautifully-simple-mobile-app-ci/</link><pubDate>Mon, 03 Apr 2017 11:14:58 +0000</pubDate><guid>https://dwmkerr.com/tips-and-tricks-for-beautifully-simple-mobile-app-ci/</guid><description>In this article I'm going to demonstrate some simple tips and tricks which will help you build and maintain beautifully simple mobile build pipelines. These techniques can be applied to different mobile app technologies and integrated into almost any build system:
Each tip is demonstrated in the sample apps in the dwmkerr/beautifully-simple-app-ci repo.
The Challenges of Mobile App CI Tip 1 - Embrace Makefiles for Consistency Tip 2 - Control Version Numbers with a &amp;lsquo;Touch&amp;rsquo; Command Tip 3 - Control App Icons with a &amp;lsquo;Label&amp;rsquo; Command Tip 4 - Support Configurable App Ids Tip 5 - Document, Document, Document Conclusion The Challenges of Mobile App CI Conceptually, a mobile app CI pipeline is pretty simple:</description></item><item><title>Effective Node.js Debugging</title><link>https://dwmkerr.com/effective-node-js-debugging/</link><pubDate>Sat, 03 Sep 2016 01:36:09 +0000</pubDate><guid>https://dwmkerr.com/effective-node-js-debugging/</guid><description>If you are interested in improving your Node.js debugging skills, then check out my talk at the recent JSChannel 2016 conference in Bangalore:
Comments and observations are always welcome!</description></item><item><title>Moving from React + Redux to Angular 2</title><link>https://dwmkerr.com/moving-from-react-redux-to-angular-2/</link><pubDate>Mon, 25 Apr 2016 09:45:00 +0000</pubDate><guid>https://dwmkerr.com/moving-from-react-redux-to-angular-2/</guid><description>I've just finished working on a very large project written in React and Redux. The whole team were new to both and we loved them.
I'm going to share my experiences of experimenting in Angular 2 with you, from the point of view of someone who needs a pretty compelling reason to move away from my JSX and reducers.
The Journey So Far Let me highlight a few key moments in my UI development experiences, to give a bit of context to my ramblings.</description></item><item><title>Learn Docker by building a Microservice</title><link>https://dwmkerr.com/learn-docker-by-building-a-microservice/</link><pubDate>Tue, 19 Apr 2016 08:54:39 +0000</pubDate><guid>https://dwmkerr.com/learn-docker-by-building-a-microservice/</guid><description>If you are looking to get your hands dirty and learn all about Docker, then look no further!
In this article I'm going to show you how Docker works, what all the fuss is about, and how Docker can help with a basic development task - building a microservice.
We'll use a simple Node.js service with a MySQL backend as an example, going from code running locally to containers running a microservice and database.</description></item><item><title>Getting Started with React &amp; ES6</title><link>https://dwmkerr.com/getting-started-with-react/</link><pubDate>Mon, 07 Sep 2015 19:44:54 +0000</pubDate><guid>https://dwmkerr.com/getting-started-with-react/</guid><description>Feeling like having a go with Facebook's hugely popular React framework but not sure where to start?
In this post I'm going to build a simple React application from scratch - using ECMAScript 6.
We'll put together the bare minimum skeleton of a site and keep the folder structure free of noise and clutter so that you can focus on the app code and not the tooling!
The simple app we'll build is at github.</description></item><item><title>The Best Module System for AngularJS Applications</title><link>https://dwmkerr.com/the-best-module-system-for-angularjs-applications/</link><pubDate>Wed, 18 Mar 2015 14:47:10 +0000</pubDate><guid>https://dwmkerr.com/the-best-module-system-for-angularjs-applications/</guid><description>I was working on a small and simple application built with AngularJS the other day. As with most applications like this, I start with a single JavaScript file caled app.js and no module system.
In the past I've used RequireJS with AngularJS. It's an awful mistake. It leads to a big jump in complexity with no benefts. Angular apps don't work well with AMDs, so really your are using RequireJS to combine files into one big file.</description></item><item><title>Fixing Memory Leaks in AngularJS and other JavaScript Applications</title><link>https://dwmkerr.com/fixing-memory-leaks-in-angularjs-applications/</link><pubDate>Tue, 03 Mar 2015 14:35:36 +0000</pubDate><guid>https://dwmkerr.com/fixing-memory-leaks-in-angularjs-applications/</guid><description>Dealing with memory leaks in JavaScript applications can be a complex process. In this article I'm going to show you how to identify whether you have memory leaks, analyse them and ultimately resolve them.
I'm using an AngularJS application to demonstrate the concepts and approaches, but much of this material applies to any JavaScript application.
Understanding Memory Leaks What is a Memory Leak? Why is a Memory Leak Bad?</description></item><item><title>The Only AngularJS Modal Service You'll Ever Need</title><link>https://dwmkerr.com/the-only-angularjs-modal-service-youll-ever-need/</link><pubDate>Mon, 16 Jun 2014 00:48:12 +0000</pubDate><guid>https://dwmkerr.com/the-only-angularjs-modal-service-youll-ever-need/</guid><description>If you need modals in an AngularJS application, look no further. I'll show you how to use the Angular Modal Service to add Bootstrap Modals or your own custom modals to your application.
See it in a fiddle or check out a full set of samples online.
Contents [Using the Angular Modal Service](#UsingTheAngular ModalService) A Quick Example Design Goals How It Works Wrapping Up Using the Angular Modal Service Here's how you can use the Angular Modal Service to add a bootstrap modal to your application.</description></item><item><title>AngularJS Promises - The Definitive Guide</title><link>https://dwmkerr.com/promises-in-angularjs-the-definitive-guide/</link><pubDate>Wed, 07 May 2014 12:06:55 +0000</pubDate><guid>https://dwmkerr.com/promises-in-angularjs-the-definitive-guide/</guid><description>Promises are a core feature of AngularJS - whether you understand them or not, if you use AngularJS you've almost certainly been using them for a while.
In this post I'm going to explain what promises are, how they work, where they're used and finally how to use them effectively.
Once we've got the core understanding of promises, we'll look at some more advanced functionality - chaining and resolving promises when routing.</description></item><item><title>Practical AngularJS Part 2</title><link>https://dwmkerr.com/practical-angularjs-part-2/</link><pubDate>Wed, 19 Feb 2014 15:29:29 +0000</pubDate><guid>https://dwmkerr.com/practical-angularjs-part-2/</guid><description>I'm going to be working in F# almost exclusively for a short while, so before I throw myself into that I wanted to wind up my Practical AngularJS Part 2 article. It's ready to rock here:
Practical AngularJS Part 2 - Components of an AngularJS ApplicationIn this article we get a brief introduction to what's in the toolkit for an angular developers - filters, controllers, services, directives, views and routes. I don't go into too much detail, we're just seeing what the different components are.</description></item><item><title>Langton's Ant in Javascript</title><link>https://dwmkerr.com/langtons-ant-in-javascript/</link><pubDate>Sun, 15 Dec 2013 10:47:18 +0000</pubDate><guid>https://dwmkerr.com/langtons-ant-in-javascript/</guid><description>Langton's Ant is a great simulation to write to play with a language. Just today I've completed my Langton's Ant write up and published it on the CodeProject, you can see the article at Learn JavaScript Part 3 - Angularjs and Langton's Ant.
There are some interesting things in the article for angular too - a look at using directives for custom elements, how to handle both the DOM and Angular loading correctly, and timers and intervals.</description></item><item><title>A great read for JavaScript newcomers</title><link>https://dwmkerr.com/a-great-read-for-javascript-newcomers/</link><pubDate>Thu, 28 Nov 2013 06:10:16 +0000</pubDate><guid>https://dwmkerr.com/a-great-read-for-javascript-newcomers/</guid><description>A superb article by Colin Eberhardt has just been published on the CodeProject, called &amp;lsquo;Understanding JavaScript Object Creation Patterns&amp;rsquo;.
This article should be on the reading list of anyone who's new to JavaScript or not familiar with how objects and prototypes work. It takes you step by step through the basics all the way to protoypes and classes.
The article is at:
http://www.codeproject.com/Articles/687093/Understanding-JavaScript-Object-Creation-PatternsI'd strongly recommend it!</description></item><item><title>Introducing Practical AngularJS</title><link>https://dwmkerr.com/introducing-practical-angularjs/</link><pubDate>Mon, 25 Nov 2013 16:16:09 +0000</pubDate><guid>https://dwmkerr.com/introducing-practical-angularjs/</guid><description>I was recently at Devoxx in Antwerp, primarily because I wanted to get involved in some of the sessions that were being hosted by guys from the AngularJS team at Google. I've had a chance to work a little with Backbone and KnockoutJS and had been recently deliberately holding off looking at AngularJS so I could hit the conference and workshops fresh and unencumbered with any preconceptions.
The sessions were great, and since then I've been working on a couple of projects that use Angular.</description></item><item><title>Space Invaders on the CodeProject</title><link>https://dwmkerr.com/space-invaders-on-the-codeproject/</link><pubDate>Thu, 21 Nov 2013 12:24:41 +0000</pubDate><guid>https://dwmkerr.com/space-invaders-on-the-codeproject/</guid><description>I'm currently writing a series of articles on the CodeProject called &amp;lsquo;Learn JavaScript&amp;rsquo; and am pleased to say that the latest article is available now!
Learn JavaScript Part 2 - Space InvadersIn this article we take a look at how to create the classic space invaders game with plain JavaScript and HTML - no libraries or frameworks. You can see it in action on the page experiments/spaceinvaders. Check it out - as always, comments are welcome!</description></item><item><title>Space Invaders in JavaScript</title><link>https://dwmkerr.com/space-invaders-in-javascript/</link><pubDate>Sun, 25 Aug 2013 12:04:17 +0000</pubDate><guid>https://dwmkerr.com/space-invaders-in-javascript/</guid><description>If you take a look at theExperiments Pageyou'll see that there's a new entry - Space Invaders.
Space Invaders is a great little game to code if you're learning a new language or technology (and JavaScript is still very much in that category for me). I'll be writing up how I made the game on the CodeProject soon enough (if you're interested you can see how I made the starfield background in JavaScript).</description></item><item><title>Introducing Experiments</title><link>https://dwmkerr.com/introducing-experiments/</link><pubDate>Sat, 24 Aug 2013 06:00:16 +0000</pubDate><guid>https://dwmkerr.com/introducing-experiments/</guid><description>I'm staring a series of articles on learning Javascript (the first is available at http://www.codeproject.com/Articles/642499/Learn-JavaScript-Part-1-Create-a-Starfield). To help with this, I've created the Experimentspage. This page will host each of the things I've been playing with in the process of learning JavaScript and coming up with good topics for tutorials.
You can see the Experimentspage here, there's also a link at the top of the site. If you like it, please feel free to comment on this post or get in touch.</description></item><item><title>Node.js and Express - Strange Http Status Codes</title><link>https://dwmkerr.com/node-js-and-express-strange-http-status-codes/</link><pubDate>Tue, 16 Jul 2013 16:23:43 +0000</pubDate><guid>https://dwmkerr.com/node-js-and-express-strange-http-status-codes/</guid><description>Testing the C# code showed me something that was a bit odd - GETs and POSTSs were working fine, but PUTs and DELETEs were showing an HTTP Status code of &amp;lsquo;1&amp;rsquo; (which isn't a valid code). Here's the what I was seeing:
Checking the node server showed the same thing - DELETEs were returning status 1.
The server code is very lightweight so it's quick to see what's going on:</description></item></channel></rss>