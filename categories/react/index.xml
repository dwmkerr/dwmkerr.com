<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on dwmkerr.com</title><link>https://dwmkerr.com/categories/react/</link><description>Recent content in React on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Mon, 03 Apr 2017 11:14:58 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/categories/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Tips and Tricks for Beautifully Simple Mobile App CI</title><link>https://dwmkerr.com/tips-and-tricks-for-beautifully-simple-mobile-app-ci/</link><pubDate>Mon, 03 Apr 2017 11:14:58 +0000</pubDate><guid>https://dwmkerr.com/tips-and-tricks-for-beautifully-simple-mobile-app-ci/</guid><description>&lt;p>In this article I&amp;rsquo;m going to demonstrate some simple tips and tricks which will help you build and maintain beautifully simple mobile build pipelines. These techniques can be applied to different mobile app technologies and integrated into almost any build system:&lt;/p>
&lt;p>&lt;img src="images/0-sample-index.png" alt="Sample App Index">&lt;/p>
&lt;p>Each tip is demonstrated in the sample apps in the &lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci">dwmkerr/beautifully-simple-app-ci&lt;/a> repo.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#TheChallengesOfMobileAppCI">The Challenges of Mobile App CI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip1EmbraceMakefilesForConsistency">Tip 1 - Embrace Makefiles for Consistency&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip2ControlVersionNumbersWithATouchCommand">Tip 2 - Control Version Numbers with a &amp;lsquo;Touch&amp;rsquo; Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tip3controlappiconswithalabelcommand">Tip 3 - Control App Icons with a &amp;lsquo;Label&amp;rsquo; Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip4SupportConfigurableAppIds">Tip 4 - Support Configurable App Ids&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip5DocumentDocumentDocument">Tip 5 - Document, Document, Document&lt;/a>&lt;/li>
&lt;li>&lt;a href="#/conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="the-challenges-of-mobile-app-ci">The Challenges of Mobile App CI&lt;/h2>
&lt;p>Conceptually, a mobile app CI pipeline is pretty simple:&lt;/p>
&lt;p>&lt;img src="images/1-basic-ci.png" alt="Basic CI Pipeline">&lt;/p>
&lt;p>We take our code, perform some kind of validation (such as testing, linting, whatever), generate our artifacts and then deploy them to some devices.&lt;/p>
&lt;p>Often though there&amp;rsquo;s a bit more to it than that:&lt;/p>
&lt;p>&lt;img src="images/2-basic-not-basic-1.png" alt="Basic CI is not Basic">&lt;/p>
&lt;p>Our source code has some metadata associated with it at the point in time you create your binaries, such as:&lt;/p>
&lt;ul>
&lt;li>The SHA, which uniquely identifies your exact location in the source history.&lt;/li>
&lt;li>The branch, which may have some &lt;em>semantic&lt;/em> meaning for your project, for example &lt;code>master&lt;/code> meaning &amp;lsquo;production&amp;rsquo; or &lt;code>alpha&lt;/code> meaning your current unstable public build.&lt;/li>
&lt;li>A tag, which may represent something like a semver, or may have more project-specific meaning.&lt;/li>
&lt;li>A version, which might be in something like a &lt;code>package.json&lt;/code> or embedded in your project files for iOS or Android.&lt;/li>
&lt;/ul>
&lt;p>When we build we have to:&lt;/p>
&lt;ul>
&lt;li>Think about how we test and validate&lt;/li>
&lt;li>Think about how we sign&lt;/li>
&lt;li>Handle package names and bundle ids, which can cause headaches if you are going to install multiple &lt;em>versions&lt;/em> of an app (e.g. dev and UAT builds)&lt;/li>
&lt;li>Consider build numbers and version number&lt;/li>
&lt;/ul>
&lt;p>So even the &amp;lsquo;basic&amp;rsquo; CI isn&amp;rsquo;t all that basic. The rest of this article is a set of tips and techniques which I have found useful when developing mobile apps.&lt;/p>
&lt;h2 id="tip-1---embrace-makefiles-for-consistency">Tip 1 - Embrace Makefiles for Consistency&lt;/h2>
&lt;p>There are a raft of platform and framework specific tools and interfaces we will have to use in mobile projects. XCode, Gradle, NPM, framework specific CLIs, tools such as Fastlane, etc etc.&lt;/p>
&lt;p>If you ensure that your main &amp;rsquo;entrypoint&amp;rsquo; to key operations is a recipe in a makefile, you can provide a degree of consistency to mobile projects. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;code>make build&lt;/code> - Creates an IPA and APK, saving them to the &lt;code>./artifacts&lt;/code> folder.&lt;/li>
&lt;li>&lt;code>make test&lt;/code> - Runs all test suites.&lt;/li>
&lt;li>&lt;code>make deploy&lt;/code> - Deploys the binaries.&lt;/li>
&lt;/ul>
&lt;p>A &lt;code>makefile&lt;/code> for such commands might look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>test:
# Run all the tests.
npm test
build:
# Create the apk, copy to artifacts.
cd android &amp;amp;&amp;amp; ./gradlew assembleRelease &amp;amp;&amp;amp; cd ..
cp -f ./android/app/build/outputs/apk/myapp.apk ./artifacts
# Create the ipa, copy to artifacts.
cd ./ios; fastlane gym --scheme &amp;#34;app&amp;#34; --codesigning_identity &amp;#34;$(CODE_SIGNING_IDENTITY)&amp;#34;; cd ../;
cp -f ./ios/myapp.ipa ./artifacts
deploy:
# Push to TestFairy.
curl https://app.testfairy.com/api/upload \
-F api_key=&amp;#39;$(API_KEY)&amp;#39; \
-F &amp;#34;file=@./artifacts/myapp.apk&amp;#34;
&lt;/code>&lt;/pre>&lt;p>This is a slightly shortened snippet, you can see a variety of working examples in the git repo:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci">github.com/dwmkerr/beautifully-simple-app-ci&lt;/a>&lt;/p>
&lt;p>The first sample in the above repo demonstrates using makefiles to handle key commands for a React Native app. In the example, CircleCI is used to handle automatic builds on code changes, and the apps themselves are distributed automatically to testers&amp;rsquo; devices with TestFairy.&lt;/p>
&lt;p>The nice feature is that the bulk of the logic is in the main repo source, in the &lt;code>makefile&lt;/code> - the CI tool simply orchestrates it. Developers can run &lt;em>exactly&lt;/em> the same commands on their local machine.&lt;/p>
&lt;p>The &lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci/blob/master/1_react_native_app/README.md">&lt;code>README.md&lt;/code>&lt;/a> immediately draws attention to the makefile commands:&lt;/p>
&lt;p>&lt;img src="images/3-tip1-readme.png" alt="Screenshot of the README.md file">&lt;/p>
&lt;p>The makefiles do most of the work, that makes setting up CircleCI almost trivial. Here&amp;rsquo;s a snippet of its config:&lt;/p>
&lt;pre tabindex="0">&lt;code># Tell Circle where we keep our artifacts.
general:
artifacts:
- ./artifacts
# When we test, we build the android app and test it.
test:
override:
- make build-android
- make test
# If there are any changes to the master branch, push a new version
# of the app.
deployment:
master:
branch: [master]
commands:
- make deploy-android
&lt;/code>&lt;/pre>&lt;p>Our commands are android specific at this stage as Circle don&amp;rsquo;t support iOS builds on their free plan&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Later samples which use other build systems demonstrate Android &lt;em>and&lt;/em> iOS.&lt;/p>
&lt;p>The CI automatically tests and builds whenever we have new code commits:&lt;/p>
&lt;p>&lt;img src="images/4-tip1-circle.png" alt="Screenshot of CircleCI and the artifacts">&lt;/p>
&lt;p>Also, if a commit is made to the &lt;code>master&lt;/code> branch, our new app is automatically pushed to TestFairy, which can be configured to automatically update the test team:&lt;/p>
&lt;p>&lt;img src="images/5-tip1-testfairy.png" alt="Screenshot of TestFairy">&lt;/p>
&lt;p>Makefile syntax is close enough to shell scripting that simple operations are generally straightforward&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to implement. The approach is also perfectly valid for server side code and almost any project.&lt;/p>
&lt;p>Teams with many projects can build consistent patterns and syntax for building. Take a look at the image below:&lt;/p>
&lt;p>&lt;img src="images/Simple-Docker-Image-CI.png" alt="Docker Workflow">&lt;/p>
&lt;p>This is from my article on &lt;a href="http://www.dwmkerr.com/simple-continuous-integration-for-docker-images/">Simple Continuous Integration for Docker Images&lt;/a> - where exactly the same principles are applied.&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Makefiles allow you to provide an entrypoint for common app CI tasks which is framework and toolkit agnostic&lt;/li>
&lt;li>Being able to run the individual &lt;em>steps&lt;/em> of a CI build on a local machine makes it easier for developers to work with the pipeline&lt;/li>
&lt;li>By having a CI platform only need to handle the orchestration of these simple steps, we are less tied to specific platforms and can reduce lock-in&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll see more interesting makefile recipes as we get into the other tips.&lt;/p>
&lt;h2 id="tip-2---control-version-numbers-with-a-touch-command">Tip 2 - Control Version Numbers with a &amp;lsquo;Touch&amp;rsquo; command&lt;/h2>
&lt;p>iOS and Android apps have both a &lt;em>version number&lt;/em> and a &lt;em>build number&lt;/em>. We might have other files in our project with version numbers too (such as a &lt;code>package.json&lt;/code> file).&lt;/p>
&lt;p>It can be very useful to have a way of keeping these version numbers in sync. Again, we can use a makefile recipe:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make touch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will vary in implementation depending on your platform. For example, this would be all that is needed for a Cordova based project:&lt;/p>
&lt;pre tabindex="0">&lt;code># The version in package.json is the &amp;#39;master&amp;#39; version.
VERSION ?= $(shell cat package.json | jq --raw-output .version)
BUILD_NUM ?= 0
touch:
$(info &amp;#34;Touching to version $(VERSION) and build number $(BUILD_NUM).&amp;#34;)
sed -i &amp;#34;&amp;#34; -e &amp;#39;s/android-versionCode=\&amp;#34;[0-9]*\&amp;#34;/android-versionCode=\&amp;#34;$(BUILD_NUM)\&amp;#34;/g&amp;#39; ./config.xml
sed -i &amp;#34;&amp;#34; -e &amp;#39;s/ios-CFBundleVersion=\&amp;#34;[0-9]*\&amp;#34;/ios-CFBundleVersion=\&amp;#34;$(BUILD_NUM)\&amp;#34;/g&amp;#39; ./config.xml
sed -i &amp;#34;&amp;#34; -e &amp;#39;s/version=\&amp;#34;[.0-9a-zA-Z]*\&amp;#34;/version=\&amp;#34;$(VERSION)&amp;#34;/g&amp;#39; ./config.xml
&lt;/code>&lt;/pre>&lt;p>Notice we don&amp;rsquo;t really need complex tools for a job like this, &lt;code>sed[^3]&lt;/code> is sufficient to quickly make changes to config files.&lt;/p>
&lt;p>This works very nicely with build systems, many of which provide a build number as an environment variable. For example, we can add a build number with TravisCI like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>env:
- BUILD_NUM=$TRAVIS_BUILD_NUMBER
script:
- make touch
- make test
- make build-android
&lt;/code>&lt;/pre>&lt;p>To go into more detail, we&amp;rsquo;ll look at the second sample in the git repo, which is a Cordova App. This sample will always set the build number in both apps and the build version to whatever is present in the &lt;code>package.json&lt;/code> file. That means you can do things like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ npm version minor # Bump the version
v0.1.0
$ BUILD_NUM=3 make build &amp;amp;&amp;amp; make deploy # Build and deploy the apps
...
done
&lt;/code>&lt;/pre>&lt;p>And all of the version numbers and build numbers are updated and the apps are deployed. In this example project, they&amp;rsquo;re deployed to HockeyApp:&lt;/p>
&lt;p>&lt;img src="images/6-hockey-app.png" alt="Screenshot of the newly versioned apps in HockeyApp">&lt;/p>
&lt;p>This build runs on TravisCI, so only builds the Android version. You can clone the code and build the iOS version (and deploy it) using the makefile.&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>There will come a point in your project development where you&amp;rsquo;ll need to handle version numbers, having a command to explicitly deal with this adds rigour to this process&lt;/li>
&lt;li>Build numbers are just as important as version numbers during development, ensuring your CI build number is baked into your artifacts is critical for troubleshooting and control&lt;/li>
&lt;/ul>
&lt;h1 id="tip-3---control-app-icons-with-a-label-command">Tip 3 - Control App Icons with a &amp;lsquo;Label&amp;rsquo; Command&lt;/h1>
&lt;p>When you are working in a larger team, it can be very useful to label your app icon so that team members know exactly what version of the app they are using. This is often the case if you are working in a team where features or bugfixes are being deployed rapidly.&lt;/p>
&lt;p>You might label your icons with build numbers, SHAs, branch names, versions, tags, or even something custom such as &amp;lsquo;QA&amp;rsquo; or &amp;lsquo;UAT&amp;rsquo; for different versions of your app. Here are a few examples:&lt;/p>
&lt;p>&lt;img src="images/8-framed-labelled-icons.png" alt="Labelled Icons Screenshot">&lt;/p>
&lt;p>I&amp;rsquo;ve found this to be very useful, so created a command-line tool called &amp;lsquo;&lt;a href="github.com/dwmkerr/app-icon">app-icon&lt;/a>&amp;rsquo; to help with the task:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/app-icon">github.com/dwmkerr/app-icon&lt;/a>&lt;/p>
&lt;p>This tool has a &lt;code>label&lt;/code> command to add a label, and a &lt;code>generate&lt;/code> command to generate icons of all different sizes. This means you can add recipes like this to your &lt;code>makefile&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>VERSION ?= $(shell cat package.json | jq --raw-output .version)
BUILD_NUM ?= 0 # This might come from Circle, Travis or Whatever...
label:
$(info Labeling icon with &amp;#39;$(VERSION)&amp;#39; and &amp;#39;$(BUILD_NUM)&amp;#39;...)
app-icon label -i base-icon.png -o icon.png --top $(VERSION) --bottom $(BUILD_NUM)
app-icon generate -i icon.png
&lt;/code>&lt;/pre>&lt;p>Each sample app labels its icon in a different way:&lt;/p>
&lt;ol>
&lt;li>The &lt;a href="./1_react_native_app/">React Native App&lt;/a> puts the short Git SHA on the bottom of the icon.&lt;/li>
&lt;li>The &lt;a href="./2_ionic_app/">Ionic App&lt;/a> puts the &lt;code>package.json&lt;/code> version at the top of the icon.&lt;/li>
&lt;li>The &lt;a href="./3_native_app">Native App&lt;/a> puts an environment label at the top of the icon, and the build number at the bottom.&lt;/li>
&lt;li>The &lt;a href="./4_xamarinapp">Xamarin App&lt;/a> includes the configurable app environment (this is detailed in the next tip) and build number&lt;/li>
&lt;/ol>
&lt;p>There are references to each sample and the associated code in the &lt;code>README.md&lt;/code> at:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci">github.com/dwmkerr/beautifully-simple-app-ci&lt;/a>&lt;/p>
&lt;p>As a quick example, the Pure Native App runs this code prior to each build:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>BUILD_NUM&lt;span style="color:#f92672">=&lt;/span>BUDDYBUILD_BUILD_NUMBER make label
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This app uses BuddyBuild as a build system, meaning we can just drop this line in the &lt;a href="./buddybuild_postclone.sh">&lt;code>buddybuild_postclone.sh&lt;/code>&lt;/a> script. You can see the labeled icons directly in the BuddyBuild UI:&lt;/p>
&lt;p>&lt;img src="images/12-buddybuild-icons.png" alt="BuddyBuild Icons">&lt;/p>
&lt;p>The Android build is currently having some issues due to fonts being accessible by the labelling tool (which uses ImageMagick under the hood), with any luck this issue will be fixed soon. This seems to be an issue with the BuddyBuild ImageMagick installation rather than the labelling code itself, which is running fine on all of the other builds!&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A little bit of time invested in managing your app icon can potentially save many hours if you are rapidly iterating on apps&lt;/li>
&lt;li>The &lt;a href="https://github.com/dwmkerr/app-icon">&lt;code>app-icon&lt;/code>&lt;/a> tool can help you quickly label and generate icons&lt;/li>
&lt;/ul>
&lt;h1 id="tip-4---support-configurable-app-ids">Tip 4 - Support Configurable App Ids&lt;/h1>
&lt;p>Another trick I&amp;rsquo;ve found useful is to have a command which automatically updates your iOS Bundle ID or Android Application ID. This can be handy when you have multiple versions of an app (such as a QA build, dev build, UAT build or whatever).&lt;/p>
&lt;p>If you have users who need to have different versions of your app on their phones then this is actually a necessary step (at least for iOS), as you cannot have multiple versions of an app with the same ID installed.&lt;/p>
&lt;p>Often, I will aim to have a standard &amp;lsquo;base id&amp;rsquo;, such as:&lt;/p>
&lt;pre tabindex="0">&lt;code>com.dwmkerr.myapp
&lt;/code>&lt;/pre>&lt;p>and then simply append whatever the &amp;lsquo;flavour&amp;rsquo; of my app is to the end of the id:&lt;/p>
&lt;pre tabindex="0">&lt;code>com.dwmkerr.myapp_qa # The QA build...
com.dwmkerr.myapp_uat # The UAT build...
&lt;/code>&lt;/pre>&lt;p>The base id is then reserved for the master build, which is what goes into production.&lt;/p>
&lt;p>Just like with all of the other tricks, I tend to use a recipe in the &lt;code>makefile&lt;/code> to do the heavy lifting, and then leave the build system to orchestrate the commands (we&amp;rsquo;ll see more of this later). Here&amp;rsquo;s how a recipe will typically look (this comes from the fourth sample, which is a Xamarin App):&lt;/p>
&lt;pre tabindex="0">&lt;code>ENV ?= production
# Set the app id, with the &amp;#39;production&amp;#39; environment implying the unaltered &amp;#39;base&amp;#39; id.
ifeq ($(ENV),production)
APP_ID=com.dwmkerr.xamarinapp
else
APP_ID=com.dwmkerr.xamarinapp_$(ENV)
endif
name:
$(info Naming app &amp;#39;$(APP_ID)&amp;#39;...)
sed -i.bak &amp;#39;s/com.dwmkerr.xamarinapp.*&amp;lt;/$(APP_ID)&amp;lt;/&amp;#39; iOS/Info.plist
sed -i.bak &amp;#39;s/com.dwmkerr.xamarinapp.*\&amp;#34;/$(APP_ID)\&amp;#34;/&amp;#39; Droid/Properties/AndroidManifest.xml
&lt;/code>&lt;/pre>&lt;p>This small recipe can be very useful in combination with other techniques. Ensuring your build respects the &lt;code>ENV&lt;/code> variable (or whatever you name your &amp;lsquo;flavour&amp;rsquo;) means that you can have different configurations for different environments, build multiple versions of the app, each with a distinct app icon, and distribute them to your team.&lt;/p>
&lt;p>In the screenshots below, you can see how the presence of the &lt;code>ENV&lt;/code> environment variable automatically updates the App ID (this is taken from the &lt;a href="./4_xamarinapp">Xamarin Sample&lt;/a>, which orchestrates builds with Bitrise&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;p>&lt;img src="images/9-bitrise.png" alt="The ENV Environment variable in Bitrise">&lt;/p>
&lt;p>&lt;img src="images/10-bitrise-apps.png" alt="The built apps in Bitrise">&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Configurable App Ids allow you to maintain isolated builds of your app for specific environments, even on the same physical device&lt;/li>
&lt;li>This tip must be used with caution, some features (such as iOS push notifications) will not work if the bundle id is changed (it can also cause issues if your provisioning profile does not use a wildcard)&lt;/li>
&lt;/ul>
&lt;h2 id="tip-5---document-document-document">Tip 5 - Document, Document, Document&lt;/h2>
&lt;p>Even teams which are great at documenting complex application code can sometimes be a bit lax when it comes to documenting build related code.&lt;/p>
&lt;p>Unfortunately, build related code will often need &lt;em>more&lt;/em> documentation than usual. Why is this?&lt;/p>
&lt;ul>
&lt;li>It is often &lt;em>complex&lt;/em> (spend any time working with the XCode commandline or provisioning profiles and you&amp;rsquo;ll likely agree)&lt;/li>
&lt;li>It is &lt;em>rarely changed&lt;/em> (often worked on heavily at the early stages of a project then not touched)&lt;/li>
&lt;li>It is &lt;em>critical&lt;/em> (when it breaks, teams are often blocked)&lt;/li>
&lt;/ul>
&lt;p>When something goes wrong with a build process, or needs to be changed, it is a real pain when only one person knows how the code works. Be rigorous with this code, make sure it is documented and reviewed, and share the knowledge around your team. I tend to like to have a table of commands as a quick index in the README.md file, and then heavily comment the code itself:&lt;/p>
&lt;p>&lt;img src="images/11-document.png" alt="TODO">&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Be rigorous with documentation, when things go wrong with CI code then people are often blocked&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Most of these tips are fairly explicit, there are detailed examples in the sample project. Familiarity with these patterns and techniques can be useful, but perhaps the most valuable takeaway would be to embrace the following principles:&lt;/p>
&lt;ul>
&lt;li>Developers should be able to run all of the key CI steps on their local machine, to be able to understand, adapt and improve the process&lt;/li>
&lt;li>When building more complex features, we should create small, simple units of work which can be composed into larger pipelines&lt;/li>
&lt;li>Complexity, if needed, should be in in code - not in &amp;lsquo;black box&amp;rsquo; CI tools (such as esoteric features for specific CI providers or Jenkins plugins). For example, CircleCI offers a Git Short SHA environment variable - but you can grab a short SHA with &lt;code>git log -1 --format=&amp;quot;%h&amp;quot;&lt;/code>, and the second approach works anywhere&lt;/li>
&lt;li>Use CI platforms to &lt;em>orchestrate&lt;/em> work, use makefiles and scripts to handle logic&lt;/li>
&lt;/ul>
&lt;p>I hope this article has been useful, any thoughts or comments are always welcome!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Footnotes&lt;/strong>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I have successfully used this approach to build Android &lt;em>and&lt;/em> iOS from the same OSX build agent on their paid plan on a number of projects. The most straightforward way to do this is to have a single build run on OSX and create the Android app as well as the iOS app.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Perhaps straightforward is an overstatement, but getting those who are familiar with shell scripting will have few difficulties. Those who are not will find a learning curve, but it is &lt;em>very&lt;/em> useful to at least get the basics of shell scripting learnt.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Moving from React + Redux to Angular 2</title><link>https://dwmkerr.com/moving-from-react-redux-to-angular-2/</link><pubDate>Mon, 25 Apr 2016 09:45:00 +0000</pubDate><guid>https://dwmkerr.com/moving-from-react-redux-to-angular-2/</guid><description>&lt;p>I&amp;rsquo;ve just finished working on a very large project written in React and Redux. The whole team were new to both and we loved them.&lt;/p>
&lt;p>I&amp;rsquo;m going to share my experiences of experimenting in Angular 2 with you, from the point of view of someone who needs a pretty compelling reason to move away from my JSX and reducers.&lt;/p>
&lt;h1 id="the-journey-so-far">The Journey So Far&lt;/h1>
&lt;p>Let me highlight a few key moments in my UI development experiences, to give a bit of context to my ramblings.&lt;/p>
&lt;p>&lt;img src="images/Journey.jpg" alt="The Journey So Far">&lt;/p>
&lt;p>Reading about redux was a lightbulb moment for me - rather than a complex framework it&amp;rsquo;s a simply library to help apply a few common sense functional programming principles - state is immutable, functions apply predictable transformations to data to produce new data.&lt;/p>
&lt;p>Learning React took a little bit of getting used to, but not too much, it was quite a bit more simple than Angular anyway.&lt;/p>
&lt;p>Long story short, simple React components and rigorous state management has so far resulted in the most manageable and well written very large scale UIs I&amp;rsquo;ve worked on so far - can Angular 2 compete with this?&lt;/p>
&lt;h1 id="first-step-with-angular-2---folder-structure-typescript-sublime-text">First Step with Angular 2 - Folder Structure, Typescript, Sublime Text&lt;/h1>
&lt;p>I checked out &lt;a href="https://angular.io/docs/ts/latest/quickstart.html">the pretty neat &amp;lsquo;Getting Started&amp;rsquo; guide from Angular&lt;/a> which promised to get me started in five minutes.&lt;/p>
&lt;p>It didn&amp;rsquo;t take five minutes, there&amp;rsquo;s a few gotchas, so I&amp;rsquo;m going to give a condensed guide here.&lt;/p>
&lt;h2 id="step-1-the-folder-structure">Step 1: The Folder Structure&lt;/h2>
&lt;p>The first few steps of the angular guide creates the following folder structure:&lt;/p>
&lt;pre tabindex="0">&lt;code>|-- angular2-starter
|-- tsconfig.json
|-- typings.json
|-- package.json
&lt;/code>&lt;/pre>&lt;p>This is the standard &lt;code>package.json&lt;/code> with some scripts ready to go. We also have &lt;code>tsconfig.json&lt;/code> to configure the typescript compiler and &lt;code>typings.json&lt;/code> to provide info to the compiler on where to get type information.&lt;/p>
&lt;p>You can check the code at this stage here:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/angular2-starter/tree/step1">https://github.com/dwmkerr/angular2-starter/tree/step1&lt;/a>&lt;/p>
&lt;p>&lt;img src="images/Step1.png" alt="Step 1 GitHub Screenshot">&lt;/p>
&lt;h2 id="node--npm-issues">Node &amp;amp; NPM Issues&lt;/h2>
&lt;p>At this stage the quickstart says you can run &lt;code>npm install&lt;/code> and all will be well:&lt;/p>
&lt;p>&lt;img src="images/npm-install.png" alt="npm install screenshot">&lt;/p>
&lt;pre tabindex="0">&lt;code>npm ERR! cb() never called!
&lt;/code>&lt;/pre>&lt;p>Not so good! For the record I&amp;rsquo;m using NPM 3.7.3 installed via homebrew. This looks like a bug in Beta 15 (see &lt;a href="https://github.com/angular/angular/issues/8053">Issue #8053&lt;/a>).&lt;/p>
&lt;p>I fixed this by using &lt;em>n&lt;/em> to upgrade my node version:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ node -v
v5.9.0
$ npm install -g n # install &amp;#39;n&amp;#39; node version manager
$ sudo n latest
installed : v5.11.0
$ node -v
v5.11.0
&lt;/code>&lt;/pre>&lt;p>Now it &lt;code>npm install&lt;/code> runs OK.&lt;/p>
&lt;h2 id="step-2-adding-components-and-configuring-sublime">Step 2: Adding Components and Configuring Sublime&lt;/h2>
&lt;p>The next steps of the walkthrough take us through adding an app component, a &lt;code>main.ts&lt;/code> file to bootstrap the application and an index file. You can check the updates here:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/angular2-starter/tree/step2">https://github.com/dwmkerr/angular2-starter/tree/step2&lt;/a>&lt;/p>
&lt;p>Essentially we now have:&lt;/p>
&lt;pre tabindex="0">&lt;code>|-- angular2-starter
|-- tsconfig.json
|-- typings.json
|-- package.json
|-- index.html
|-- styles.css
|-- app
|-- main.ts
|-- app.component.ts
&lt;/code>&lt;/pre>&lt;p>At this stage, running &lt;code>npm start&lt;/code> gives us a browerserified app to play with:&lt;/p>
&lt;p>&lt;img src="images/Step2.png" alt="Step 2 Screenshot">&lt;/p>
&lt;p>Clear enough so far, although the code in Sublime is not looking so pretty:&lt;/p>
&lt;p>&lt;img src="images/Step2Sublime.png" alt="Step 2 Sublime Text Screenshot">&lt;/p>
&lt;p>Quickly installing the &lt;a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin">TypeScript plugin&lt;/a> from Microsoft[^n] seems to do the trick:&lt;/p>
&lt;p>&lt;img src="images/Step2SublimeFormatted.png" alt="Step 2 Sublime Text with TypeScript plugin">&lt;/p>
&lt;p>If you need more details, here&amp;rsquo;s a gist with the full setup for Sublime 3, assuming you&amp;rsquo;ve got nothing installed.&lt;/p>
&lt;p>&lt;a href="https://gist.github.com/dwmkerr/04fa8b8c15d049d0381e7798a79bcc45">https://gist.github.com/dwmkerr/04fa8b8c15d049d0381e7798a79bcc45&lt;/a>&lt;/p>
&lt;p>At this stage the app will run, we can see the basics of the Angular 2 syntax and start experimenting.&lt;/p>
&lt;h2 id="step-3-adding-some-components">Step 3: Adding some components&lt;/h2>
&lt;p>At this stage the quick started guide starts going into more detail, guiding you through the process of creating multiple components. I decided to go off on my own here, with the rough plan of being able to write a set of goals for the day and turn it into a check-list[^n].&lt;/p>
&lt;p>Within not much time I had the some basic components, input and output, bindings and so on. Some screenshots:&lt;/p>
&lt;p>&lt;img src="images/Goals-Screenshot-1.png" alt="Goals Screenshot 1">&lt;/p>
&lt;p>&lt;img src="images/Goals-Screenshot-2-1.png" alt="Goals Screenshot 2">&lt;/p>
&lt;p>You can take a look at the code at this stage by checking out the &amp;lsquo;step3&amp;rsquo; branch:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/angular2-starter/tree/step3">github.com/dwmkerr/angular2-starter/tree/step3&lt;/a>&lt;/p>
&lt;h1 id="thoughts-so-far">Thoughts so far&lt;/h1>
&lt;p>For now, that&amp;rsquo;s all I&amp;rsquo;ve got time for. I&amp;rsquo;ve had a chance to get a feel for Angular 2, I&amp;rsquo;m going to come back to this in a few weeks and integrate Redux, maybe swap out System.JS for Webpack and do some experimenting.&lt;/p>
&lt;p>Opinions[^n] so far?&lt;/p>
&lt;h3 id="not-sold-on-typescript">Not Sold on TypeScript&lt;/h3>
&lt;p>I&amp;rsquo;ve used TypeScript in my mess around, rather than plain &amp;lsquo;ol JavaScript, to keep the experience authentic to the angular team&amp;rsquo;s goals of using TypeScript to help.&lt;/p>
&lt;p>So far, I&amp;rsquo;m not seeing an enormous benefit. Some of the extra information available to auto-completion in nice, but this is a tooling thing.&lt;/p>
&lt;p>JavaScript is not a static language, the TypeScript annotations I find slowing me down a little.&lt;/p>
&lt;blockquote>
&lt;p>There&amp;rsquo;s so much extra domain specific &lt;em>stuff&lt;/em> in Angular 2 that people might be lost without it. But if your stuff is so complex you need to adapt the base language, is it &lt;strong>too&lt;/strong> complex?&lt;/p>
&lt;/blockquote>
&lt;h3 id="explicit-component-surface-areas-are-a-nice-idea">Explicit Component Surface Areas are a Nice Idea&lt;/h3>
&lt;p>When defining a component, you specify explicitly what comes &lt;em>in&lt;/em> (data) and what goes &lt;em>out&lt;/em> (events).&lt;/p>
&lt;p>This means that the surface area of a component (i.e. the part you touch if you interact with it programmatically) is well defined. This is a good thing.&lt;/p>
&lt;p>However, this is all handled with some pretty framework-specific stuff[^n]:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// e.g.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GoalsBoxComponent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Event we fire when the goals change.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Output&lt;/span>() &lt;span style="color:#a6e22e">goalsChanged&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">EventEmitter&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Goal&lt;/span>[]&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">EventEmitter&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// e.g.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GoalListComponent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Input is a set of goals to render.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">Input&lt;/span>() &lt;span style="color:#a6e22e">goals&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Goal&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a nutshell&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>Explicit component surface area is a cool idea.&lt;/p>
&lt;/blockquote>
&lt;p>React does this too with the optional &lt;code>propTypes&lt;/code>, but it is not enforced. &lt;em>However&lt;/em>, how this is done in Angular has already gone through a few radical changes with some &lt;a href="https://github.com/angular/angular/pull/4435#issuecomment-144789359">lively debate&lt;/a>.&lt;/p>
&lt;h3 id="not-ready-for-production-yet">Not ready for production&amp;hellip; yet&lt;/h3>
&lt;p>There&amp;rsquo;s no standardised, documented way to test a component - nuff said. But things are evolving quickly.&lt;/p>
&lt;h3 id="framework-fatigue">Framework Fatigue&lt;/h3>
&lt;p>Comparing React to Angular is unfair, one is a view library, one is a framework. But it&amp;rsquo;s worth pointing out this is a pretty complex framework. There&amp;rsquo;s a &lt;strong>lot&lt;/strong> of very domain specific stuff. See this documentation for an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">li&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;#hero of heroes&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From &lt;a href="https://angular.io/docs/ts/latest/tutorial/toh-pt2.html">the documentation&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The (*) prefix to ngFor indicates that the &lt;code>&amp;lt;li&amp;gt;&lt;/code> element and its children constitute a master template.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>The # prefix before &amp;ldquo;hero&amp;rdquo; identifies the hero as a local template variable. We can reference this variable within the template to access a hero’s properties.&lt;/p>
&lt;/blockquote>
&lt;p>You&amp;rsquo;ll get used to it (if you have to), but I think it&amp;rsquo;s harder to &lt;em>reason&lt;/em> about than:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">render&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">props&lt;/span>.&lt;span style="color:#a6e22e">goals&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>((&lt;span style="color:#a6e22e">goal&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">li&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#a6e22e">goal&lt;/span>.&lt;span style="color:#a6e22e">title&lt;/span>}&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/li&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>OK fair enough, JSX is very specific, but the &lt;strong>logic&lt;/strong> (mapping an iterable) is JavaScript.&lt;/p>
&lt;h1 id="wrapping-up">Wrapping Up&lt;/h1>
&lt;p>That&amp;rsquo;s it, for now. Next steps are to experiment more, see if it will play nice with Redux and share the next set of opinions.&lt;/p>
&lt;p>I&amp;rsquo;d love to hear what you think, so drop your comments below!&lt;/p>
&lt;p>&lt;strong>Footnotes&lt;/strong>&lt;/p></description><category>CodeProject</category></item><item><title>Getting Started with React &amp; ES6</title><link>https://dwmkerr.com/getting-started-with-react/</link><pubDate>Mon, 07 Sep 2015 19:44:54 +0000</pubDate><guid>https://dwmkerr.com/getting-started-with-react/</guid><description>&lt;p>Feeling like having a go with Facebook&amp;rsquo;s hugely popular &lt;a href="http://facebook.github.io/react/">React&lt;/a> framework but not sure where to start?&lt;/p>
&lt;p>In this post I&amp;rsquo;m going to build a simple React application from scratch - using &lt;a href="http://es6-features.org/">ECMAScript 6&lt;/a>.&lt;/p>
&lt;p>We&amp;rsquo;ll put together the bare minimum skeleton of a site and keep the folder structure free of noise and clutter so that you can focus on the app code and not the tooling!&lt;/p>
&lt;p>The simple app we&amp;rsquo;ll build is at &lt;a href="https://github.com/dwmkerr/react-es6-starter">github.com/dwmkerr/react-es6-starter&lt;/a>, or see &lt;a href="https://react-es6-starter.herokuapp.com">it live&lt;/a>.&lt;/p>
&lt;h2 id="building-the-code">Building the Code&lt;/h2>
&lt;p>Our goal will be to have a single &lt;code>index.html&lt;/code> file which includes our Javascript files. We&amp;rsquo;re aiming for something like this:&lt;/p>
&lt;p>&lt;img src="images/Build-Process.png" alt="Build Process 1">&lt;/p>
&lt;p>But browsers don&amp;rsquo;t handle ES6 yet. So our loose files, which reference each other, are going to have to be transpiled into ES5 and bundled into a single file. We need a build process:&lt;/p>
&lt;p>&lt;img src="images/Build-Process-2.png" alt="Build Process 2">&lt;/p>
&lt;p>&lt;a href="webpack.github.io">Webpack&lt;/a> can handle all of this for us. Given an entrypoint file, webpack will traverse all of the &lt;code>require&lt;/code> and &lt;code>import&lt;/code> statements and build a single bundle file. It also allows us to configure &amp;rsquo;loaders&amp;rsquo;, which let us pass these files through other tools:&lt;/p>
&lt;p>&lt;img src="images/Build-Process-3.png" alt="Build Process 3">&lt;/p>
&lt;p>We&amp;rsquo;ll need the following libraries:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="webpack.github.io">Webpack&lt;/a> - the tool that handles the build process.&lt;/li>
&lt;li>&lt;a href="babeljs.io">Babel&lt;/a> - an excellent ES6/ES7/JSX to ES5 transpiler.&lt;/li>
&lt;li>&lt;a href="github.com/babel/babel-loader">Babel Loader&lt;/a> - the component which integrates Babel into our Webpack build.&lt;/li>
&lt;li>&lt;a href="github.com/ampedandwired/html-webpack-plugin">Html Webpack Plugin&lt;/a> - a simple Webpack plugin which will copy our index file to our build folder and add a link to our Webpack bundle.&lt;/li>
&lt;/ol>
&lt;p>Let&amp;rsquo;s install these modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save webpack babel babel-loader html-webpack-plugin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll also need a webpack config file. By default webpack expects a file named &lt;code>webpack.config.js&lt;/code> to be in the root of the project. But every tool under the sun wants to stick its config file in the root of our project, and most of the time they&amp;rsquo;re just in the way.&lt;/p>
&lt;p>So let&amp;rsquo;s put everything to do with our tooling in a &lt;code>tooling&lt;/code> folder instead. Create the file &lt;code>webpack.config.js&lt;/code> in a &lt;code>tooling&lt;/code> folder in the root of the project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;path&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">module&lt;/span>.&lt;span style="color:#a6e22e">exports&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Defines the entrypoint of our application.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">entry&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#a6e22e">__dirname&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;../src/app.js&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Bundle to a ./build/public/bundle.js file.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#a6e22e">__dirname&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;../build/public&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filename&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;bundle.js&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Use babel for anything that is *.js or *.jsx.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">module&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loaders&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/\.jsx?$/&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loader&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;babel-loader&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">include&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#a6e22e">__dirname&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;../src&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First we define our entry point - the first file which will actually be run if we run the final bundled script. This is the &lt;code>app.js&lt;/code> file we&amp;rsquo;ll create shortly. If &lt;code>app.js&lt;/code> includes other modules, Webpack will pick them up, if those modules include other modules, they will be picked up and so on.&lt;/p>
&lt;p>Next we specify that everything should be bundled into a &lt;code>./build/public/bundle.js&lt;/code> file (we&amp;rsquo;re going to use the convention that everything we can produce with our tools goes into &lt;code>./build&lt;/code>).&lt;/p>
&lt;p>Finally, we specify that every file in &lt;code>src&lt;/code> which matches the &lt;code>\.jsx?$&lt;/code> regex will go through the babel loader.&lt;/p>
&lt;h3 id="using-es6">Using ES6!&lt;/h3>
&lt;p>We&amp;rsquo;ve actually got enough now to use ES6. Create a file in &lt;code>src&lt;/code> called &lt;code>index.html&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then create a &lt;code>src/app.js&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">PI&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3.14&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">vals&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>].&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">innerText&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Pi is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3.14&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; and vals is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">vals&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run the command &lt;code>./node_modules/.bin/webpack --config ./tooling/webpack.config.js&lt;/code> and our code is built, transpiled an moved to the build folder.&lt;/p>
&lt;p>Now we could serve this folder using any basic webserver. We are already using webpack, so the webpack dev server will do the trick. It uses exactly the same config file as the webpack tool:&lt;/p>
&lt;pre tabindex="0">&lt;code>npm install --save-dev webpack-dev-server
./node_modules/.bin/webpack-dev-server --config ./tooling/webpack.config --inline
&lt;/code>&lt;/pre>&lt;p>The inline reloads the page when the source changes. We don&amp;rsquo;t need to tell the server where the files are, it knows that from the webpack config.&lt;/p>
&lt;p>Let&amp;rsquo;s stick these commands in our &lt;code>package.json&lt;/code> for convenience:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;start&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;webpack-dev-server --config ./tooling/webpack.config.js --inline --quiet&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;webpack&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;webpack --config tooling/webpack.config.js&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can manually build with &lt;code>npm run webpack&lt;/code> and start our dev server with &lt;code>npm start&lt;/code>.&lt;/p>
&lt;h3 id="adding-some-react">Adding some React&lt;/h3>
&lt;p>Let&amp;rsquo;s add a React component. Create a folder under &lt;code>app&lt;/code> called &lt;code>home&lt;/code> and add a &lt;code>home.js&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;react&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Home&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">div&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">h1&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">ES6&lt;/span> &lt;span style="color:#a6e22e">Starter&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/h1&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">Welcome&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#a6e22e">the&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">ES6&lt;/span> &lt;span style="color:#a6e22e">Starter&lt;/span> &lt;span style="color:#a6e22e">home&lt;/span> &lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#f92672">!&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/p&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">/div&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is our first react component, which does nothing more than render some basic markup. We&amp;rsquo;ll use this as the starting point for our application.&lt;/p>
&lt;p>We can now take our &lt;code>app.js&lt;/code> file and render our Home component into the div. Here&amp;rsquo;s &lt;code>app.js&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;react/addons&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Home&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./home/home&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Home&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>, document.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s all there is to it! We&amp;rsquo;ve got a clean and simple starting point to begin playing with React. Before we look into things like state management and routing, let&amp;rsquo;s look into testing what we have so far.&lt;/p>
&lt;h3 id="testing">Testing&lt;/h3>
&lt;p>Even the most simple app would be incomplete without looking into how we will deal with the testing.&lt;/p>
&lt;p>Many will recommend the &lt;a href="https://facebook.github.io/jest/">Jest&lt;/a> framework to test React applications. However, it&amp;rsquo;s a bit more to learn and has some problems with NodeJS v0.12, so until we get Node v4 I&amp;rsquo;m going to keep things simple.&lt;/p>
&lt;p>First, we&amp;rsquo;ll install &lt;a href="http://karma-runner.github.io/">Karma&lt;/a> as a test runner. We&amp;rsquo;ll use &lt;a href="http://jasmine.github.io/">Jasmine&lt;/a> as as framework to write test cases and &lt;a href="http://phantomjs.org/">PhantomJS&lt;/a> as a headless browser in which our tests will run. This means we&amp;rsquo;ll need to add some more dev dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save-dev karma jasmine karma-webpack karma-jasmine karma-phantomjs-launcher
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can now create a &lt;code>karma.config.js&lt;/code> file in our &lt;code>tooling&lt;/code> folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;path&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">module&lt;/span>.&lt;span style="color:#a6e22e">exports&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">set&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">browsers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;PhantomJS&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">files&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We need to polyfill as PhantomJS doesn&amp;#39;t support &amp;#39;bind&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../node_modules/babel-core/browser-polyfill.js&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;../**/*.spec.js&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">frameworks&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;jasmine&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">preprocessors&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;../**/*.spec.js&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;webpack&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reporters&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;progress&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">singleRun&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">webpack&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">module&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loaders&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/\.jsx?$/&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loader&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;babel-loader&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">include&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#a6e22e">__dirname&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;../src&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">webpackServer&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">noInfo&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So here we are:&lt;/p>
&lt;ol>
&lt;li>Loading a polyfill from babel core (sorry guys, one more &lt;code>npm install --save-dev babel-core&lt;/code>) which gives PhantomJS the &lt;code>bind&lt;/code> function (along with some others). This is needed as some of the testing code in the browser needs these features.&lt;/li>
&lt;li>Specifying that anything that ends in &lt;code>.spec.js&lt;/code> should be loaded.&lt;/li>
&lt;li>Running anything that ends in &lt;code>.spec.js&lt;/code> through webpack.&lt;/li>
&lt;li>Telling webpack to use babel.&lt;/li>
&lt;/ol>
&lt;p>Quite a bit of config, but we&amp;rsquo;re re-using the same webpack tooling as before. We run the code through webpack, which sends it through babel and builds ES5 we can test in the browser.&lt;/p>
&lt;p>With this in place, we can write a spec. Add &lt;code>home.spec.js&lt;/code> to the &lt;code>home&lt;/code> folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;react&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">$&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;jquery&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">Home&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./home.js&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">describe&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Home&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">it&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;should render to the DOM&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Create the &amp;lt;Home /&amp;gt; react component.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">component&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Home&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>, document.&lt;span style="color:#a6e22e">body&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Find the DOM element for the created component.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">findDOMNode&lt;/span>(&lt;span style="color:#a6e22e">component&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Check the DOM looks how we&amp;#39;d expect it to.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>).&lt;span style="color:#a6e22e">children&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;h1&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">text&lt;/span>()).&lt;span style="color:#a6e22e">toEqual&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;React Redux Starter&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What&amp;rsquo;s going on here? We just ask React to render our Home component directly into the DOM. We get a component back from this call. We can then ask React to give us the DOM associatefd with the component and use familiar tools (jQuery!) to test the shape of the generated DOM.&lt;/p>
&lt;p>All that&amp;rsquo;s missing is the last of the dev dependencies we&amp;rsquo;ve missed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save-dev jquery phantomjs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can run tests directly on a Mac or Unix with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./node_modules/.bin/karma start ./tooling/karma.config.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For Windows use:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>node_modules&lt;span style="color:#ae81ff">\.&lt;/span>bin&lt;span style="color:#ae81ff">\k&lt;/span>arma start tooling&lt;span style="color:#ae81ff">\k&lt;/span>arma.config.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In fact, we&amp;rsquo;ll update our &lt;code>package.json&lt;/code> scripts so that this is the &lt;code>test&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./node_modules/.bin/karma start ./tooling/karma.config.js&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Done! This means we can run tests on any platform with NodeJS&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> using the same command - &lt;code>npm test&lt;/code>.&lt;/p>
&lt;p>We now have a very simple setup which allows us to run tests. You can build on this - perhaps adding Jest later or a more sophisticated or React specific set of tools.&lt;/p>
&lt;h3 id="adding-code-coverage">Adding Code Coverage&lt;/h3>
&lt;p>You might want to add some code coverage information to your project. This can be a little tricky when using ES6, as we need to make sure we report coverage of the original ES6 code, rather than the actual transpiled code which is instrumented.&lt;/p>
&lt;p>Fortunately, with the clean and simple setup we have built, adding code coverage is a snap.&lt;/p>
&lt;p>Our test runner, Karma, is built to quickly integrate with the code coverage tool &lt;a href="https://github.com/gotwarlost/istanbul">Istanbul&lt;/a>, we just need to use the &lt;a href="https://github.com/karma-runner/karma-coverage">Karma Coverage&lt;/a> plugin. Let&amp;rsquo;s install the two modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save-dev istanbul karma-coverage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now with a small addition to our &lt;code>karma.config.js&lt;/code> file we will get a nice HTML coverage report. We need to update our &lt;code>reporters&lt;/code> config to include &lt;code>coverage&lt;/code> and specify coverage options in the &lt;code>coverageReporter&lt;/code> config.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reporters&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;progress&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;coverage&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">coverageReporter&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dir&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../build/coverage/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;html&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run &lt;code>npm test&lt;/code> now, you&amp;rsquo;ll get an HTML coverage report generated. The only problem is that it is for the transpiled code, which makes it almost useless. A customer instrumenter called isparta will help us here. We use isparta to get a report of the coverage of the original ES6 code. Two more modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save-dev isparta isparta-instrumenter-loader
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then in our karma config we pass the orignal code through the insrtrumenter, before babel transpiles it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">webpack&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">module&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">preLoaders&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/\.jsx?$/&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exclude&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">/node_modules/&lt;/span>, &lt;span style="color:#e6db74">/\.spec\.js/&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loader&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;isparta-instrumenter-loader&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// everything else stays the same...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Anything that is not a spec or from &lt;code>node_modules&lt;/code> gets instrumented. Now we have a ES6 code coverage report:&lt;/p>
&lt;p>&lt;img src="images/CapturFiles_8.png" alt="Code Coverage Report">&lt;/p>
&lt;p>With this in place, you can go even further and integrate with other CI or publish to code quality systems (for example this repo integrates to &lt;a href="https://coveralls.io">coveralls.io&lt;/a>). This is often used to show badges for repos:&lt;/p>
&lt;p>&lt;a href="https://coveralls.io/github/dwmkerr/react-es6-starter?branch=master">&lt;img src="images/badge.svg" alt="Coverage Status">&lt;/a>&lt;/p>
&lt;p>Another use case is to gate checkins unless they maintain a certain code coverage threshhold.&lt;/p>
&lt;h3 id="wrapping-up">Wrapping Up&lt;/h3>
&lt;p>This provides a very lean starting point for learning React. There&amp;rsquo;s no moving parts at the moment - no state management. We&amp;rsquo;ll get into that in later articles but right now you have a playground.&lt;/p>
&lt;p>You can set up CI in a flash, just sign up for a &lt;a href="https://travis-ci.org/">Travis&lt;/a> account and use a &lt;code>travis.yml&lt;/code> like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">node_js&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">node_js&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;0.12&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This repo is all ready to push to &lt;a href="todo">Heroku&lt;/a>, no Procfile is needed. Check out &lt;a href="todo">react-es6-starter.herokuapp.com&lt;/a> to see the code in action.&lt;/p>
&lt;p>I hope you&amp;rsquo;ve found this article useful! Next time we&amp;rsquo;ll be getting into the details of managing state in React.&lt;/p>
&lt;p>Please fork the repo and have a play, let me know of any suggestions or improvements!&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/react-es6-starter">github.com/dwmkerr/react-es6-starter&lt;/a>&lt;/p>
&lt;h3 id="glossary-of-conventions">Glossary of Conventions&lt;/h3>
&lt;p>There are a few conventions that I personally use in most Javascript projects. The conventions used in this article which I think are valuable to consider using in many projects are:&lt;/p>
&lt;h4 id="always-support-installteststart">Always support install/test/start&lt;/h4>
&lt;p>Everyone should always be able to checkout, install, test and run the code with the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install &lt;span style="color:#75715e"># installs everything needed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm test &lt;span style="color:#75715e"># lets the user know the code works right on their system!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm start &lt;span style="color:#75715e"># starts the code, lets the user know what to do next&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install should setup everything, and if code needs to be built to be testable, this should be a post-install hook.&lt;/p>
&lt;p>Test should be run next, as a user should be able to verify that the code works as expected on their system.&lt;/p>
&lt;p>Finally, when the user runs start, a dev server (as convention dictates we are in a dev mode by default (and production mode is set with a flag or environment variable) the server should start and a console message should show the user where to browse to.&lt;/p>
&lt;hr>
&lt;h5 id="footnotes">Footnotes&lt;/h5>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://www-03.ibm.com/press/us/en/pressrelease/47474.wss">IBM Mainframes&lt;/a> anyone?&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item></channel></rss>