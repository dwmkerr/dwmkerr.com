<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on dwmkerr.com</title><link>https://dwmkerr.com/categories/node.js/</link><description>Recent content in Node.js on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Wed, 16 May 2018 20:09:53 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/categories/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>mongo-monitor - a simple CLI to monitor your MongoDB cluster</title><link>https://dwmkerr.com/mongo-monitor-cli/</link><pubDate>Wed, 16 May 2018 20:09:53 +0000</pubDate><guid>https://dwmkerr.com/mongo-monitor-cli/</guid><description>The mongo-monitor CLI is a lean and simple tool to check the status of a MongoDB server or cluster. The code is on GitHub:
github.com/dwmkerr/mongo-monitor
Here's how it looks in action:
In this animation I am monitoring a simple sharded cluster, and running some example maintenance operations, adding a node to a replicaset, stepping down a primary and shutting down a replicaset node.
A simple CLI which shows the status in real-time can be very useful to keep open when performing admin, letting you see how your changes affect the cluster as you work on it.</description></item><item><title>A utility to help you wait for ports to open</title><link>https://dwmkerr.com/a-utility-to-help-you-wait-for-ports-to-open/</link><pubDate>Thu, 25 May 2017 22:15:00 +0000</pubDate><guid>https://dwmkerr.com/a-utility-to-help-you-wait-for-ports-to-open/</guid><description>There are occasions where you might need to have scripts or commands which wait for TCP/IP ports to open before you continue.
I've come across this need again and again when working with microservices, to make my life easier I've created a little utility called wait-port which will wait for a port to open:
It's built in Node, the project is open source, open for contributions and ready to use:</description></item><item><title>Using Slack for Server Development</title><link>https://dwmkerr.com/using-slack-for-server-development/</link><pubDate>Fri, 18 Nov 2016 01:25:00 +0000</pubDate><guid>https://dwmkerr.com/using-slack-for-server-development/</guid><description>I recently found a surprisingly helpful approach for server-side development which uses Slack in a creative way.
The Problem The scenario can be roughly simplified to this:
We are building a mobile app and application server. This will take data from a user, transform it and then pass it to the enterprise system processing.
The problem is that the enterprise system doesn't exist yet!
Now this is not too much of a challenge, the first thing we did was build a simple mock of the enterprise system in Node.</description></item><item><title>Effective Node.js Debugging</title><link>https://dwmkerr.com/effective-node-js-debugging/</link><pubDate>Sat, 03 Sep 2016 01:36:09 +0000</pubDate><guid>https://dwmkerr.com/effective-node-js-debugging/</guid><description>If you are interested in improving your Node.js debugging skills, then check out my talk at the recent JSChannel 2016 conference in Bangalore:
Comments and observations are always welcome!</description></item><item><title>Testing the Docker for Mac Beta</title><link>https://dwmkerr.com/testing-the-docker-for-mac-beta/</link><pubDate>Fri, 03 Jun 2016 10:45:24 +0000</pubDate><guid>https://dwmkerr.com/testing-the-docker-for-mac-beta/</guid><description>I've finally had a chance to install the new Docker for Mac Beta and give it a whirl. In this article I'm going to talk a bit about how Docker works, the challenges of running Docker on a Mac or Windows and how the new Beta helps.
Below: The welcome message for the new Docker for Mac app
So What is Docker for Mac? If you don't know what Docker is, check out my article Learn Docker by Building a Microservice or the lovely What is Docker page from the docs.</description></item><item><title>Learn Docker by building a Microservice</title><link>https://dwmkerr.com/learn-docker-by-building-a-microservice/</link><pubDate>Tue, 19 Apr 2016 08:54:39 +0000</pubDate><guid>https://dwmkerr.com/learn-docker-by-building-a-microservice/</guid><description>If you are looking to get your hands dirty and learn all about Docker, then look no further!
In this article I'm going to show you how Docker works, what all the fuss is about, and how Docker can help with a basic development task - building a microservice.
We'll use a simple Node.js service with a MySQL backend as an example, going from code running locally to containers running a microservice and database.</description></item><item><title>Manipulating JSON Web Tokens (JWTs)</title><link>https://dwmkerr.com/modifying-a-jwt-in-a-node-application/</link><pubDate>Tue, 24 Mar 2015 14:45:02 +0000</pubDate><guid>https://dwmkerr.com/modifying-a-jwt-in-a-node-application/</guid><description>I've been writing a couple of web services lately that use Auth0 for identity management. It's a great platform that makes working with different identity providers a breeze.
One thing that I couldn't work out how to do at first was to quickly build a new JWT1from an existing token. I wanted to take my current token, add some more data to it and return it to the user. So here's a &amp;lsquo;why&amp;rsquo; and &amp;lsquo;how&amp;rsquo;.</description></item><item><title>Blogging with Ghost</title><link>https://dwmkerr.com/blogging-with-ghost/</link><pubDate>Mon, 05 May 2014 04:35:09 +0000</pubDate><guid>https://dwmkerr.com/blogging-with-ghost/</guid><description>tl;dr Ghost is a blogging platform well worth considering if your blog is all about development.
I've been having some gripes with WordPress as a platform for blogging lately. For development focused blogs like this one, there are some things about it that make writing posts just a little bit clunky. For example:
Syntax Higlightling is always going to use plugins with various shortcode formats. This works, but your raw blog text becomes quite specific to a certain implementation.</description></item><item><title>Node.js and Express - Strange Http Status Codes</title><link>https://dwmkerr.com/node-js-and-express-strange-http-status-codes/</link><pubDate>Tue, 16 Jul 2013 16:23:43 +0000</pubDate><guid>https://dwmkerr.com/node-js-and-express-strange-http-status-codes/</guid><description>Testing the C# code showed me something that was a bit odd - GETs and POSTSs were working fine, but PUTs and DELETEs were showing an HTTP Status code of &amp;lsquo;1&amp;rsquo; (which isn't a valid code). Here's the what I was seeing:
Checking the node server showed the same thing - DELETEs were returning status 1.
The server code is very lightweight so it's quick to see what's going on:</description></item></channel></rss>