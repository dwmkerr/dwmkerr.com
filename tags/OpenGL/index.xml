<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenGL on dwmkerr.com</title><link>https://dwmkerr.github.io/dwmkerr.com/tags/OpenGL/</link><description>Recent content in OpenGL on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Dave Kerr</copyright><lastBuildDate>Sat, 24 Sep 2011 06:57:00 +0000</lastBuildDate><atom:link href="https://dwmkerr.github.io/dwmkerr.com/tags/OpenGL/index.xml" rel="self" type="application/rss+xml"/><item><title>Importing OpenGL Extensions Functions with wglGetProcAddress</title><link>https://dwmkerr.github.io/dwmkerr.com/importing-opengl-extensions-functions-with-wglgetprocaddress/</link><pubDate>Sat, 24 Sep 2011 06:57:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/importing-opengl-extensions-functions-with-wglgetprocaddress/</guid><description>There are only a small set of the core OpenGL functions that can be imported via p/invoke - the majority of OpenGL functions are actually extension functions which are supported only on specific video cards. OpenGL offers a function called&amp;nbsp;wglGetProcAddress which can return the address of a named function - but how do we deal with this in the managed world?
Here's a brief description of how it's handled in SharpGL.</description></item><item><title>SharpGL 2.0: Hardware Acceleration</title><link>https://dwmkerr.github.io/dwmkerr.com/sharpgl-2-0-hardware-acceleration/</link><pubDate>Tue, 13 Sep 2011 07:33:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/sharpgl-2-0-hardware-acceleration/</guid><description>It took a bit of working out, but finally SharpGL can support hardware acceleration. Previously, all rendering in SharpGL was done to a DIB Section, the result of this would be blitted to the screen. Much playing around has shown that in fact this is problematic - rendering to DIB sections can never be hardware accelerated.
To hardware accelerate rendering, the rendering must be to a window or a pixel buffer.</description></item></channel></rss>