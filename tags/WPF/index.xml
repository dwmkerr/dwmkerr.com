<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WPF on dwmkerr.com</title><link>https://dwmkerr.github.io/dwmkerr.com/tags/WPF/</link><description>Recent content in WPF on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Dave Kerr</copyright><lastBuildDate>Wed, 12 Jun 2013 01:36:18 +0000</lastBuildDate><atom:link href="https://dwmkerr.github.io/dwmkerr.com/tags/WPF/index.xml" rel="self" type="application/rss+xml"/><item><title>WPF and Visual Studio Addins</title><link>https://dwmkerr.github.io/dwmkerr.com/wpf-and-visual-studio-addins/</link><pubDate>Wed, 12 Jun 2013 01:36:18 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/wpf-and-visual-studio-addins/</guid><description>If at all possible nowadays, I write all my Windows UI code in WPF, it's just quicker and easier than WinForms. Recently however, I came across a situation that you should just avoid.
If you're developing addins for multiple versions of Visual Studio - don't use WPF for the Tools &amp;gt; Options windows. It's just noit going to place nice out of the box. This is because there's a lot of property page Win32 stuff going on in the host window that makes it hard to route messages properly - keyboard entry won't work correctly, tab order will be messed up and more, it's just not worth the pain.</description></item><item><title>Introducing FireKeys</title><link>https://dwmkerr.github.io/dwmkerr.com/introducing-firekeys/</link><pubDate>Mon, 11 Mar 2013 11:11:29 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/introducing-firekeys/</guid><description>I don't know when I learnt that Windows + E opened up Windows Explorer. It must have been a while ago. But it's imprinted in my muscle memory, the number of times I hit that combo every day is probably quite high. But how many other hotkeys do I use? Asides from a few other functional ones, like Win + D, I don't use hotkeys so much. And I got to thinking, I'd love to open Google Chrome with a hotkey just like I do with explorer.</description></item><item><title>Funky WPF - Enumerations and the Combo Box</title><link>https://dwmkerr.github.io/dwmkerr.com/funky-wpf-enumerations-and-the-combo-box/</link><pubDate>Wed, 18 Jan 2012 03:11:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/funky-wpf-enumerations-and-the-combo-box/</guid><description>Binding a combo box to an enumeration in WPF is more work than it should be, creating an object data provider etc etc:
&amp;lt;Window.Resources&amp;gt; &amp;lt;ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="CharacterEnumValues"&amp;gt; &amp;lt;ObjectDataProvider.MethodParameters&amp;gt; &amp;lt;x:Type TypeName="Character" /&amp;gt; &amp;lt;/ObjectDataProvider.MethodParameters&amp;gt; &amp;lt;/ObjectDataProvider&amp;gt; &amp;lt;/Window.Resources&amp;gt; Followed by
&amp;lt;ComboBox SelectedItem="{Binding Character}"
ItemsSource="{Binding Source={StaticResource CharacterValues}} "/&amp;gt; What a pain! I have just added 'EnumerationComboBox' to my Apex library - so now you can do this:
&amp;lt;!-- The combo box, bound to an enumeration.</description></item><item><title>MVVM Commanding</title><link>https://dwmkerr.github.io/dwmkerr.com/mvvm-commanding/</link><pubDate>Sat, 29 Oct 2011 08:31:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/mvvm-commanding/</guid><description>I have written an article that describes commanding in WPF, Silverlight and WP7 in detail. It is on the CodeProject at:
http://www.codeproject.com/KB/WPF/consistentmvvmcommands.aspx
It uses the latest version of Apex (version 1.2) which will be released formally shortly. Enjoy!</description></item><item><title>MVVM: Asynchronous Commands</title><link>https://dwmkerr.github.io/dwmkerr.com/mvvm-asynchronous-commands/</link><pubDate>Mon, 24 Oct 2011 03:51:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/mvvm-asynchronous-commands/</guid><description>The latest cut of the Apex Code (http://apex.codeplex.com/SourceControl/changeset/changes/6701) contains a very cool new feature - Asynchronous Command Objects.
An Asynchronous Command is a ViewModelCommand - the standard object used in Apex for commanding. However, what is different about this function is that it runs Asynchronously.
One of the problems with running a view model command asynchronously is that generally the view model properties cannot be accessed - as they're created on a different dispatcher.</description></item><item><title>Drawing a DIB Section in WPF</title><link>https://dwmkerr.github.io/dwmkerr.com/drawing-a-dib-section-in-wpf/</link><pubDate>Fri, 30 Sep 2011 05:09:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/drawing-a-dib-section-in-wpf/</guid><description>One of the most exciting new features in the forthcoming SharpGL 2.0 (which was actually planned for 2.1 but has been moved to 2.0) is the facility to do OpenGL drawing in a WPF control. This isn't done via a WinFormsHost (which has unpleasant side-effects due to Airspace, see&amp;nbsp;http://msdn.microsoft.com/en-us/library/aa970688(v=VS.100).aspx) but actually via an Image in a WPF UserControl.
What does this mean? Well it means that when you use the SharpGL.</description></item><item><title>Solitaire and Spider Solitaire on the CodeProject</title><link>https://dwmkerr.github.io/dwmkerr.com/solitaire-and-spider-solitaire-on-the-codeproject/</link><pubDate>Mon, 12 Sep 2011 06:01:00 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/solitaire-and-spider-solitaire-on-the-codeproject/</guid><description>I have uploaded a new article on the CodeProject, a step by step tutorial showing how to create Solitaire and Spider Solitaire for WPF with the help of Apex.
The article is available at: http://www.codeproject.com/KB/WPF/solitaire.aspx</description></item></channel></rss>