<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on dwmkerr.com</title><link>https://dwmkerr.com/tags/java/</link><description>Recent content in Java on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Supercharge your Java Projects with Conventional Commits, Semantic Versioning and Semantic Releases</title><link>https://dwmkerr.com/conventional-commits-and-semantic-versioning-for-java/</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><guid>https://dwmkerr.com/conventional-commits-and-semantic-versioning-for-java/</guid><description>In this article we'll look at a few simple techniques which can really supercharge your Java project and make them much easier to work with!
Semantic Versioning Why Does This Matter? The Semantic Versioning Specification Using Semantic Versions The Challenge of Semantic Versions Conventional Commits Time for Magic Enforcing Conventional Commits with Git Hooks How the Hook Works Creating the Initial Release Go Forth And DevOps That's It tl;dr If you know the concepts, then just jump straight to my fork of semantic-release at github.</description></item></channel></rss>