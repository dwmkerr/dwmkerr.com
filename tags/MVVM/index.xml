<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MVVM on dwmkerr.com</title><link>http://example.org/tags/MVVM/</link><description>Recent content in MVVM on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Dave Kerr</copyright><lastBuildDate>Mon, 25 Feb 2013 16:16:20 +0000</lastBuildDate><atom:link href="http://example.org/tags/MVVM/index.xml" rel="self" type="application/rss+xml"/><item><title>Spider Solitaire and Augmented Reality</title><link>http://example.org/spider-solitaire-and-augmented-reality/</link><pubDate>Mon, 25 Feb 2013 16:16:20 +0000</pubDate><guid>http://example.org/spider-solitaire-and-augmented-reality/</guid><description>A while ago, I made an implementation of Solitaire and Spider Solitaire using WPF and my Apex MVVM library. I wrote about it on the CodeProject, in an article called Solitaire and Spider Solitaire for WPF (imaginative title indeed).
Anyway, just recently I got a very interesting message from rupam rupam, who has made an augmented reality version of the project! In his application, you use your webcam to play the game physically by picking up cards with gestures.</description></item><item><title>Apex Part 2 - Adding Commands to an MVVM Application</title><link>http://example.org/apex-part-2-adding-commands-to-an-mvvm-application/</link><pubDate>Tue, 15 May 2012 07:43:00 +0000</pubDate><guid>http://example.org/apex-part-2-adding-commands-to-an-mvvm-application/</guid><description>In Part 2 of my video tutorial series on using Apex I show you how you can add commands to an MVVM application. Commands let you rapidly add functionality to a ViewModel, whilst still maintaining separation from UI.
A CodeProject article to accompany this video will be published shortly.</description></item><item><title>Apex Part 1 - Getting Started with the Apex SDK</title><link>http://example.org/apex-part-1-getting-started-with-the-apex-sdk/</link><pubDate>Mon, 23 Apr 2012 05:35:00 +0000</pubDate><guid>http://example.org/apex-part-1-getting-started-with-the-apex-sdk/</guid><description>Create an MVVM application in minutes with the new Apex SDK!
The video below shows this in action, see what you think.
There is also an accompanying article that describes what's going on. As always, would love to hear feedback!
http://www.codeproject.com/Articles/371217/Apex-Part-1-Create-Your-First-MVVM-Application</description></item><item><title>Funky WPF - Enumerations and the Combo Box</title><link>http://example.org/funky-wpf-enumerations-and-the-combo-box/</link><pubDate>Wed, 18 Jan 2012 03:11:00 +0000</pubDate><guid>http://example.org/funky-wpf-enumerations-and-the-combo-box/</guid><description>Binding a combo box to an enumeration in WPF is more work than it should be, creating an object data provider etc etc:
&amp;lt;Window.Resources&amp;gt;
&amp;lt;ObjectDataProvider MethodName="GetValues"
ObjectType="{x:Type sys:Enum}"
x:Key="CharacterEnumValues"&amp;gt;
&amp;lt;ObjectDataProvider.MethodParameters&amp;gt;
&amp;lt;x:Type TypeName="Character" /&amp;gt;
&amp;lt;/ObjectDataProvider.MethodParameters&amp;gt;
&amp;lt;/ObjectDataProvider&amp;gt;
&amp;lt;/Window.Resources&amp;gt;
Followed by
&amp;lt;ComboBox SelectedItem="{Binding Character}"
ItemsSource="{Binding Source={StaticResource CharacterValues}} "/&amp;gt;
What a pain! I have just added 'EnumerationComboBox' to my Apex library - so now you can do this:
&amp;lt;!-- The combo box, bound to an enumeration.</description></item><item><title>MVVM Commanding</title><link>http://example.org/mvvm-commanding/</link><pubDate>Sat, 29 Oct 2011 08:31:00 +0000</pubDate><guid>http://example.org/mvvm-commanding/</guid><description>I have written an article that describes commanding in WPF, Silverlight and WP7 in detail. It is on the CodeProject at:
http://www.codeproject.com/KB/WPF/consistentmvvmcommands.aspx
It uses the latest version of Apex (version 1.2) which will be released formally shortly. Enjoy!</description></item><item><title>MVVM: Asynchronous Commands</title><link>http://example.org/mvvm-asynchronous-commands/</link><pubDate>Mon, 24 Oct 2011 03:51:00 +0000</pubDate><guid>http://example.org/mvvm-asynchronous-commands/</guid><description>The latest cut of the Apex Code (http://apex.codeplex.com/SourceControl/changeset/changes/6701) contains a very cool new feature - Asynchronous Command Objects.
An Asynchronous Command is a ViewModelCommand - the standard object used in Apex for commanding. However, what is different about this function is that it runs Asynchronously.
One of the problems with running a view model command asynchronously is that generally the view model properties cannot be accessed - as they're created on a different dispatcher.</description></item></channel></rss>