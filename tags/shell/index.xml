<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shell on dwmkerr.com</title><link>https://dwmkerr.com/tags/shell/</link><description>Recent content in Shell on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Copright &amp;copy; Dave Kerr</copyright><lastBuildDate>Tue, 21 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://dwmkerr.com/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective Shell for Beginners</title><link>https://dwmkerr.com/effective-shell-for-beginners/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-for-beginners/</guid><description>&lt;p>I have rebuilt my &amp;ldquo;Effective Shell&amp;rdquo; series as an online book - it's available now on:&lt;/p>
&lt;p>&lt;a href="https://effective-shell.com">https://effective-shell.com&lt;/a>&lt;/p>
&lt;p>The whole site is built from a GitHub repo at &lt;a href="https://github.com/dwmkerr/effective-shell">github.com/dwmkerr/effective-shell&lt;/a>. It is open for contributions, changes, issues and suggestions. I've also added a comment section to each page to get input.&lt;/p>
&lt;p>To keep the material as accessible as possible, I have added a new section for beginners, to help anyone who has not used a shell before. It goes over who the book is useful for, what the shell is, and how to set up your computer to work through the material:&lt;/p>
&lt;p>&lt;a href="https://effective-shell.com">&lt;img src="images/effective-shell-screenshot.png" alt="Effective Shell: Screenshot" width="1024px" />&lt;/a>&lt;/p>
&lt;p>All comments and suggestions are welcome!&lt;/p></description><category>CodeProject</category></item><item><title>Effective Shell Part 7: The Subtleties of Shell Commands</title><link>https://dwmkerr.com/effective-shell-7-shell-commands/</link><pubDate>Tue, 25 Jun 2019 07:25:23 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-7-shell-commands/</guid><description>&lt;p>In this chapter, we'll take a look at the various different types of shell commands that exist and how this can affect your work.&lt;/p>
&lt;p>By the end of this chapter, you might even be able to make sense of the horrifying and perfectly syntactically valid code below:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">which &lt;span style="color:#66d9ef">$(&lt;/span>where &lt;span style="color:#66d9ef">$(&lt;/span>what &lt;span style="color:#66d9ef">$(&lt;/span>whence &lt;span style="color:#66d9ef">$(&lt;/span>whereis who&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="what-are-commands">What Are Commands?&lt;/h2>
&lt;p>This is &lt;em>really&lt;/em> important to understand! A &lt;em>command&lt;/em> in a shell is something you execute. It might take parameters. Generally it'll have a form like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">command param1 param2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We've already seen many commands during this series:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ls &lt;span style="color:#75715e"># Show the contents of the current directory&lt;/span>
cd ~ &lt;span style="color:#75715e"># Move to the user&amp;#39;s home&lt;/span>
cat file.txt &lt;span style="color:#75715e"># Output the contents of &amp;#39;file.txt&amp;#39; to stdout&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But to be an effective shell user, you must understand that not all commands are created equal. The differences between the types of commands will affect how you use them.&lt;/p>
&lt;p>There are four types of commands in most shells:&lt;/p>
&lt;ol>
&lt;li>Executables&lt;/li>
&lt;li>&amp;ldquo;Built-Ins&amp;rdquo; (which we'll just call &lt;em>builtins&lt;/em> from now on)&lt;/li>
&lt;li>Functions&lt;/li>
&lt;li>Aliases&lt;/li>
&lt;/ol>
&lt;p>Let's quickly dig in and see a bit more.&lt;/p>
&lt;h2 id="executables---programs">Executables - Programs&lt;/h2>
&lt;p>Executables are just files with the &amp;lsquo;executable&amp;rsquo; bit set&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. If I execute the &lt;code>cat&lt;/code> command, the shell will search for an executable named &lt;code>cat&lt;/code> in my &lt;code>$PATH&lt;/code>. If it finds it, it will run the program.&lt;/p>
&lt;pre>&lt;code>$ cat file.txt
This is a simple text file
&lt;/code>&lt;/pre>&lt;p>What is &lt;code>$PATH&lt;/code>? &lt;code>$PATH&lt;/code> is the standard environment variable used to define &lt;em>where&lt;/em> the shell should search for programs. If we temporarily &lt;em>empty&lt;/em> this variable, the shell won't find the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ PATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> cat file.txt
bash: cat: No such file or directory
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Normally your &lt;code>$PATH&lt;/code> variable will include the standard locations for Linux programs - folders such as &lt;code>/bin&lt;/code>, &lt;code>/sbin&lt;/code>, &lt;code>/usr/bin&lt;/code> and so on&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>If you were to print the variable, you'd see a bunch of paths (they are separated by colons; I've put them on separate lines for readability):&lt;/p>
&lt;pre>&lt;code>/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
&lt;/code>&lt;/pre>&lt;p>The shell will start with the &lt;em>earlier&lt;/em> locations and move to the later ones. This allows &lt;em>local&lt;/em> flavours of tools to be installed for users, which will take precedence over &lt;em>general&lt;/em> versions of tools.&lt;/p>
&lt;p>There will likely be other locations too - you might see Java folders, package manager folders and so on.&lt;/p>
&lt;h2 id="executables---scripts">Executables - Scripts&lt;/h2>
&lt;p>Imagine we create a text file called &lt;code>dog&lt;/code> in the local folder:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;span style="color:#75715e">&lt;/span>echo &lt;span style="color:#e6db74">&amp;#34;🐶 woof 🐶&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we make the file &lt;em>executable&lt;/em>, by running &lt;code>chmod +x dog&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, then we can run this just like any other program - as long as we tell the shell to look for programs in the current directory:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ PATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> dog
🐶 woof 🐶
&lt;/code>&lt;/pre>&lt;/div>&lt;p>More common would be to run the program by giving a path:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ./dog
🐶 woof 🐶
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or just move it to a standard location that the shell already checks for programs:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ mv dog /usr/local/bin
$ dog
🐶 woof 🐶
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The point is that executables don't &lt;em>have&lt;/em> to be compiled program code. If a file starts with &lt;code>#!&lt;/code> (the &amp;lsquo;shebang&amp;rsquo;), then the system will try to run the contents of the file with the program specified in the shebang.&lt;/p>
&lt;p>We will look at shebangs in greater detail in a later chapter.&lt;/p>
&lt;h2 id="builtins">Builtins&lt;/h2>
&lt;p>OK, so we've seen executables. What about a command like this?&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">local V&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span> echo $V
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will not find the &lt;code>local&lt;/code> executable anywhere on your system. It is a &lt;em>builtin&lt;/em> - a special command built directly into the shell program.&lt;/p>
&lt;p>Builtins are often highly specific to your shell. They might be used for programming (&lt;code>local&lt;/code> for example is used to declare a locally scoped variable), or they might be for very shell-specific features.&lt;/p>
&lt;p>This is where we need to take note. As soon as you are running a builtin, you are potentially using a feature that is specific to &lt;em>your&lt;/em> shell, rather than a program that is shared across the system and can be run by &lt;em>any&lt;/em> shell.&lt;/p>
&lt;p>Trying to programmatically execute &lt;code>local&lt;/code> as a process will fail - there is no executable with that name; it is purely a shell construct.&lt;/p>
&lt;p>So how do we know if a command is a builtin? The preferred method is to use the &lt;code>type&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ type local
local is a shell builtin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>type&lt;/code> command (which is &lt;em>itself&lt;/em> a builtin!) can tell you the exact type of shell command.&lt;/p>
&lt;p>Interestingly, you might be using more builtins than you think. &lt;code>echo&lt;/code> is a program, but most of the time you are not executing it when you are in a shell:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ type -a echo
echo is a shell builtin
echo is /bin/echo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By using the &lt;code>-a&lt;/code> flag on &lt;code>type&lt;/code> to show &lt;em>all&lt;/em> commands that match the name, we see that &lt;code>echo&lt;/code> is actually both a builtin &lt;em>and&lt;/em> a program.&lt;/p>
&lt;p>Many simple programs have builtin versions. The shell can execute them much faster.&lt;/p>
&lt;p>Some commands are a builtin so that they can function in a sensible manner. The &lt;code>cd&lt;/code> command changes the current directory - if we executed it as a process, it would change only the directory for the &lt;code>cd&lt;/code> process itself, not the shell, making it much less useful.&lt;/p>
&lt;p>Builtins will vary from shell to shell, but many shells are &amp;lsquo;Bash-like&amp;rsquo; - meaning they will have a set very similar to the Bash builtins, which you can see here:&lt;/p>
&lt;p>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html">https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html&lt;/a>&lt;/p>
&lt;p>As should be familiar from &lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>, you can get help for builtins:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ man source &lt;span style="color:#75715e"># source is a builtin&lt;/span>
BUILTIN&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span> BSD General Commands Manual BUILTIN&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span>
NAME
builtin, !, %, &lt;span style="color:#75715e"># ...snip...&lt;/span>
SYNOPSIS
builtin &lt;span style="color:#f92672">[&lt;/span>-options&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>args ...&lt;span style="color:#f92672">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the manual will &lt;em>not&lt;/em> show information on specific builtins, which is a pain. Your shell &lt;em>might&lt;/em> have an option to show more details - for example, in Bash you can use &lt;code>help&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ help source
source: source filename &lt;span style="color:#f92672">[&lt;/span>arguments&lt;span style="color:#f92672">]&lt;/span>
Read and execute commands from FILENAME and &lt;span style="color:#66d9ef">return&lt;/span>. The pathnames
in $PATH are used to find the directory containing FILENAME. If any
ARGUMENTS are supplied, they become the positional parameters when
FILENAME is executed.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But remember: &lt;code>help&lt;/code> is a builtin; you might not find it in all shells (you won't find it in &lt;code>zsh&lt;/code>, for example). This highlights again the challenges of builtins.&lt;/p>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>You can define your own shell functions. We will see a lot more of this later, but let's show a quick example for now:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ restart-shell &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> exec -l &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$SHELL&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This snippet creates a function that restarts the shell (quite useful if you are messing with shell configuration files or think you might have irreversibly goofed up your current session).&lt;/p>
&lt;p>We can execute this function just like any command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ restart-shell
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And running &lt;code>type&lt;/code> will show us that this is a function:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ type restart-shell
restart-shell is a &lt;span style="color:#66d9ef">function&lt;/span>
restart-shell &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
exec -l $SHELL
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Functions are one of the most powerful shell constructs we will see; they are extremely useful for building sophisticated logic. We're going to see them in a lot more detail later, but for now it is enough to know that they exist, and can run logic, and are run as commands.&lt;/p>
&lt;h2 id="aliases">Aliases&lt;/h2>
&lt;p>An alias is just a shortcut. Type in a certain set of characters, and the shell will replace them with the value defined in the alias.&lt;/p>
&lt;p>Some common commands are actually already aliases - for example, in my &lt;code>zsh&lt;/code> shell, the &lt;code>ls&lt;/code> command is an alias:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% type -a ls
ls is an alias &lt;span style="color:#66d9ef">for&lt;/span> ls -G
ls is /bin/ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I make sure that when I use the &lt;code>ls&lt;/code> command, the shell always expands it to &lt;code>ls -G&lt;/code>, which colours the output.&lt;/p>
&lt;p>We can quickly define aliases to save on keystrokes. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ alias k&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;kubectl&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this point on, I can use the &lt;code>k&lt;/code> alias as shorthand for the &lt;code>kubectl&lt;/code> command.&lt;/p>
&lt;p>Aliases are far less sophisticated than functions. Think of them as keystroke savers and nothing more, and you won't go far wrong. Aliases are not portable across shells and have certain behaviours which can make them problematic to work with, there will be an entire chapter dedicated to alisases coming up in the series.&lt;/p>
&lt;h2 id="so-what">So What?&lt;/h2>
&lt;p>So we now hopefully have a greater understanding of the variety of shell commands. Not all commands are executables, not all of the commands we &lt;em>think&lt;/em> are executables necessarily are, and some commands might be more sophisticated.&lt;/p>
&lt;p>As a shell user, the key things to remember are:&lt;/p>
&lt;ol>
&lt;li>Executables are &amp;lsquo;safe&amp;rsquo; - they are programs your system can use; your shell just calls out to them.&lt;/li>
&lt;li>Builtins are &lt;em>very&lt;/em> shell-specific and usually control the shell itself&lt;/li>
&lt;li>Functions are powerful ways to write logic but will normally be shell-specific.&lt;/li>
&lt;li>Aliases are conveniences for human operators, but only in the context of an interactive shell.&lt;/li>
&lt;/ol>
&lt;p>To find out how a command is implemented, just use the &lt;code>type -a&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ type -a cat
cat is /bin/cat
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="more-than-you-need-to-know">More than You Need to Know&lt;/h2>
&lt;p>OK, for the masochistic few, you might be wondering about all of the other commands and utilities you may have seen that can tell you about programs and commands:&lt;/p>
&lt;ul>
&lt;li>&lt;code>what&lt;/code>&lt;/li>
&lt;li>&lt;code>whatis&lt;/code>&lt;/li>
&lt;li>&lt;code>which&lt;/code>&lt;/li>
&lt;li>&lt;code>whence&lt;/code>&lt;/li>
&lt;li>&lt;code>where&lt;/code>&lt;/li>
&lt;li>&lt;code>whereis&lt;/code>&lt;/li>
&lt;li>&lt;code>command&lt;/code>&lt;/li>
&lt;li>&lt;code>type&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>A &lt;em>lot&lt;/em> of these are legacy and should be avoided, but for completeness sake, we'll go through them.&lt;/p>
&lt;h3 id="what">&lt;code>what&lt;/code>&lt;/h3>
&lt;p>&lt;code>what&lt;/code> reads out special metadata embedded in a program, generally used to identify the version of source code it was built from:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ what /bin/ls
/bin/ls
Copyright &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span> 1989, 1993, &lt;span style="color:#ae81ff">1994&lt;/span>
PROGRAM:ls PROJECT:file_cmds-272.220.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There should be almost no circumstance in which you need to use it in your day-to-day work, but you might come across it if you &lt;em>meant&lt;/em> to type &lt;code>whatis&lt;/code>.&lt;/p>
&lt;h3 id="whatis">&lt;code>whatis&lt;/code>&lt;/h3>
&lt;p>&lt;code>whatis&lt;/code> searches a local help database for text. This can be useful in tracking down manual pages:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ whatis bash
bash&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span> - GNU Bourne-Again SHell
bashbug&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span> - report a bug in bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But I can't imagine it will be a regularly used tool by most users.&lt;/p>
&lt;h3 id="which">&lt;code>which&lt;/code>&lt;/h3>
&lt;p>&lt;code>which&lt;/code> will search your &lt;code>$PATH&lt;/code> to see whether an executable can be found. With the &lt;code>-a&lt;/code> flag, it will show all results.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ which -a vi
/usr/local/bin/vi
/usr/bin/vi
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>which&lt;/code> originated in &lt;code>csh&lt;/code>. It remains on many systems for compatibility but in general should be avoided due to potentially odd behaviour&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="whence">&lt;code>whence&lt;/code>&lt;/h3>
&lt;p>&lt;code>whence&lt;/code> was added to the Korn shell. You are unlikely to use it unless you are on systems using &lt;code>ksh&lt;/code>. &lt;code>zsh&lt;/code> also has this command, but it should be avoided and considered non-standard.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% whence brew
/usr/local/bin/brew
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="where">&lt;code>where&lt;/code>&lt;/h3>
&lt;p>This is a shell builtin that can provide information on commands, similar to &lt;code>type&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% where ls
ls: aliased to ls -G
/bin/ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, &lt;code>type&lt;/code> should be preferred, as it is more standard.&lt;/p>
&lt;h3 id="whereis">&lt;code>whereis&lt;/code>&lt;/h3>
&lt;p>&lt;code>whereis&lt;/code> is available on some systems and generally operates the same as &lt;code>which&lt;/code>, searching paths for an executable:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% whereis ls
/bin/ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Again, &lt;code>type&lt;/code> should be preferred for compatability.&lt;/p>
&lt;h3 id="command">&lt;code>command&lt;/code>&lt;/h3>
&lt;p>&lt;code>command&lt;/code> is defined in the POSIX standard, so should be expected to be present on most modern systems. Without arguments, it simply executes a command. With the &lt;code>-v&lt;/code> argument, you get a fairly machine-readable or processable response; with the &lt;code>-V&lt;/code> argument, you get a more human readable response:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% command -v ls
alias ls&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -G&amp;#39;&lt;/span>
% command -V ls
ls is an alias &lt;span style="color:#66d9ef">for&lt;/span> ls -G
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>command&lt;/code> can be useful in scripts, as we will see in later chapters.&lt;/p>
&lt;h3 id="type">&lt;code>type&lt;/code>&lt;/h3>
&lt;p>&lt;code>type&lt;/code> is part of the Unix standard and will be present in most modern systems. As we've already seen, it will identify the type of command as well as the location for an executable:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% type -a ls
ls is an alias &lt;span style="color:#66d9ef">for&lt;/span> ls -G
ls is /bin/ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command can also be used to only search for paths:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% type -p ls
ls is /bin/ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Summary&lt;/strong>&lt;/p>
&lt;p>In summary, avoid anything that starts with &amp;lsquo;&lt;code>w&lt;/code>&amp;rsquo;! These are legacy commands, generally needed only when working on older Unix machines. &lt;code>type&lt;/code> or &lt;code>command&lt;/code> should be used instead.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Footnotes&lt;/strong>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>We will cover permissions and modes in later chapters. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Why these names and locations? It's a long story. The best place to start if you are intersted is the &lt;a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Filesystem Hierarchy Standard&lt;/a>. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;code>chmod&lt;/code> changes the mode of a file; &lt;code>+x&lt;/code> means &amp;lsquo;add the executable bit&amp;rsquo;. This tells the operating system the file can be executed. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>&lt;a href="https://unix.stackexchange.com/questions/85249/why-not-use-which-what-to-use-then">Stack Exchange: Why not use “which”? What to use then?&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Effective Shell Part 6: Everything You Don't Need To Know About Job Control</title><link>https://dwmkerr.com/effective-shell-6-job-control/</link><pubDate>Mon, 10 Jun 2019 08:26:33 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-6-job-control/</guid><description>&lt;p>&lt;em>Job control&lt;/em> is a feature of most shells, which is generally not particularly intuitive to work with. However, knowing the basics can help prevent you from getting yourself into a tangle, and can from time to time make certain tasks a little easier.&lt;/p>
&lt;p>In this chapter, we'll look at the main features of job control, why it can be a problematic, and some alternatives.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-job-control">What Is Job Control?&lt;/h2>
&lt;p>Let's start with an example. I am building a simple web page. It has one &lt;code>index.html&lt;/code> file, one &lt;code>styles.css&lt;/code> file, and one &lt;code>code.js&lt;/code> file. The &lt;code>index.html&lt;/code> file looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;My New Project&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;styles.css&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;code.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!--&lt;/span>&lt;span style="color:#75715e"> Snip... &lt;/span>&lt;span style="color:#75715e">--&amp;gt;&lt;/span>
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Opening the file in a browser doesn't quite work, as it won't load the code or the styles. We need a web server to serve styles and code.&lt;/p>
&lt;p>A super-useful one-liner to run a web server on any machine with Python installed is:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In fact, this is so useful that I normally &lt;em>alias&lt;/em> this command, so that I can just type &lt;code>serve&lt;/code>. We'll see aliases in a later chapter.&lt;/p>
&lt;p>For now, if we run this command (you can get &lt;a href="https://github.com/dwmkerr/effective-shell/tree/master/6-job-control/sample">the three sample files here&lt;/a> if you want to try this yourself), then we can open the webpage in a browser, with the styles and code loaded:&lt;/p>
&lt;p>&lt;img src="images/website-screenshot.png" alt="Screenshot: Website" width="600" />&lt;/p>
&lt;p>We can also see that the server has served the HTML, JavaScript, and CSS files:&lt;/p>
&lt;p>&lt;img src="images/server-screenshot.png" alt="Screenshot: Server" width="600" />&lt;/p>
&lt;p>All well and good so far.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>Let's say we want to now continue using our shell, maybe to edit the website with a terminal editor like Vim or Emacs, or we want to zip up the site, or just run any shell command&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>We have a problem. The &lt;code>python&lt;/code> process is still running - it's serving the website. Our shell is essentially useless, until we stop the server. See what happens when I try to edit a file:&lt;/p>
&lt;p>&lt;img src="images/blocked-shell.gif" alt="Demo: Blocked Shell" width="600" />&lt;/p>
&lt;p>In the example above, I try to run &lt;code>vi&lt;/code>, but nothing is happening. Standard input is not being read by the server and not being interpreted by the shell.&lt;/p>
&lt;p>I have to kill the server by hitting &lt;code>Ctrl+C&lt;/code> (which sends a &lt;code>SIGINT&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> - we'll see more about signals later), clear my screen to get rid of all of the error messages, then start again.&lt;/p>
&lt;p>This is obviously not optimal. Let's look at some solutions.&lt;/p>
&lt;h2 id="solution-1-start-the-server-in-the-background">Solution 1: Start the Server in the Background&lt;/h2>
&lt;p>In most shells, you can run a command and instruct the shell to run it in the &lt;em>background&lt;/em>. To do this, you end the line with an ampersand. Here's how the example would look in this case:&lt;/p>
&lt;p>&lt;img src="images/start-in-background.gif" alt="Demo: Starting a Background Job" width="600" />&lt;/p>
&lt;p>By ending the command with an &lt;code>&amp;amp;&lt;/code> ampersand symbol, we instruct the shell to run the command as a &lt;em>background job&lt;/em>. This means that our shell is still functional. The shell has also notified us that this command is running as a background job with a specific &lt;em>job number&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span> &amp;amp;
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#ae81ff">19372&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In slightly obtuse language, the shell has informed us that it has started a job in the background, with job number &lt;code>1&lt;/code> and that this job is currently handling the process with ID &lt;code>19372&lt;/code>.&lt;/p>
&lt;p>The ampersand solution is a fairly common pattern used in day-to-day work.&lt;/p>
&lt;h2 id="solution-2-move-the-server-to-the-background">Solution 2: Move the Server to the Background&lt;/h2>
&lt;p>Let's say you forgot to start the command in the background. Most likely in this case you'd kill the server with &lt;code>Ctrl+C&lt;/code> and then start it again with the &lt;code>&amp;amp;&lt;/code> option. However, what if this was a large file download or a task you didn't want to abort?&lt;/p>
&lt;p>In the example below, we'll move the job to the background:&lt;/p>
&lt;p>&lt;img src="images/move-to-background.gif" alt="Demo: Moving a Job to the Background" width="600" />&lt;/p>
&lt;p>The process is currently in the foreground, so my shell is inactive. Hitting &lt;code>Ctrl+Z&lt;/code> sends a &amp;lsquo;suspend&amp;rsquo; signal to the process&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, pausing it and moving it to the background.&lt;/p>
&lt;p>Let's dissect this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
Serving HTTP on 0.0.0.0 port &lt;span style="color:#ae81ff">3000&lt;/span> ...
127.0.0.1 - - &lt;span style="color:#f92672">[&lt;/span>03/Jun/2019 13:38:45&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#34;GET / HTTP/1.1&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> -
^Z
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + &lt;span style="color:#ae81ff">21268&lt;/span> suspended python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shell echos as I type, so we see &lt;code>^Z&lt;/code> (i.e., the &lt;code>Ctrl+Z&lt;/code> chord I entered). The shell responds by moving the process into a background job and suspending it.&lt;/p>
&lt;p>The key here is that it is &lt;em>suspended&lt;/em>. The process is paused. So the web server is no longer serving. If you are following with the sample, reload your browser. The webpage fails to load, as the server process is not able to respond to requests.&lt;/p>
&lt;p>To &lt;em>continue&lt;/em> the job, in the background, we use the &lt;code>bg&lt;/code> (&amp;lsquo;background&amp;rsquo;) command, with a &lt;em>job identifier&lt;/em> (which always starts with a &lt;code>%&lt;/code> symbol - we'll see why soon) to tell the shell to continue the job:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% bg %1
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + &lt;span style="color:#ae81ff">21268&lt;/span> continued python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shell lets us know the job is being continued, and if we load the webpage again, the content is shown as expected.&lt;/p>
&lt;p>As a final check, we run the &lt;code>jobs&lt;/code> command to see what jobs the shell is running:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% jobs
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + running python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And there you have it - our server is running as a background job. This is exactly what we would see if we run &lt;code>jobs&lt;/code> after starting the server with an &lt;code>&amp;amp;&lt;/code> at the end. In fact, using an &lt;code>&amp;amp;&lt;/code> is perhaps an easier way to remember how to continue a suspended job:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% %1 &amp;amp;
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + &lt;span style="color:#ae81ff">21268&lt;/span> continued python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the same way ending a command with &lt;code>&amp;amp;&lt;/code> runs it in the background, ending a job identifier with &lt;code>&amp;amp;&lt;/code> &lt;em>continues&lt;/em> it in the background.&lt;/p>
&lt;p>There is at least one more way to move a job to the background&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, but I have not yet found it useful in any scenarios, and it is overly complex to explain. See the footnote for details if you are interested.&lt;/p>
&lt;h2 id="moving-background-jobs-to-the-foreground">Moving Background Jobs to the Foreground&lt;/h2>
&lt;p>If you have a job in the background, you can bring it back to the foreground with the &lt;code>fg&lt;/code> (&amp;lsquo;foreground&amp;rsquo;) command. Let's show the jobs, with the &lt;code>jobs&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% jobs
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + running python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I have a background job running a server. Any one of the following commands will bring it back to the foreground:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">fg %1 &lt;span style="color:#75715e"># Explicitly bring Job 1 into the foreground&lt;/span>
%1 &lt;span style="color:#75715e"># ...or in shorthand, just enter the job id...&lt;/span>
fg &lt;span style="color:#75715e"># ...if not given an id, fg and bg assume the most recent job.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the job is in the foreground, and you can interact with the process again however you like.&lt;/p>
&lt;h2 id="cleaning-up-jobs">Cleaning Up Jobs&lt;/h2>
&lt;p>You might realise you cannot continue what you are doing because an old job is &lt;em>still running&lt;/em>. Here's an example:&lt;/p>
&lt;p>&lt;img src="images/kill-job.gif" alt="Demo: Cleaning Up Jobs" width="600" />&lt;/p>
&lt;p>I tried to run my web server, but there was still one running as a background job. The server failed to start because the port is in use.&lt;/p>
&lt;p>To clean it up, I run the &lt;code>jobs&lt;/code> command to list the jobs:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% jobs
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + suspended python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There's my old web server. Note that even though it is suspended, it'll still be blocking the port it is serving on&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. The process is paused, but it is still holding onto all of the resources it is using.&lt;/p>
&lt;p>Now that I know the job identifier (&lt;code>%1&lt;/code> in this case), I can kill the job:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% kill %1
&lt;span style="color:#f92672">[&lt;/span>1&lt;span style="color:#f92672">]&lt;/span> + &lt;span style="color:#ae81ff">22843&lt;/span> terminated python -m SimpleHTTPServer &lt;span style="color:#ae81ff">3000&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>This is why job identifiers start with a percentage sign!&lt;/em> The &lt;code>kill&lt;/code> command I have used is not a special job control command (like &lt;code>bg&lt;/code> or &lt;code>fg&lt;/code>). It is the normal &lt;code>kill&lt;/code> command, which terminates a process. But shells that support job control can normally use a job identifier in place of a &lt;em>process identifier&lt;/em>. So rather than working out what the process identifier is that I need to kill, I can just use the job identifier&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="why-you-shouldnt-use-jobs">Why You Shouldn't Use Jobs&lt;/h2>
&lt;p>Avoid jobs. They are not intuitive to interface with, and they suffer from some serious problems.&lt;/p>
&lt;p>The most obvious one is that all jobs write to the same output, meaning you can quickly get garbled output like this:&lt;/p>
&lt;p>&lt;img src="images/output.png" alt="Screenshot: Garbled Output" width="600" />&lt;/p>
&lt;p>This is what happens when I run a job, which just outputs text every second. It's in the background, but it's printing all over my commands. Even running the &lt;code>jobs&lt;/code> command to try and find the job to stop it is difficult.&lt;/p>
&lt;p>Input is even more complex. If a job is &lt;em>running&lt;/em> in the background, but requires input, it will be &lt;em>silently suspended&lt;/em>. This can cause confusion.&lt;/p>
&lt;p>Jobs &lt;em>can&lt;/em> be used in scripts but must be done so with caution and could easily confuse a consumer of the script if they leave background jobs hanging around, which cannot be easily cleaned up&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Handling errors and exit codes for jobs can be problematic, causing confusion, poor error handling, or overly complex code.&lt;/p>
&lt;h2 id="how-to-escape-jobs">How to Escape Jobs&lt;/h2>
&lt;p>If there are two things to take away, it would be this:&lt;/p>
&lt;blockquote>
&lt;p>If you have started running a command in the foreground, and you don't want to stop it and would rather move it to the background, hit &lt;code>Ctrl+Z&lt;/code>. Then Google &amp;ldquo;job control&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;p>And:&lt;/p>
&lt;blockquote>
&lt;p>If you think there is a job running in the background, and it is messing with your screen, type &lt;code>fg&lt;/code> to bring it to the front and kill it with &lt;code>Ctrl+C&lt;/code>. Repeat as needed!&lt;/p>
&lt;/blockquote>
&lt;p>In either case, if you need to do something more subtle, you can return to this reference. But the first command should allow you to get your shell back while you work out how to continue the job, and the second should kill a background job that is messing with your screen.&lt;/p>
&lt;h2 id="alternatives-to-jobs">Alternatives to Jobs&lt;/h2>
&lt;p>If you are using any kind of modern terminal such as iTerm, Terminal or the GNOME Terminal, just open a new tab or split! Much easier.&lt;/p>
&lt;p>The benefit to this is that each tab gets its own standard input and output, so there's no risk of overwriting. And of course you can hide/reveal/rearrange the tabs however you like.&lt;/p>
&lt;p>The traditional alternative to a job for an operator who simply wants more than one thing going on at once would be a &lt;em>terminal multiplexer&lt;/em>, such as &lt;code>screen&lt;/code> or &lt;code>tmux&lt;/code>:&lt;/p>
&lt;p>&lt;img src="images/terminal-multiplexer.gif" alt="terminal-multiplexer">&lt;/p>
&lt;p>Multiplexers work in a very similar way to a modern graphical terminal - they manage many shell instances. The benefits to a modern terminal, such as iTerm, is that you have a very intuitive GUI and lots of features.&lt;/p>
&lt;p>The benefits to a multiplexer are that you can run them over SSH sessions to manage complex operations on remote machines and that they run a client-server model, meaning many people can work with many multiplexed processes (and they can persist beyond sessions).&lt;/p>
&lt;p>My personal preference is both - I use a modern terminal &lt;em>and&lt;/em> run everything inside it in &lt;code>tmux&lt;/code>. We'll look at both of these options in later chapters.&lt;/p>
&lt;h2 id="quick-reference">Quick Reference&lt;/h2>
&lt;p>You might find that jobs are useful, or you might find that they are not. Either way, here's a quick reference of some common commands:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Command&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>command &amp;amp;&lt;/code>&lt;/td>
&lt;td>Run the command as a background job.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;Ctrl+Z&amp;gt;&lt;/code>&lt;/td>
&lt;td>Move the current process into a background job, suspended.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>jobs&lt;/code>&lt;/td>
&lt;td>List all jobs.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fg %1&lt;/code>&lt;/td>
&lt;td>Move background job number 1 into the foreground.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bg %1&lt;/code>&lt;/td>
&lt;td>Continue background job number 1.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>kill %1&lt;/code>&lt;/td>
&lt;td>Terminate job number 1.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>wait %1&lt;/code>&lt;/td>
&lt;td>Block until job number 1 exits.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If you want to find out more about the gory details of jobs, the best place to start is the &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Job-Control">Bash Manual - Job Control Section&lt;/a>, or the &amp;lsquo;Job Control&amp;rsquo; section of your preferred shell's manual.&lt;/p>
&lt;p>I hope you found this useful, and, as always, please leave comments, questions or suggestions below!&lt;/p>
&lt;hr>
&lt;h2 id="footnotes">Footnotes&lt;/h2>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>If you are not a heavy shell user, this might seem unlikely. But if you do a lot of work in shells, such as sysadmin, devops, or do your coding from a terminal, this happens all the time! &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Signals like &lt;code>SIGINT&lt;/code>, &lt;code>SIGKILL&lt;/code>, &lt;code>SIGTERM&lt;/code> and so on will be covered in a later chapter. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Technically, &lt;code>SIGTSTP&lt;/code> - which is &amp;lsquo;TTY stop&amp;rsquo;. If you have always wondered about the &amp;lsquo;TTY&amp;rsquo; acroynm, check the previous chatper, &lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Interlude: Understanding the Shell&lt;/a>. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>The alternative method is to use &lt;code>Ctrl+Y&lt;/code>, which will send a &lt;em>delayed interrupt&lt;/em>, which will continue to run the process until it tries to read from &lt;code>stdin&lt;/code>. At this point, the job is suspended and the control given to the shell. The operator can then use &lt;code>bg&lt;/code> or &lt;code>kill&lt;/code> or &lt;code>fg&lt;/code> to either move to the background, stop the process, or keep in the foreground as preferred. See: &lt;a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Job-Control">https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Job-Control&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Another super-useful snippet: &lt;code>lsof -i -P -n | grep 8000&lt;/code> to find any process that has a given port open. Another one for the aliases chapter! &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>There are times this is needed. If a job runs &lt;em>many processes&lt;/em> - for example, by running a pipeline - the process identifier will change as the command moves from one stage of the pipeline to the next. The job identifier will remain constant. Remember, a job is a shell &lt;em>command&lt;/em>, so could run many processes. &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>To see how bad this can be, create a script that starts jobs, then run it. Then run the &lt;code>jobs&lt;/code> command to see what is running. The output might surprise you! &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Effective Shell Interlude: Understanding the Shell</title><link>https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/</link><pubDate>Tue, 21 May 2019 09:22:05 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/</guid><description>&lt;p>This is the first &amp;lsquo;interlude&amp;rsquo; in my &lt;a href="https://github.com/dwmkerr/effective-shell">Effective Shell&lt;/a> series. These interludes give some background, history or more flavour to some of the topics.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This one &lt;em>should&lt;/em> be high-level enough for even non-technical readers to enjoy (or at least understand!). I've tried to make sure any term that might be unfamiliar is described in a footnote&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. For the more technical reader, it provides an important grounding on some of the key concepts relating to shells and how they work.&lt;/p>
&lt;h2 id="introduction-for-the-non-technical-reader">Introduction for the Non-Technical Reader&lt;/h2>
&lt;p>It might come as a surprise that &lt;em>many&lt;/em> technical computer users (programmers, data scientists, systems administrators etc) spend a lot of time using an interface which looks like it's from the sixties:&lt;/p>
&lt;p>&lt;img src="images/screenshot-shell.png" alt="Diagram: The Shell" width="600px" />&lt;/p>
&lt;p>If you work with technologists, you might have seen them using an interface like this. This kind of simple, text-based interface is called a &lt;em>shell&lt;/em>, and it has been a common way to interface with computers ever since the first screens and keyboards were created.&lt;/p>
&lt;p>Given how much computing has advanced, why would people use such an interface? Just look at how much the Windows operating-system has changed over the last three decades:&lt;/p>
&lt;p>&lt;img src="images/screenshot-windows-evolution.png" alt="Image: The Evolution of Windows" width="600px" />&lt;/p>
&lt;p>&lt;em>(By Source (WP:NFCC#4), Fair use, &lt;a href="https://en.wikipedia.org/w/index.php?curid=58853841">https://en.wikipedia.org/w/index.php?curid=58853841&lt;/a>)&lt;/em>&lt;/p>
&lt;p>Why would people choose to use such an archaic interface as a shell?&lt;/p>
&lt;ul>
&lt;li>Typing is &lt;em>fast&lt;/em>: A skilled shell user can manipulate a system at dazzling speeds just using a keyboard. Typing commands is generally &lt;em>much&lt;/em> faster than exploring through user interfaces with a mouse&lt;/li>
&lt;li>Shells are &lt;em>programmable&lt;/em>: Users will often being programming as they work in a shell, creating scripts to automate time-consuming or repetetive processes&lt;/li>
&lt;li>Shells are &lt;em>portable&lt;/em>: A shell can be used to interface to almost any type of computer, from a mainframe to a Raspberry Pi, in a very similar way.&lt;/li>
&lt;/ul>
&lt;p>Not all technical users will use a shell regularly, but there are many who will spend the bulk of their time in such an interface. It is such a crucial skill to be able to operate one effectively that I have been writing this series primarily to show ways to be more efficient with this kind of interface.&lt;/p>
&lt;h2 id="introduction-for-the-technical-reader">Introduction for the Technical Reader&lt;/h2>
&lt;p>You may be familar with the shell, but it can be useful to understand some of the surrounding concepts in detail. How does a shell differ from a terminal? What is a &lt;em>tty&lt;/em>? How do shells really work? Hopefully as you read this article you'll discovery something that you didn't know about shells.&lt;/p>
&lt;h2 id="lets-get-started">Let's Get Started!&lt;/h2>
&lt;p>To understand what shells, terminals, command-prompts and so on are and how they relate, we need to start with the basics: how a modern computer works!&lt;/p>
&lt;h2 id="a-computer-in-a-nutshell">A Computer in a Nutshell&lt;/h2>
&lt;p>The diagram below shows a simplified view of a typical computer:&lt;/p>
&lt;p>&lt;img src="images/diagram1-operating-system.png" alt="Diagram: Operating System" width="600px" />&lt;/p>
&lt;p>Already there's a lot going on.&lt;/p>
&lt;p>Your computer is going to have a CPU&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> and memory&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, and almost certainly a network adapter&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> and display adapter&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. Most computers will have at least one hard disk. For home PCs, there'll also likely be a bunch of peripherals, such as a mouse, keyboard, printers, flash drives, webcams and so on.&lt;/p>
&lt;h3 id="the-operating-system">The Operating System&lt;/h3>
&lt;p>The operating system is the piece of software installed on a computer that can interface with the &lt;em>hardware&lt;/em>. Without hardware, such as a CPU, memory, a network adapter, a graphics card, disk drives and so on, there's not much that you can do with the computer. The operating system is the primary interface to this hardware. No normal programs will talk to hardware directly - the operating system abstracts this hardware away and provides a &lt;em>software&lt;/em> interface to it.&lt;/p>
&lt;p>The abstraction the operating system provides is essential. Developers don't need to know the specifics of how to work with individual devices from different vendors; the operating system provides a standardised interface to all of this. It also handles various tasks such as making sure the system starts up properly.&lt;/p>
&lt;p>The operating system is generally broken down into two parts - the &lt;em>kernel&lt;/em> and &lt;em>user space&lt;/em>:&lt;/p>
&lt;p>&lt;img src="images/diagram2-the-kernel-and-user-space.png" alt="Diagram: The Kernel and User Space" width="600px" />&lt;/p>
&lt;p>Let's look at these in more detail.&lt;/p>
&lt;h3 id="the-kernel">The Kernel&lt;/h3>
&lt;p>This is the part of the operating system that is responsible for the most sensitive tasks: interfacing with physical devices, managing the resources that are available for users and programs, starting up the various systems that are needed, and so on.&lt;/p>
&lt;p>Software running in the kernel has direct access to resources, so is &lt;em>extremely&lt;/em> sensitive. The kernel will balance resources between the programs in user space, which we'll look at shortly. If you've ever had to install &amp;lsquo;drivers&amp;rsquo;, these are examples of pieces of software that will run in the kernel - they'll have direct access to a physical device you've installed, and expose it to the rest of the software on the computer.&lt;/p>
&lt;p>Why &amp;lsquo;kernel&amp;rsquo;? The kernel is the soft, edible part of a nut or seed, which is surrounded by a shell. Below you can see a walnut - the kernel is the soft bit in the middle, and the shell surrounds and protects it. This is a useful metaphor that is used for parts of a computer.&lt;/p>
&lt;p>&lt;img src="images/image-walnut.jpg" alt="Image: Photo of a walnut, showing the kernel and the shell" width="200px" />&lt;/p>
&lt;p>&lt;em>(By Kkchaudhary11 - Own work, CC BY-SA 4.0, &lt;a href="https://commons.wikimedia.org/w/index.php?curid=49069244">https://commons.wikimedia.org/w/index.php?curid=49069244&lt;/a>)&lt;/em>&lt;/p>
&lt;p>The operating system kernel really is the &lt;em>core&lt;/em> of the operating system. It's such a sensitive area of the operating system that we actually want to avoid running software in it if possible&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>. And that is where &lt;em>user space&lt;/em> comes in.&lt;/p>
&lt;h3 id="user-space">User Space&lt;/h3>
&lt;p>The vast majority of programs run in &amp;lsquo;user space&amp;rsquo; (also commonly called &amp;lsquo;user land&amp;rsquo;).&lt;/p>
&lt;p>When a program starts, the kernel will allocate it a private segment of memory and provide &lt;em>limited&lt;/em> access to resources. The program is given access to a library of functions by the operating system, which it can use to access resources such as files, devices and so on. Programs in user space are essentially in sandboxes, where there is a limit to how much damage they can do.&lt;/p>
&lt;p>For example, a program running in user space can use the standard &lt;a href="http://man7.org/linux/man-pages/man3/fopen.3.html">&lt;code>fopen&lt;/code>&lt;/a> function, which is provided on almost every operating system as part of the &lt;a href="https://www.gnu.org/software/libc/">C Standard Library&lt;/a>. This allows a program to attempt to open a file. The operating system will make a decision on whether the program is &lt;em>allowed&lt;/em> to open the file (based on things such as permissions, where the file is and so on) and then, if it is OK with the call, will give the program access to the file. Under the hood, this &amp;lsquo;user space&amp;rsquo; call translates to a system call in the kernel.&lt;/p>
&lt;p>Now that the key components have been introduced, we can look at the &lt;em>shell&lt;/em>. The name should come as no surprise, as it is a &lt;em>wrapper&lt;/em> or outer layer to the operating system (which itself contains the sensitive nugget of the kernel).&lt;/p>
&lt;h3 id="the-shell">The Shell&lt;/h3>
&lt;p>So what is the shell? The shell is just a general name for any &lt;em>user space&lt;/em> program that allows access to resources in the system, via some kind of interface.&lt;/p>
&lt;p>Shells come in many different flavours but are generally provided to aid a human operator in accessing the system. This could be interactively, by typing at a terminal, or via scripts, which are files that contain a sequence of commands.&lt;/p>
&lt;p>For example, to see all of the files in a folder, the human operator &lt;em>could&lt;/em> write a program in a language such as C, making system calls to do what they want. But for day-to-day tasks, this would be repetitive. A shell will normally offer us a quick way to do that exact task, without having to manually write a program to do it.&lt;/p>
&lt;p>Here's an example, where a shell is being used to show the &amp;lsquo;png&amp;rsquo; images in the folder I am working in&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>:&lt;/p>
&lt;p>&lt;img src="images/screenshot1-example-shell.png" alt="Screenshot: Browsing Contents of the File System the the Bourne Again Shell" width="600px" />&lt;/p>
&lt;p>So a shell is a user-space program to interface with the computer. But there a few more moving parts than just a shell we are seeing in the image above. There are different types of shells, there are terminal programs, and there are the programs or commands that the shell calls (in the example above, &lt;code>tree&lt;/code> is a program). Let's pick these apart.&lt;/p>
&lt;p>Here's a diagram that more accurately shows what is going on:&lt;/p>
&lt;p>&lt;img src="images/diagram3-terminal-and-shell.png" alt="Diagram: The Terminal &amp; The Shell" width="600px" />&lt;/p>
&lt;p>We've introduced a few new things here. There's a &lt;em>user&lt;/em>, who is interfacing with a &lt;em>terminal&lt;/em>, which is running a &lt;em>shell&lt;/em>, which is showing a &lt;em>command prompt&lt;/em>. The user has written a command that is calling a program (in this case, the &lt;code>tree&lt;/code> program).&lt;/p>
&lt;p>Let's dissect this bit by bit.&lt;/p>
&lt;h3 id="the-terminal">The Terminal&lt;/h3>
&lt;p>We're not &lt;em>directly&lt;/em> interacting with the &amp;lsquo;shell&amp;rsquo; in this diagram. We're actually using a &lt;em>terminal&lt;/em>. When a user wants to work with a shell interactively, using a keyboard to provide input and a display to see the output on the screen, the user uses a &lt;em>terminal&lt;/em>.&lt;/p>
&lt;p>A terminal is just a program that reads input from the keyboard, passes that input to another program (normally a shell), and displays the results on the screen. A shell program on its own does not do this - it requires a terminal as an interface.&lt;/p>
&lt;p>Why the word &lt;em>terminal&lt;/em>? This makes sense when you look at how people interfaced with computers historically. Input to a computer might be through punch cards, and output would often be via a printer. The &lt;em>Teletype Termimal&lt;/em>&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> became a common way for users to interface with computers.&lt;/p>
&lt;p>&lt;img src="images/image-asr-33.jpg" alt="Photo: ASR-33 TTY" width="600px" />&lt;/p>
&lt;p>&lt;em>(Photograph by Rama, Wikimedia Commons, Cc-by-sa-2.0-fr, CC BY-SA 2.0 fr, &lt;a href="https://commons.wikimedia.org/w/index.php?curid=17821795">https://commons.wikimedia.org/w/index.php?curid=17821795&lt;/a>)&lt;/em>&lt;/p>
&lt;p>At this time, computers were very large, complex, and expensive machines. It was common to have &lt;em>many&lt;/em> terminals connected to a single large machine (or &amp;lsquo;mainframe&amp;rsquo;), or a few terminals that people would share. But the terminal itself was just a human interface to the operating system. A more modern terminal would be something like an IBM 3486:&lt;/p>
&lt;p>&lt;img src="images/image-ibm3486.jpg" alt="Photo: IBM 3486" width="600px" />&lt;/p>
&lt;p>&lt;em>(By ClickRick - Own work, CC BY-SA 3.0, &lt;a href="https://commons.wikimedia.org/w/index.php?curid=6693700">https://commons.wikimedia.org/w/index.php?curid=6693700&lt;/a>)&lt;/em>&lt;/p>
&lt;p>This is a very small computer in its own right but still basically just a dumb screen and keyboard connected by a cable to a larger mainframe computer in another location.&lt;/p>
&lt;p>This mechanism is still very much the case today. When I want to work with a computer in a data centre, I don't go and find the machine, plug in a keyboard and a display and directly interface to it. I run a &lt;em>terminal program&lt;/em> on my computer to provide access to the remote machine. My terminal program allows me to use my keyboard and display to work with a remote machine - all via a &lt;em>secure shell&lt;/em> - which is a secured-shell connection over a network.&lt;/p>
&lt;p>So terminals in many ways are quite simple - they are interfaces. But because they are quite simple programs, we can't do much with them. So normally, the first thing that a terminal program will do is run a &lt;em>shell&lt;/em> program - a program that we can use to operate the computer.&lt;/p>
&lt;p>There's nothing special about terminals - anyone can write a program to operate as a terminal, which is why you will see many different terminals around. Examples are the standard &amp;lsquo;terminal&amp;rsquo; app for MacOS X, the &lt;a href="https://wiki.gnome.org/Apps/Terminal/VTE">gnome-terminal&lt;/a> for Linux, and &lt;a href="https://www.iterm2.com/">iTerm2&lt;/a> and &lt;a href="https://hyper.is/">Hyper&lt;/a>. There's a bunch of screenshots of different setups at the end of the article.&lt;/p>
&lt;h2 id="back-to-the-shell">Back to the Shell&lt;/h2>
&lt;p>Now that we've described the terminal, we can go back and look at the shell in detail.&lt;/p>
&lt;p>The shell is the program that is going to take input from somewhere and run a series of commands. When the shell is running in a terminal, it is normally taking input interactively from the user. As the user types in commands, the terminal feeds the input to the shell and presents the output of the shell on the screen.&lt;/p>
&lt;p>A shell program can also take input from files; these files will then generally be &amp;lsquo;shell scripts&amp;rsquo;. This might be used to run automated operations, such as cleaning up certain folders when a computer starts.&lt;/p>
&lt;p>Shells can write output to files or other locations, and so on. You can run a shell program outside of a terminal - you just won't be able to interface with it using a keyboard or display. And in fact, lots of operations happen in this way: automated scripts, startup tasks, installers and so on.&lt;/p>
&lt;p>So what else does a shell do? Most of the features are related to helping human operators work with the system more efficiently.&lt;/p>
&lt;ul>
&lt;li>Quickly enter commands, see the history of commands and quickly restructure commands (see &lt;a href="http://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Effective Shell - Navigating the Command Line&lt;/a>)&lt;/li>
&lt;li>Navigate through the file system, moving from folder to folder (see &lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Effective Shell - Move Around!&lt;/a>), which makes it easier for an operator to navigate the file system.&lt;/li>
&lt;li>Chain the output of commands together - for example, taking the output of one basic program, such as the &lt;code>tree&lt;/code> program we saw, and writing it to a file (see &lt;a href="https://github.com/dwmkerr/effective-shell#coming-soon">Effective Shell - Understanding Pipelines&lt;/a>)&lt;/li>
&lt;li>Offer a programming language, allowing the operator to perform more complicated tasks (see &lt;a href="https://github.com/dwmkerr/effective-shell#coming-soon">Effective Shell - Basic Shell Scripting&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>And a lot more! In fact, that's what the whole &lt;a href="https://github.com/dwmkerr/effective-shell">Effective Shell&lt;/a> series is about - how to get the most from these powerful programs, particularly for those who use them regularly.&lt;/p>
&lt;h3 id="the-command-prompt-or-command-line">The Command Prompt or Command Line&lt;/h3>
&lt;p>The last part of the diagram, which we haven't covered yet, is the &lt;em>command prompt&lt;/em>.&lt;/p>
&lt;p>&lt;img src="images/diagram4-command-prompt-1.png" alt="Diagram: Command Prompt" width="300px" />&lt;/p>
&lt;p>When a &lt;em>shell&lt;/em> is running in &lt;em>terminal&lt;/em>, it knows that a human operator will be interfacing with it. So to make sure that the operator has some kind of visual hint that &lt;em>they have to enter commands&lt;/em>, the shell will output some kind of prompt.&lt;/p>
&lt;p>I've included a set of screenshots at the end of the article, just after this section, and you can see how some different command prompts look.&lt;/p>
&lt;p>Note that shells don't have to use command prompts - if you use a shell program to execute a script, there will be no command prompt. Shells only show a prompt when they know they are being used interactively. Many programs which allow a user to operate interactively will show a command prompt.&lt;/p>
&lt;p>Shell command prompts can be customised, so they will often look different from machine to machine (for more details, see &lt;a href="https://github.com/dwmkerr/effective-shell#coming-soon">Effective Shell - Customising the Command Line&lt;/a>). Below is an example that shows a &lt;em>lot&lt;/em> of technical information. This is from the highly popular &lt;a href="https://ohmyz.sh/">oh-my-zsh&lt;/a> framework for the &amp;lsquo;Z Shell&amp;rsquo; shell, which is very popular among developers:&lt;/p>
&lt;p>&lt;img src="images/image-ohmyzsh.jpg" alt="Image: Customised oh-my-zsh" width="600px" />&lt;/p>
&lt;p>*(Source: &lt;a href="https://ohmyz.sh/">https://ohmyz.sh/&lt;/a>)&lt;/p>
&lt;h3 id="shell-commands-and-different-shells">Shell Commands and Different Shells&lt;/h3>
&lt;p>A lot of the &amp;lsquo;commands&amp;rsquo; in a shell, such as &lt;code>cat&lt;/code> (which shows the contents of a file), are actually just simple programs, which will interface with the kernel. No matter what shell you use, these commands will behave the same way, because really all you are doing is calling another progam.&lt;/p>
&lt;p>Some commands, such as &lt;code>cd&lt;/code> (change directory), are built into the shell. Some commands are functions that have been defined, or aliases to other commands (for more details on commands, see &lt;a href="https://github.com/dwmkerr/effective-shell#coming-soon">Effective Shell - Commands&lt;/a>). Commands will often differ between shells.&lt;/p>
&lt;p>Not all shells are created equal - anyone can write a shell program, maybe creating a simple interface to the computer or a highly complex one with many features. In fact, a later article in this series will look at the geneology of the most common shells.&lt;/p>
&lt;p>On most Unix-like systems, the default shell is a program called &lt;code>bash&lt;/code>, which stands for &amp;quot; Bourne Again Shell&amp;rdquo; (the name and history around it will be discussed at length in the later article). But there are many other shells: the C Shell, the Korn Shell, Z Shell and Fish, just to name just a few.&lt;/p>
&lt;p>Users and administators can configure what shell they like to use. When a terminal opens, it will immediately start the user's preferred shell program. It is possible to change this. Different users will have different preferences, given that shells offer varying features. This can cause complexity when working with systems, as we cannot always expect every user to have the same shell, or even for the same shell to be set up consistently, as they can be extensively customised.&lt;/p>
&lt;p>Let's review the earlier diagram again:&lt;/p>
&lt;p>&lt;img src="images/diagram3-terminal-and-shell-1.png" alt="Diagram: The Terminal &amp; The Shell" width="600px" />&lt;/p>
&lt;p>We can see the real internals of what is going on in this &amp;ldquo;Terminal -&amp;gt; Shell -&amp;gt; Program&amp;rdquo; chain in the diagram above quite easily.&lt;/p>
&lt;p>Try the command &lt;code>pstree -psa $$&lt;/code> in a shell&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>:&lt;/p>
&lt;p>&lt;img src="images/image-psforest.png" alt="Image: Process Tree" width="600px" />&lt;/p>
&lt;p>The first &lt;code>systemd&lt;/code> process is the primary process for the OS - it is process number &lt;code>1&lt;/code>, which initialises everything else. The second &lt;code>systemd&lt;/code> process is the process that is running the interface for my user. We can ignore these for now; they are internals to how the operating system boots and starts processes.&lt;/p>
&lt;p>What is interesting is that we can see a &lt;em>terminal&lt;/em> (the gnome terminal), which has started my preferred &lt;em>shell&lt;/em> (which is &lt;code>zsh&lt;/code>), which is running a &lt;em>command&lt;/em> (the program &lt;code>pstree&lt;/code>). Here we can see the exact chain as shown in the diagram earlier.&lt;/p>
&lt;h3 id="thats-a-wrap">That's a Wrap!&lt;/h3>
&lt;p>These are the key technologies and concepts that surround a shell.&lt;/p>
&lt;p>If you are interested in more technical details of working with shells, then my &lt;a href="https://github.com/effective-shell">Effective Shell&lt;/a> series goes into these topics in depth. The goal of this series is to help teach techniques that making working with shells more efficient.&lt;/p>
&lt;p>To close the article, below are some examples of different terminals, shells, command prompts and so on.&lt;/p>
&lt;h4 id="example-iterm-2--tmux--zsh">Example: iTerm 2 / tmux / zsh&lt;/h4>
&lt;p>&lt;img src="images/example-iterm-zsh.png" alt="Example: iTerm 2, tmux, zsh" width="600px" />&lt;/p>
&lt;p>In this example, we have:&lt;/p>
&lt;ul>
&lt;li>A MacOS operating system&lt;/li>
&lt;li>iTerm2 as the terminal program&lt;/li>
&lt;li>&lt;code>tmux&lt;/code> running as a &amp;lsquo;terminal multiplexer&amp;rsquo; (see &lt;a href="https://github.com/dwmkerr/effective-shell#coming-soon">Effective Shell: Terminal Multiplexers&lt;/a>)&lt;/li>
&lt;li>&lt;code>zsh&lt;/code> (Z Shell) as the shell program, using &amp;lsquo;oh my zsh&amp;rsquo;, which is easily recognised by the &lt;code>%&lt;/code> sign in the command prompt.&lt;/li>
&lt;li>A customised command line, which shows the user and folder on one line, with only the &lt;code>%&lt;/code> symbol below, to leave lots of space for the input commands&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;h4 id="example-bash">Example: Bash&lt;/h4>
&lt;p>&lt;img src="images/example-bash.png" alt="Example: Bash" width="600px" />&lt;/p>
&lt;p>&lt;img src="images/example-bash-root.png" alt="Example: Bash Elevated" width="600px" />&lt;/p>
&lt;p>In this example, we have:&lt;/p>
&lt;ul>
&lt;li>A Linux operating system (Ubuntu 14)&lt;/li>
&lt;li>The gnome terminal&lt;/li>
&lt;li>&lt;code>bash&lt;/code> as the shell&lt;/li>
&lt;li>In the second screenshot, the user has &amp;lsquo;root privileges&amp;rsquo;, and to indicate this, &lt;code>bash&lt;/code> helpfully changes the default command prompt from a dollar sign to a hash sign&lt;/li>
&lt;/ul>
&lt;h4 id="example-windows-explorer">Example: Windows Explorer&lt;/h4>
&lt;p>&lt;img src="images/example-explorer.png" alt="Example: Windows Explorer" width="600px" />&lt;/p>
&lt;p>In this example, we have:&lt;/p>
&lt;ul>
&lt;li>The Windows 10 operating system&lt;/li>
&lt;li>No terminal&lt;/li>
&lt;li>The &lt;code>explorer.exe&lt;/code> program showing us a &lt;em>graphical&lt;/em> shell&lt;/li>
&lt;/ul>
&lt;p>This looks different from previous examples. The program, which shows the familiar Windows interface, &lt;code>explorer.exe&lt;/code>, is in fact a shell as well, offering interactive access to the operating system and computer resources. The bulk of the Windows APIs to interact with this interface are in the &lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb773177(v=vs.85).aspx">Shell Library&lt;/a>. I also maintain a popular library for building extensions to the graphical Windows shell - &lt;a href="https://github.com/dwmkerr/sharpshell">sharpshell&lt;/a>.&lt;/p>
&lt;h4 id="example-windows-command-prompt">Example: Windows Command Prompt&lt;/h4>
&lt;p>&lt;img src="images/example-cmd.png" alt="Example: Command Prompt" width="600px" />&lt;/p>
&lt;p>In this example, we have:&lt;/p>
&lt;ul>
&lt;li>The Windows 10 operating system&lt;/li>
&lt;li>The command prompt terminal and shell&lt;/li>
&lt;/ul>
&lt;p>In Windows, the terminal and shell are combined into a single &lt;code>cmd.exe&lt;/code> program. There's an excellent article on the internals - &lt;a href="https://devblogs.microsoft.com/commandline/windows-command-line-inside-the-windows-console/">Microsoft DevBlogs: Windows Command-Line: Inside the Windows Console&lt;/a>&lt;/p>
&lt;h4 id="example-windows-powershell">Example: Windows PowerShell&lt;/h4>
&lt;p>&lt;img src="images/example-powershell.png" alt="Example: Windows Powershell" width="600px" />&lt;/p>
&lt;p>In this example, we have:&lt;/p>
&lt;ul>
&lt;li>The Windows 10 operating system&lt;/li>
&lt;li>The PowerShell terminal&lt;/li>
&lt;/ul>
&lt;p>PowerShell is an improvement on the &amp;lsquo;command prompt&amp;rsquo; program that was originally used in Windows, offering much more functionality for scripting and other modern shell features.&lt;/p>
&lt;h4 id="example-windows-subsystem-for-linux-wsl">Example: Windows Subsystem for Linux (WSL)&lt;/h4>
&lt;p>&lt;img src="images/example-wsl.png" alt="Example: WSL" width="600px" />&lt;/p>
&lt;p>In this example, we have:&lt;/p>
&lt;ul>
&lt;li>The Windows 10 operating system&lt;/li>
&lt;li>The &lt;code>Bash.exe&lt;/code> program&lt;/li>
&lt;/ul>
&lt;p>This screenshot, from &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/faq">MSDN: Frequently Asked Questions about Windows Subsystem for Linux&lt;/a> shows Bash running in Windows. This is a relatively new feature at the time of writing, allowing Windows users to use a Linux interface to the PC. This is a feature that may become increasingly valuable, as in general it is challenging to write shell code that can run on Windows and Unix-like systems.&lt;/p>
&lt;h2 id="share-and-discuss">Share and Discuss&lt;/h2>
&lt;p>If you enjoyed this article, please do share it! Feel free to include suggestions, improvements or corrections in the comments below.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Useful References&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A simple Linux kernel module, showing how basic kernel programming works in Linux: &lt;a href="https://github.com/dwmkerr/linux-kernel-module">github.com/dwmkerr/linux-kernel-module&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676">How Linux Works - Brian Ward&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://unix.stackexchange.com/questions/4126/what-is-the-exact-difference-between-a-terminal-a-shell-a-tty-and-a-con/4132">StackExchange: What is the exact difference between a &amp;lsquo;terminal&amp;rsquo;, a &amp;lsquo;shell&amp;rsquo;, a &amp;lsquo;tty&amp;rsquo;, and a console?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://devblogs.microsoft.com/commandline/windows-command-line-inside-the-windows-console/">Microsoft: Inside the Windows Console&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Footnotes&lt;/strong>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I'd be fascinated to know if this is at all interesting to less technically inclined people, so please do go ahead and let me know in the comments! &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>CPU: central processing unit. This is the chip in the computer that does most of the work (which after many layers of abstraction eventually becomes arithmetic and sending simple instructions to other places). &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Memory is the &amp;lsquo;working space&amp;rsquo; where the state of your system is stored. If you are writing a document, the text lives in memory, until you save it, when it then gets written to a hard drive. Memory is &lt;em>ephemeral&lt;/em> - everything is gone when you turn off the power to it. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>This is the part of your computer that knows how to do things like connect to a WiFi network, or has a network socket you might plug a network cable into. &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>This is the part of your computer you plug the screen into. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>This is because a mistake in &lt;em>Kernel Mode&lt;/em> programs can have disasterous effects. It could access any files, no matter who they belong do, control the hardware, install more software - almost anything. Errors in this code can cause terrible issues (like the infamous Windows &amp;lsquo;blue screen of death&amp;rsquo;), and malicious code in the kernel essentially has full access to not only all your data but also your webcam, network adapter and so on. &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>As an aside, if you are curious about the visual style of my setup or customisations that have been made, everything in my setup is available online on my &amp;lsquo;dotfiles&amp;rsquo; repo - &lt;a href="https://github.com/dwmkerr/dotfiles">github.com/dwmkerr/dotfiles&lt;/a>. &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>And that's where the &amp;lsquo;TTY&amp;rsquo; acronym you will see sometimes comes from. Enter the &lt;code>ps&lt;/code> command, and you'll actually see the TTY interface each process is attached to. This is a topic that will come up later in the series. &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>&lt;code>$$&lt;/code> is a Bash &lt;a href="https://www.tldp.org/LDP/abs/html/internalvariables.html#PROCCID">internal variable&lt;/a>. These will also be covered in a later article in the series. &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>Feel free to see my &lt;a href="https://github.com/dwmkerr/dotfiles">dotfiles&lt;/a> to configure a similar setup for yourself. &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Effective Shell 4: Move Around!</title><link>https://dwmkerr.com/effective-shell-4-moving-around/</link><pubDate>Mon, 11 Mar 2019 09:02:00 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-4-moving-around/</guid><description>&lt;p>This is the fourth part of my &lt;a href="https://github.com/dwmkerr/effective-shell">Effective Shell&lt;/a> series, a set of practical examples of ways to be more efficient with everyday tasks in the shell or at the command line.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this article we'll look at the key elements of navigation in the shell.&lt;/p>
&lt;h2 id="getting-comfortable-moving-around">Getting Comfortable Moving Around&lt;/h2>
&lt;p>You might already spend a lot of time in the shell, running various command line programs or using tooling for development projects or operational tasks. But you might also still switch back to a more visual paradigm for working with files, directories and resources.&lt;/p>
&lt;p>Being able to perform everyday file and folder manipulation tasks directly from the shell can really speed up your workflow. Let's look at some common tasks and see how we can work with them in the shell. Along the way we'll also introduce some of the most frequently used tools and commands to work with the filesystem.&lt;/p>
&lt;h2 id="where-am-i">Where Am I?&lt;/h2>
&lt;p>The first command to become familiar with is &lt;code>pwd&lt;/code> (&amp;lsquo;print working directory&amp;rsquo;). This command will echo the current absolute path. You can also use the &lt;code>$PWD&lt;/code> environment variable:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ pwd
/Users/dave/repos/github/dwmkerr/effective-shell
$ echo $PWD
/Users/dave/repos/github/dwmkerr/effective-shell
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depending on your shell, or your command-line setup (which we will discuss in a later chapter), you might also see your working directly on the command-line.&lt;/p>
&lt;h2 id="changing-directory">Changing Directory&lt;/h2>
&lt;p>Most likely one of the most familiar commands out there, the &lt;code>cd&lt;/code> or &lt;code>chdir&lt;/code> function changes the current directory:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ pwd
/Users/dave/repos/github/dwmkerr/effective-shell
$ cd
$ pwd
/users/dave
$ cd -
~/repos/github/dwmkerr/effective-shell
$ pwd
/Users/dave/repos/github/dwmkerr/effective-shell
$ cd ~
$ pwd
/users/dave
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we can see that running &lt;code>cd&lt;/code> with no parameters moves to the users &amp;lsquo;home&amp;rsquo; directory. This directory is always available in the &lt;code>$HOME&lt;/code> environment variable.&lt;/p>
&lt;p>Running &lt;code>cd -&lt;/code> will switch &lt;em>back&lt;/em> to the previous directory — this is very useful if you want to quickly jump somewhere and then back again.&lt;/p>
&lt;p>You can use &lt;code>~&lt;/code> as an alias for the home directory, allowing you to quickly move to personal folders, with commands such as &lt;code>cd ~/Downloads&lt;/code>.&lt;/p>
&lt;p>Most commonly, you will specify a path when changing directory. This can be a fully qualified path, or it can be a relative path:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ cd /dev
$ cd ~/repos
$ cd ./github
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use the special link &lt;code>..&lt;/code>, which is a folder that points to the &lt;em>parent&lt;/em> directory to move &amp;lsquo;upwards&amp;rsquo;:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ pwd
/Users/dave/repos/github/dwmkerr/effective-shell
$ cd ../../
$ pwd
/Users/dave/repos/github
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploring-a-directory">Exploring a Directory&lt;/h2>
&lt;p>Once we are in a directory, we will often want to see the contents. The &lt;code>ls&lt;/code> (&amp;ldquo;list directory contents&amp;rdquo;) command is useful here:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ pwd
/Users/dave/repos/github/dwmkerr/effective-shell
$ ls
1-navigating-the-command-line LICENSE
2-clipboard-gymnastics README.md
3-getting-help sed.1
4-moving-around
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, the &lt;code>ls&lt;/code> command will list the files and directories. We can show more information with the &lt;code>-l&lt;/code> (&amp;ldquo;long format&amp;rdquo;) flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ls -l
total &lt;span style="color:#ae81ff">48&lt;/span>
drwxr-xr-x &lt;span style="color:#ae81ff">6&lt;/span> dave staff &lt;span style="color:#ae81ff">192&lt;/span> Mar &lt;span style="color:#ae81ff">5&lt;/span> 16:01 1-navigating-the-command-line
drwxr-xr-x &lt;span style="color:#ae81ff">5&lt;/span> dave staff &lt;span style="color:#ae81ff">160&lt;/span> Oct &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> 2-clipboard-gymnastics
drwxr-xr-x &lt;span style="color:#ae81ff">4&lt;/span> dave staff &lt;span style="color:#ae81ff">128&lt;/span> Dec &lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> 3-getting-help
drwxr-xr-x &lt;span style="color:#ae81ff">3&lt;/span> dave staff &lt;span style="color:#ae81ff">96&lt;/span> Mar &lt;span style="color:#ae81ff">7&lt;/span> 15:39 4-moving-around
-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> dave staff &lt;span style="color:#ae81ff">1066&lt;/span> Jun &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> LICENSE
-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> dave staff &lt;span style="color:#ae81ff">561&lt;/span> Mar &lt;span style="color:#ae81ff">7&lt;/span> 15:30 README.md
-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> dave staff &lt;span style="color:#ae81ff">15707&lt;/span> Mar &lt;span style="color:#ae81ff">5&lt;/span> 16:01 sed.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can see the permissions, the link count (which is rarely particularly useful and varies from platform to platform), the owner, the group, the size and the modification date (as well as the name).&lt;/p>
&lt;p>We can make the sizes more human readable, and sort by size with a few more flags &lt;code>-h&lt;/code> (&amp;ldquo;human readable&amp;rdquo;) and &lt;code>-s&lt;/code> (&amp;ldquo;sort by size&amp;rdquo;):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ls -lhS
total &lt;span style="color:#ae81ff">48&lt;/span>
-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> dave staff 15K Mar &lt;span style="color:#ae81ff">5&lt;/span> 16:01 sed.1
-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> dave staff 1.0K Jun &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> LICENSE
-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> dave staff 561B Mar &lt;span style="color:#ae81ff">7&lt;/span> 15:30 README.md
drwxr-xr-x &lt;span style="color:#ae81ff">6&lt;/span> dave staff 192B Mar &lt;span style="color:#ae81ff">5&lt;/span> 16:01 1-navigating-the-command-line
drwxr-xr-x &lt;span style="color:#ae81ff">5&lt;/span> dave staff 160B Oct &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> 2-clipboard-gymnastics
drwxr-xr-x &lt;span style="color:#ae81ff">4&lt;/span> dave staff 128B Dec &lt;span style="color:#ae81ff">19&lt;/span> &lt;span style="color:#ae81ff">2017&lt;/span> 3-getting-help
drwxr-xr-x &lt;span style="color:#ae81ff">3&lt;/span> dave staff 96B Mar &lt;span style="color:#ae81ff">7&lt;/span> 15:39 4-moving-around
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are &lt;em>lot&lt;/em> of options for &lt;code>ls&lt;/code>. Check the chapter &lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Getting Help&lt;/a> for some tips on how to get more information on a command!&lt;/p>
&lt;h2 id="managing-the-directory-stack">Managing the Directory Stack&lt;/h2>
&lt;p>You might find that you want to move to a number of directories, then return to where you started. This can be particularly useful when scripting. You can use the &lt;code>pushd&lt;/code> (&amp;ldquo;push onto directory stack&amp;rdquo;) and &lt;code>popd&lt;/code> (&amp;ldquo;pop from directory stack&amp;rdquo;) commands to add or remove directories from the stack:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ pwd
/Users/dave/repos/github/dwmkerr/effective-shell
&lt;span style="color:#75715e"># OK - I&amp;#39;m writing my article at the moment, but want to check my downloads, and come back shortly...&lt;/span>
&lt;span style="color:#75715e"># Move to the downloads folder...&lt;/span>
$ ls
aws-nuke-v2.8.0-darwin-amd64
&lt;span style="color:#75715e"># OK cool - the tool I was downloading has arrived, let&amp;#39;s use it...&lt;/span>
cd aws-nuke-v2.8.0-darwin-amd64
./aws-nuke
&lt;span style="color:#75715e"># Now I want to go back to my article...&lt;/span>
$ popd
~/Downloads ~/repos/github/dwmkerr/effective-shell
~/Downloads
$ popd
~/repos/github/dwmkerr/effective-shell
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, using &lt;code>cd -&lt;/code> would not be sufficient — that would just switch us from the &lt;code>aws-nuke&lt;/code> folder to &lt;code>Downloads&lt;/code> and back again. But by using the &lt;em>directory stack&lt;/em> we can save where we are, move, and then &amp;lsquo;pop&amp;rsquo; our way back to where we started.&lt;/p>
&lt;h2 id="auto-completion">Auto-Completion&lt;/h2>
&lt;p>Pressing &lt;code>tab&lt;/code> when using commands like &lt;code>cd&lt;/code> will generally show an auto-completion menu:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ cd ~/repos/ &lt;span style="color:#75715e"># press &amp;#39;tab&amp;#39; now...&lt;/span>
github/ gitlab/ local/ scratch/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pressing tab again will cycle through options, and shift-tab will cycle backwards. Enter will select an option, escape (or Ctrl-C) will cancel.&lt;/p>
&lt;p>Some shells, such as &lt;code>zsh&lt;/code>, support even more advanced auto-completion. For example, we can auto-complete to fill in partially specified directory names:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">% cd ~/r/g/d/e &lt;span style="color:#75715e"># press tab now...&lt;/span>
% cd ~/repos/github/dwmkerr/effective-
effective-container-engineering/ effective-shell/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Auto-completion is generally &lt;em>very&lt;/em> shell specific. We'll look more into the different shells that are available in later chapters. But in general, if you are uncertain, pressing tab will often show a sensible set of options.&lt;/p>
&lt;h2 id="thats-it">That's It!&lt;/h2>
&lt;p>This is a small chapter, but an important one. Later on, as we start to do more file and system manipulation from the shell, moving and copying files and so on, we will build on these concepts. But it is critical to first know the basics of how to move around the filesystem with the shell.&lt;/p></description><category>CodeProject</category></item><item><title>Effective Shell Part 3: Getting Help</title><link>https://dwmkerr.com/effective-shell-part-3-getting-hepl/</link><pubDate>Tue, 19 Dec 2017 09:05:18 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-part-3-getting-hepl/</guid><description>&lt;p>This is the third part of my &lt;a href="https://github.com/dwmkerr/effective-shell">Effective Shell&lt;/a> series - practical examples of ways to be more efficient with everyday tasks in a shell.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this article I'll show you how to quickly get help when working with tools in the shell, without disrupting your flow!&lt;/p>
&lt;h2 id="getting-help-is-important">Getting Help is Important!&lt;/h2>
&lt;p>If you are trying to be more effective when using the shell, it is crucial to know how to quickly look things up.&lt;/p>
&lt;p>There'll be many circumstances where you'll need to open a browser to search for help, but there's also a wealth of information only a few keystrokes away. Looking up parameters, checking how to run commads, C library docs or useful information like ASCII charts are available directly in the system.&lt;/p>
&lt;p>Before we look at the standard way of accessing documentation on unix-like systems, which is the &lt;code>man&lt;/code> command, I'm going to introduce &lt;a href="https://github.com/tldr-pages/tldr">&lt;code>tldr&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Nine times out of ten I get the help I need in a few seconds with &lt;code>tldr&lt;/code>, so if you take only one thing away from the article, take the first section. Then if you want to learn more about the system manuals, read on!&lt;/p>
&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;p>Let's say I need to find and replace some text in a file. I know I can do this with the &lt;code>sed&lt;/code> command, but have forgotten the syntax.&lt;/p>
&lt;p>All I need to do is run &lt;code>tldr sed&lt;/code>:&lt;/p>
&lt;p>&lt;img src="images/tldr-sed.png" alt="tldr sed screenshot">&lt;/p>
&lt;p>The first example is exactly what I'm looking for. Now for any more detail than a few basic examples, I'm going to have to go to the manual, but it's overkill for the basics. Here's what &lt;code>man sed&lt;/code> shows me:&lt;/p>
&lt;p>&lt;img src="images/man-sed.png" alt="sed manpage">&lt;/p>
&lt;p>And this is just page one of six! There's a &lt;em>lot&lt;/em> of detail, which is great sometimes, but for a quick lookup, &lt;code>tldr&lt;/code> is perfect.&lt;/p>
&lt;p>You can install the &lt;a href="https://github.com/tldr-pages/tldr">&lt;code>tldr&lt;/code>&lt;/a> tool with &lt;code>npm install -g tldr&lt;/code>. It's open source and community maintained.&lt;/p>
&lt;p>Now a lot of the time, you are still going to need more help or more detail. For the rest of the article, we'll dive a bit deeper into &lt;code>man&lt;/code>, the system manual pages.&lt;/p>
&lt;h2 id="understanding-man">Understanding &amp;lsquo;man&amp;rsquo;&lt;/h2>
&lt;p>Most tools you encounter in the shell have manual pages available. Many people will be familiar with the &lt;code>man&lt;/code> command to get help on a tool, but let's take a look in a bit more detail, there's actually a lot more available than just the documentation for common commands.&lt;/p>
&lt;h3 id="getting-help-on-a-command">Getting help on a command&lt;/h3>
&lt;p>The most basic way to get help on a command is with &lt;code>man&lt;/code>. Here's an example:&lt;/p>
&lt;pre>&lt;code>$ man cp
CP(1) BSD General Commands Manual CP(1)
NAME
cp -- copy files
SYNOPSIS
cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_file
cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ...
target_directory
DESCRIPTION
In the first synopsis form, the cp utility copies the contents of the
source_file to the target_file. In the second synopsis form, the con-
tents of each named source_file is copied to the destination
target_directory. The names of the files themselves are not changed. If
cp detects an attempt to copy a file to itself, the copy will fail.
...
&lt;/code>&lt;/pre>&lt;p>The &lt;code>man&lt;/code> command opens the manual for the given tool. These manuals should contain all command line options and details of how to use the tool.&lt;/p>
&lt;p>You can scroll up and down through the content with the arrow keys, this is because the information is presented in the shell &lt;em>pager&lt;/em>, which is a tool for looking through content which might not easily fit on a screen.&lt;/p>
&lt;h3 id="using-the-pager">Using the pager&lt;/h3>
&lt;p>The first thing you might notice is that you can move through the manual pages with the arrow keys.&lt;/p>
&lt;p>Manpages are just text files, and &lt;code>man&lt;/code> opens them in a pager tool, which is what is providing the keyboard interface to look through the file.&lt;/p>
&lt;p>On most systems, the pager will be the &lt;code>less&lt;/code> program. There are lots of commands you can use to navigate through files with &lt;code>less&lt;/code>, but the bare essentials are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>d&lt;/code> - Scroll down half a page&lt;/li>
&lt;li>&lt;code>u&lt;/code> - Scroll up half a page&lt;/li>
&lt;li>&lt;code>j&lt;/code> / &lt;code>k&lt;/code> - Scroll down or up a line. You can also use the arrow keys for this&lt;/li>
&lt;li>&lt;code>q&lt;/code> - Quit&lt;/li>
&lt;li>&lt;code>/&amp;lt;search&amp;gt;&lt;/code> - Search for text&lt;/li>
&lt;li>&lt;code>n&lt;/code> - When searching, find the next occurrence&lt;/li>
&lt;li>&lt;code>N&lt;/code> - When searching, find the previous occurrence&lt;/li>
&lt;/ul>
&lt;p>There are &lt;em>many&lt;/em> other commands, but the set above is normally what I find myself using the most.&lt;/p>
&lt;p>If you are interested, you can actually see what your pager is with the command below:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ echo $PAGER
less
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>$PAGER&lt;/code> environment variable is used to tell the shell what program to use for paging. More details are found with &lt;code>man man&lt;/code>.&lt;/p>
&lt;p>You can put any text content into your pager - try this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ls -al /usr/bin | less
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This lists the contents of the &lt;code>/usr/bin&lt;/code> folder, piping the output to &lt;code>less&lt;/code> so we can easily scroll through it.&lt;/p>
&lt;p>There are alternative pagers available (on many Unix-y systems you'll have &lt;code>less&lt;/code>, &lt;code>more&lt;/code> and &lt;code>most&lt;/code>) but in general you'll normally get what you need with &lt;code>less&lt;/code>.&lt;/p>
&lt;h3 id="whats-with-the-numbers">What's with the numbers?&lt;/h3>
&lt;p>You'll often see tools referred to in manpages with numbers after them. Take a look at &lt;code>man less&lt;/code>:&lt;/p>
&lt;p>&lt;img src="images/numbers.png" alt="Screenshot of numbers">&lt;/p>
&lt;p>The number is the manual &lt;strong>Section Number&lt;/strong>. The different sections of the manual are documented be found on most unix-like systems in &lt;code>man&lt;/code>'s documentation, which you can check by running &lt;code>man man&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Here's what you'd get on Ubuntu 16:&lt;/p>
&lt;p>| 1 | Executable programs or shell commands |
| 2 | System calls (functions provided by the kernel) |
| 3 | Library calls (functions within program libraries) |
| 4 | Special files (usually found in /dev) |
| 5 | File formats and conventions eg /etc/passwd |
| 6 | Games |
| 7 | Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7) |
| 8 | System administration commands (usually only for root) |
| 9 | Kernel routines [Non standard] |&lt;/p>
&lt;p>We'll go through the setions in detail shorltly.&lt;/p>
&lt;p>You can specifically choose &lt;em>which&lt;/em> section of the manual you are looking in by using:&lt;/p>
&lt;pre>&lt;code>man &amp;lt;section&amp;gt; &amp;lt;search&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You can also get more information about the sections themselves by opening up the &lt;code>intro&lt;/code> page. For example:&lt;/p>
&lt;pre>&lt;code>$ man 1 intro
INTRO(1) BSD General Commands Manual INTRO(1)
NAME
intro -- introduction to general commands (tools and utilities)
DESCRIPTION
Section one of the manual contains most of the commands which comprise...
&lt;/code>&lt;/pre>&lt;p>Why would you do this, and why would you care? A few examples from each section show how this can be quite useful to know about.&lt;/p>
&lt;h4 id="section-1-programs-and-shell-commands">Section 1: Programs and Shell Commands&lt;/h4>
&lt;p>These are programs, probably what you are going to be looking up most regularly! For example, &lt;code>man 1 time&lt;/code> shows:&lt;/p>
&lt;pre>&lt;code>TIME(1) BSD General Commands Manual TIME(1)
NAME
time -- time command execution
SYNOPSIS
time [-lp] utility
DESCRIPTION
The time utility executes and times utility. After the utility finishes, time writes the total time
elapsed, the time consumed by system overhead, and the time used to execute utility to the standard
error stream. Times are reported in seconds.
...
&lt;/code>&lt;/pre>&lt;h4 id="section-2-system-calls">Section 2: System Calls&lt;/h4>
&lt;p>You'll probably not use this section unless you are doing systems programming&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. This section contains info on the avaiable Linux Kernel system calls. For example, running &lt;code>man 2 chown&lt;/code> gives:&lt;/p>
&lt;pre>&lt;code>CHOWN(2) BSD System Calls Manual CHOWN(2)
NAME
chown, fchown, lchown, fchownat -- change owner and group of a file
SYNOPSIS
#include &amp;lt;unistd.h&amp;gt;
int
chown(const char *path, uid_t owner, gid_t group);
...
&lt;/code>&lt;/pre>&lt;h4 id="section-3-library-calls">Section 3: Library Calls&lt;/h4>
&lt;p>These are the manpages for the C standard library functions. For example, &lt;code>man 3 time&lt;/code>:&lt;/p>
&lt;pre>&lt;code>TIME(3) BSD Library Functions Manual TIME(3)
NAME
time -- get time of day
LIBRARY
Standard C Library (libc, -lc)
SYNOPSIS
#include &amp;lt;time.h&amp;gt;
time_t
time(time_t *tloc);
...
&lt;/code>&lt;/pre>&lt;p>Here we can see why the sections are important to know about.&lt;/p>
&lt;p>Running &lt;code>man time&lt;/code> would &lt;em>not&lt;/em> open the page above, because &lt;code>man&lt;/code> searches the library in ascending section order, meaning that it actually finds &lt;code>time(1)&lt;/code> and shows the pages for the &lt;code>time&lt;/code> program, not the &lt;code>time&lt;/code> C library call.&lt;/p>
&lt;p>Because of the potential ambiguity of names if no section number is included, in lots of Linux documentation you'll see the man section number written next to library calls, system calls, programs and so on (things will refer to &lt;code>sed(1)&lt;/code> or &lt;code>time(3)&lt;/code> for example.&lt;/p>
&lt;h4 id="section-4-devices">Section 4: Devices&lt;/h4>
&lt;p>This section deals with the special devices which live in the &lt;code>/dev/*&lt;/code> folder. For example, running &lt;code>man 4 random&lt;/code> shows:&lt;/p>
&lt;pre>&lt;code>RANDOM(4) BSD Kernel Interfaces Manual RANDOM(4)
NAME
random , urandom -- random data source devices.
SYNOPSIS
pseudo-device random
DESCRIPTION
The random device produces uniformly distributed random byte values of
potentially high quality.
...
&lt;/code>&lt;/pre>&lt;p>Again, we see that section numbers can be important. If you just run &lt;code>man random&lt;/code>, you'll see:&lt;/p>
&lt;pre>&lt;code>RANDOM(3) BSD Library Functions Manual RANDOM(3)
NAME
initstate, random, setstate, srandom, srandomdev -- better random num-
ber generator; routines for changing generators
LIBRARY
Standard C Library (libc, -lc)
SYNOPSIS
#include &amp;lt;stdlib.h&amp;gt;
char *
initstate(unsigned seed, char *state, size_t size);
long
random(void);
...
&lt;/code>&lt;/pre>&lt;p>Which is the manpage for &lt;code>random(3)&lt;/code>, which is C library function, not the &lt;code>/dev/random&lt;/code> file!&lt;/p>
&lt;h4 id="section-5-file-formats">Section 5: File Formats&lt;/h4>
&lt;p>This section details special files in the system. For example, &lt;code>man 5 crontab&lt;/code> shows:&lt;/p>
&lt;pre>&lt;code>CRONTAB(5) BSD File Formats Manual CRONTAB(5)
NAME
crontab -- tables for driving cron
DESCRIPTION
A crontab file contains instructions to the cron(8) daemon of the gen-
eral form: ``run this command at this time on this date''. Each user
has their own crontab, and commands in any given crontab will be exe-
cuted as the user who owns the crontab. Uucp and News will usually
have their own crontabs, eliminating the need for explicitly running
su(1) as part of a cron command.
...
&lt;/code>&lt;/pre>&lt;p>Which describes the crontab file used to define scheduled tasks. Again, this is different to &lt;code>man crontab&lt;/code> which would document &lt;code>crontab(1)&lt;/code>. Similarly, &lt;code>man 5 passwd&lt;/code> is going to show something quite different to &lt;code>man passwd&lt;/code>.&lt;/p>
&lt;h4 id="section-6-games">Section 6: Games&lt;/h4>
&lt;p>Nothing says it better than &lt;code>man 6 intro&lt;/code> itself (this'll not work on a Mac sadly, but try it on another Linux system):&lt;/p>
&lt;pre>&lt;code>...
DESCRIPTION
Section 6 of the manual describes all the games and funny little programs available on the system.
...
&lt;/code>&lt;/pre>&lt;p>There are probably a few silly programs available on your system, here you'll find their manuals. For example, &lt;code>man 6 banner&lt;/code> on a Mac shows:&lt;/p>
&lt;pre>&lt;code>BANNER(6) BSD Games Manual BANNER(6)
NAME
banner -- print large banner on printer
SYNOPSIS
banner [-d] [-t] [-w width] message ...
DESCRIPTION
Banner prints a large, high quality banner on the standard output. If
the message is omitted, it prompts for and reads one line of its stan-
dard input.
...
&lt;/code>&lt;/pre>&lt;p>This section is going to be highly dependent on your OS!&lt;/p>
&lt;h4 id="section-7-miscellaneous">Section 7: Miscellaneous&lt;/h4>
&lt;p>This is where you'll find additional assorted documentation. For example, &lt;code>man 7 ascii&lt;/code> shows:&lt;/p>
&lt;pre>&lt;code>ASCII(7) BSD Miscellaneous Information Manual ASCII(7)
NAME
ascii -- octal, hexadecimal and decimal ASCII character sets
DESCRIPTION
The octal set:
000 nul 001 soh 002 stx 003 etx 004 eot 005 enq 006 ack 007 bel
...
&lt;/code>&lt;/pre>&lt;h4 id="section-8-system-commands">Section 8: System Commands&lt;/h4>
&lt;p>We've actually already seen one of these commands mentioned, in the manpage for &lt;code>crontab(5)&lt;/code> it mentions &lt;code>cron(8)&lt;/code>. Let's see, with &lt;code>man 8 cron&lt;/code>:&lt;/p>
&lt;pre>&lt;code>CRON(8) BSD System Manager's Manual CRON(8)
NAME
cron -- daemon to execute scheduled commands (Vixie Cron)
SYNOPSIS
cron [-s] [-o] [-x debugflag[,...]]
&lt;/code>&lt;/pre>&lt;p>These are commands which sysadmins would normally run. You might open section eight unexpectedly, for example &lt;code>man chmod&lt;/code> will open &lt;code>chmod(1)&lt;/code>, but &lt;code>man chown&lt;/code> will open &lt;code>chown(8)&lt;/code>, as it is a system command.&lt;/p>
&lt;p>Some distributions might vary for Section Nine. On my Mac it contains information about the kernel interfaces, a C style guide and some more.&lt;/p>
&lt;h4 id="getting-the-index-of-manual-section">Getting the Index of Manual Section&lt;/h4>
&lt;p>Manpages are just files on the filesystem, so you can get the index of a section just by looking in the appropriate folder.&lt;/p>
&lt;p>For example, to index the available system calls, try &lt;code>ls /usr/share/man/man2&lt;/code>:&lt;/p>
&lt;pre>&lt;code>EV_SET.2
FD_CLR.2
FD_COPY.2
FD_ISSET.2
FD_SET.2
FD_ZERO.2
_exit.2
accept.2
access.2
acct.2
...
&lt;/code>&lt;/pre>&lt;p>This is quick and easy way to see what sort of entries you have on your system. If you want to work out where an entry lives, use the &lt;code>-w&lt;/code> flag:&lt;/p>
&lt;pre>&lt;code>$ man -w printf
/usr/share/man/man1/printf.1
&lt;/code>&lt;/pre>&lt;h3 id="searching-the-manual">Searching the Manual&lt;/h3>
&lt;p>You can search the manpage titles and summaries with &lt;code>man -k&lt;/code>. For example, &lt;code>man -k cpu&lt;/code> shows:&lt;/p>
&lt;pre>&lt;code>cpuwalk.d(1m) - Measure which CPUs a process runs on. Uses DTrace
dispqlen.d(1m) - dispatcher queue length by CPU. Uses DTrace
gasm(n), grammar::me::cpu::gasm(n) - ME assembler
&lt;/code>&lt;/pre>&lt;p>You can find more advanced options for searching by using your newfound &lt;code>man&lt;/code> skills on &lt;code>man&lt;/code> itself.&lt;/p>
&lt;h2 id="thats-enough">That's Enough!&lt;/h2>
&lt;p>I'd recommend &lt;code>tldr&lt;/code> as a first-call for checking to see how to use a command.&lt;/p>
&lt;p>&lt;code>man&lt;/code> is a powerful tool to dive deeper into how programs and components of the system work. Like many tools which have been around for a long time, there's a lot you can do with &lt;code>man&lt;/code>. Much of it you'll likely never need, so I've tried to keep this article to the basics.&lt;/p>
&lt;p>Understanding manpage sections is useful - you'll see them referenced again and again in documentation on the system and online.&lt;/p>
&lt;p>I hope this helps you save some time when you are working! Please let me know in the comments if you have any questions or thoughts.&lt;/p>
&lt;p>You can also check out the &lt;a href="https://github.com/dwmkerr/effective-shell">rest of the effective shell series&lt;/a>.&lt;/p>
&lt;h2 id="appendix-dash">Appendix: Dash&lt;/h2>
&lt;p>As a final note, if you find yourself using &lt;code>man&lt;/code> a lot because you work offline (I fly a lot so find it very helpful when on a plane with no WiFi), you should also look at &lt;em>Dash&lt;/em>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Dash is simply an offline documentation aggregator. It can download online manuals for many, many different programming languages, frameworks, technologies and so on. I actually have a &lt;code>vim&lt;/code> keyboard command to open the word under the cursor in dash, with the documentation automatically set based on the type of the file.&lt;/p>
&lt;p>This is super-useful if you are offline at lot and need more sophisticated offline documentation. You can find out more about it at &lt;a href="https://kapeli.com/dash">https://kapeli.com/dash&lt;/a>.&lt;/p>
&lt;h2 id="footnotes">Footnotes&lt;/h2>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Weirdly satisfying to run. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Which it is always fun to try if you get the chance, and a great way to learn more about the fundamentals of the operating system. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Dash is a paid product. Full disclosure - I don't get any money from them or anyone else to write about anything, all content is 100% based on my experiences. I don't run ads on my site either. &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Effective Shell Part 2: Become a Clipboard Gymnast</title><link>https://dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/</link><pubDate>Tue, 10 Oct 2017 09:57:54 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/</guid><description>&lt;p>This is the second part of my &lt;a href="https://github.com/dwmkerr/effective-shell">Effective Shell&lt;/a> series, which contains practical tips for using the shell to help with every day tasks and be more efficient:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this article I'll show you how you can use the shell as an efficient tool to compliment how you use the clipboard.&lt;/p>
&lt;p>&lt;em>Note for Linux Users: In this article I'll use the &lt;code>pbcopy&lt;/code> and &lt;code>pbpaste&lt;/code> commands to access the clipboard, which are available on a Mac only. To get access to the same commands on other platforms, check &lt;a href="#appendixclipboardaccessonlinux">Appendix: Clipboard Access on Linux&lt;/a>&lt;/em>.&lt;/p>
&lt;h2 id="use-the-shell-on-the-clipboard">Use the Shell on the Clipboard&lt;/h2>
&lt;p>You can easily use shell commands on the contents of your clipboard. Just use &lt;code>pbpaste&lt;/code> to output the clipboard, run the output through some commands, then use &lt;code>pbcopy&lt;/code> to copy the result.&lt;/p>
&lt;p>Try copying the following text:&lt;/p>
&lt;pre>&lt;code>Kirk Van Houten
Timothy Lovejoy
Artie Ziff
&lt;/code>&lt;/pre>&lt;p>Then in the shell, run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pbpaste
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see the contents of the clipboard. Now we'll look at some ways that shell access to the clipboard can help with common tasks.&lt;/p>
&lt;h2 id="removing-formatting">Removing Formatting&lt;/h2>
&lt;p>Don't you hate it when you have to copy formatted text and don't have an easy way to paste it as &lt;em>unformatted&lt;/em> text? Here's an example, I want to copy this Wikipedia page on &amp;lsquo;bash&amp;rsquo;, and paste it into a Word document:&lt;/p>
&lt;p>&lt;img src="images/strip-formatting-before.png" alt="Copying and pasting with formatting">&lt;/p>
&lt;p>Many programs have a shortcut to paste the contents of the clipboard (such as &amp;lsquo;command + shift + v&amp;rsquo;) but if you are like me you might find yourself pasting &lt;em>into&lt;/em> a plain text editor just to copy &lt;em>out&lt;/em> the plain text.&lt;/p>
&lt;p>If you just run the command &lt;code>pbpaste | pbcopy&lt;/code>, you can easily strip the formatting:&lt;/p>
&lt;p>&lt;img src="images/strip-formatting-after-2.png" alt="Stripping formatting from the clipboard">&lt;/p>
&lt;p>We're just piping out the clipboard (which ends up as plain text, cause we're in a terminal!) and then piping that plain text &lt;em>back into the clipboard&lt;/em>, replacing the formatted text which was there before.&lt;/p>
&lt;p>This little trick can be very useful. But we can use the same pattern to quickly manipulate the contents of the clipboard in more sophisticated ways.&lt;/p>
&lt;h2 id="manipulating-text">Manipulating Text&lt;/h2>
&lt;p>Let's say someone has emailed me a list of people I need to invite to an event:&lt;/p>
&lt;p>&lt;img src="images/email_list_excel.png" alt="Email List">&lt;/p>
&lt;p>The problem is:&lt;/p>
&lt;ol>
&lt;li>The list is in Excel and is formatted&lt;/li>
&lt;li>The list has duplicates&lt;/li>
&lt;li>I need to turn each name into an email address like &lt;a href="mailto:'Artie_Ziff@simpsons.com">'Artie_Ziff@simpsons.com&lt;/a>&amp;rsquo;&lt;/li>
&lt;/ol>
&lt;p>And I want to email everyone quickly.&lt;/p>
&lt;p>We can quickly handle this task without leaving the shell.&lt;/p>
&lt;p>Copy the raw text below if you want to try out the same commands and follow along:&lt;/p>
&lt;pre>&lt;code>Artie Ziff
Kirk Van Houten
Timothy Lovejoy
Artie Ziff
Nick Riviera
Seymore Skinner
Hank Scorpio
Timothy Lovejoy
John Frink
Cletus Spuckler
Ruth Powers
Artie Ziff
Agnes Skinner
Helen Lovejoy
&lt;/code>&lt;/pre>&lt;p>First, we copy the text to the clipboard.&lt;/p>
&lt;p>Now we can paste and sort:&lt;/p>
&lt;pre>&lt;code>$ pbpaste | sort
Agnes Skinner
Artie Ziff
Artie Ziff
Artie Ziff
Cletus Spuckler
Hank Scorpio
Helen Lovejoy
John Frink
Kirk Van Houten
Nick Riviera
Ruth Powers
Seymore Skinner
Timothy Lovejoy
Timothy Lovejoy
&lt;/code>&lt;/pre>&lt;p>Then remove the duplicates:&lt;/p>
&lt;pre>&lt;code>$ pbpaste | sort | uniq
Agnes Skinner
Artie Ziff
Cletus Spuckler
Hank Scorpio
Helen Lovejoy
John Frink
Kirk Van Houten
Nick Riviera
Ruth Powers
Seymore Skinner
Timothy Lovejoy
&lt;/code>&lt;/pre>&lt;p>Replace the underscore with an ampersand:&lt;/p>
&lt;pre>&lt;code>$ pbpaste | sort | uniq | tr &amp;quot; &amp;quot; &amp;quot;_&amp;quot;
Agnes_Skinner
Artie_Ziff
Cletus_Spuckler
Hank_Scorpio
Helen_Lovejoy
John_Frink
Kirk_Van_Houten
Nick_Riviera
Ruth_Powers
Seymore_Skinner
Timothy_Lovejoy
&lt;/code>&lt;/pre>&lt;p>Then add the final part of the email address:&lt;/p>
&lt;pre>&lt;code>$ pbpaste | sort | uniq | tr &amp;quot; &amp;quot; &amp;quot;_&amp;quot; | sed 's/$/@simpsons.com/'
Agnes_Skinner@simpsons.com
Artie_Ziff@simpsons.com
Cletus_Spuckler@simpsons.com
Hank_Scorpio@simpsons.com
Helen_Lovejoy@simpsons.com
John_Frink@simpsons.com
Kirk_Van_Houten@simpsons.com
Nick_Riviera@simpsons.com
Ruth_Powers@simpsons.com
Seymore_Skinner@simpsons.com
Timothy_Lovejoy@simpsons.com
&lt;/code>&lt;/pre>&lt;p>This looks perfect! We can now put the transformed text back onto the clipboard:&lt;/p>
&lt;pre>&lt;code>$ pbpaste | sort | uniq | tr ' ' '_' | sed 's/$/@simpsons.com' | pbcopy
&lt;/code>&lt;/pre>&lt;p>All in all we have the following pipeline:&lt;/p>
&lt;ol>
&lt;li>&lt;code>pbpaste&lt;/code> - output the clipboard&lt;/li>
&lt;li>&lt;code>sort&lt;/code> - order the output&lt;/li>
&lt;li>&lt;code>uniq&lt;/code> - deduplicate the rows&lt;/li>
&lt;li>&lt;code>tr ' ' '_'&lt;/code> - replace spaces with underscores&lt;/li>
&lt;li>&lt;code>sed /$/@simpsons.com&lt;/code> - add the email domain to the end of the row&lt;/li>
&lt;/ol>
&lt;p>Building this in one go is hard, let's look at little more at the pipeline.&lt;/p>
&lt;h2 id="thinking-in-pipelines">Thinking in Pipelines&lt;/h2>
&lt;p>Some of these commands might be unfamiliar, some might not make sense, and you might be thinking &amp;lsquo;how would I remember that&amp;rsquo;. Actually, there are many ways to solve the problem above, this is the one I came up with by &lt;em>iteratively&lt;/em> changing my input text.&lt;/p>
&lt;p>Here's what I mean - you'll see that I actually build a pipeline like this step-by-step:&lt;/p>
&lt;p>&lt;img src="images/pipeline.gif" alt="Animation of the process of building a pipeline">&lt;/p>
&lt;p>You can see in the screenshots that I start simple, and step by step add the stages we need.&lt;/p>
&lt;p>(P.S - if you are wondering how I am jumping backwards and forwards a word at a time, check the last chapter &amp;lsquo;&lt;a href="www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Navigating the Command Line&lt;/a>').&lt;/p>
&lt;p>What we're doing here is only possible because these simple commands all follow &amp;lsquo;the Unix Philosophy&amp;rsquo;. They do one thing well, and each command expects it's input to become the input of &lt;em>another&lt;/em> command later on. Specifically:&lt;/p>
&lt;ol>
&lt;li>The commands are primitive and simple - &lt;code>sort&lt;/code> is sorting a list, &lt;code>uniq&lt;/code> is making elements unique.&lt;/li>
&lt;li>The commands don't produce unnecessary output - &lt;code>sort&lt;/code> doesn't add a header such as &lt;code>Sorted Items&lt;/code>, which is great because otherwise it would clutter our pipeline.&lt;/li>
&lt;li>We are chaining commands together, the output of one becomes the input of another.&lt;/li>
&lt;/ol>
&lt;p>We don't need a command such as &amp;lsquo;Take a muddy list, sort and clean it, then turn pairs of words into an email address&amp;rsquo; - with a few simple &amp;lsquo;workhorse&amp;rsquo; commands we can easily build this functionality ourselves.&lt;/p>
&lt;p>These workhorse commands will be introduced and detailed as we go through the series. We'll also spend a lot more time looking at pipelines.&lt;/p>
&lt;p>I hope this was useful! Please comment if you have any questions or tips. To see further articles as they come out, follow the repo at:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/effective-shell">github.com/dwmkerr/effective-shell&lt;/a>&lt;/p>
&lt;p>Or just follow &lt;a href="https://twitter.com/dwmkerr">@dwmkerr&lt;/a> on Twitter.&lt;/p>
&lt;h1 id="appendix---clipboard-access-on-linux">Appendix - Clipboard Access on Linux&lt;/h1>
&lt;p>If you are using Linux, there is no &lt;code>pbcopy&lt;/code> and &lt;code>pbpaste&lt;/code> commands. You can use the &lt;a href="https://linux.die.net/man/1/xclip">&lt;code>xclip&lt;/code>&lt;/a> tool to create equivalent commands.&lt;/p>
&lt;p>First, install &lt;code>xclip&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install -y xclip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then add the following to your &lt;code>.bashrc&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># Create mac style aliases for clipboard access.&lt;/span>
alias pbcopy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;xclip -selection c&amp;#34;&lt;/span>
alias pbpaste&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;xclip -selection c -o&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Obviously you can use any alias you like! The article assumes that &lt;code>pbcopy&lt;/code> and &lt;code>pbpaste&lt;/code> have been used.&lt;/p></description><category>CodeProject</category></item><item><title>Effective Shell Part 1: Navigating the Command Line</title><link>https://dwmkerr.com/effective-shell-part-1-navigating-the-command-line/</link><pubDate>Sun, 11 Jun 2017 23:05:40 +0000</pubDate><guid>https://dwmkerr.com/effective-shell-part-1-navigating-the-command-line/</guid><description>&lt;p>This is the &lt;a href="https://github.com/dwmkerr/effective-shell">first part of a series&lt;/a> I am writing which contains practical tips for using the shell more effectively.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://www.dwmkerr.com/effective-shell-part-1-navigating-the-command-line/">Part 1: Navigating the Command Line&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-2-become-a-clipboard-gymnast/">Part 2: Become a Clipboard Gymnast&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.dwmkerr.com/effective-shell-part-3-getting-hepl/">Part 3: Getting Help&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-4-moving-around/">Part 4: Moving Around&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-part-5-understanding-the-shell/">Part 5: Interlude - Understanding the Shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-6-job-control/">Part 6: Everything You Don't Need to Know About Job Control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dwmkerr.com/effective-shell-7-shell-commands/">Part 7: The Subtleties of Shell Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I can't think of a better place to start than &lt;em>navigating the command line&lt;/em>. As you start to do more and more in the shell, text in the command line can quickly become hard to handle. In this article I'll show some simple tricks for working with the command line more effectively.&lt;/p>
&lt;p>Here's a quick reference diagram, the rest of the article goes into the details!&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/effective-shell">&lt;img src="images/command-line-3.png" alt="command line">&lt;/a>&lt;/p>
&lt;p>This article, examples and diagrams are available at &lt;a href="https://github.com/dwmkerr/effective-shell">github.com/dwmkerr/effective-shell&lt;/a>.&lt;/p>
&lt;!-- TOC depthFrom:2 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 -->
&lt;ul>
&lt;li>&lt;a href="#basicnavigation">Basic Navigation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#searching">Searching&lt;/a>&lt;/li>
&lt;li>&lt;a href="#editinginplace">Editing In-Place&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clearthescreen">Clear the Screen&lt;/a>&lt;/li>
&lt;li>&lt;a href="#protipallthekeys">Pro Tip: All The Keys!&lt;/a>&lt;/li>
&lt;li>&lt;a href="#protiptransposing">Pro Tip: Transposing!&lt;/a>&lt;/li>
&lt;li>&lt;a href="#closingthoughts">Closing Thoughts&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- /TOC -->
&lt;h2 id="basic-navigation">Basic Navigation&lt;/h2>
&lt;p>Let's assume we have a very simple command we are writing, which is going to write a quote to a text file:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">echo &lt;span style="color:#e6db74">&amp;#34;The trouble with writing fiction is that it has to make sense,
&lt;/span>&lt;span style="color:#e6db74">whereas real life doesn&amp;#39;t. -- Iain M. Banks&amp;#34;&lt;/span> &amp;gt;&amp;gt; quote.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Navigating around long lines of text is a slow process if you are only relying on the arrow keys, so take the time to learn the following shortcuts:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Action&lt;/th>
&lt;th>Shortcut&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Go to beginning / end&lt;/td>
&lt;td>&lt;p>&lt;code>Ctrl + a&lt;/code>, &lt;code>Ctrl + e&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/begin-end.gif" target="_blank">&lt;img src="images/begin-end.gif" alt="begin / end" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Go backwards / forwards one word&lt;/td>
&lt;td>&lt;code>Alt + b&lt;/code> / &lt;code>Alt + f&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/forward-backwards.gif" target="_blank">&lt;img src="images/forward-backwards.gif" alt="backward / forward" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delete a word / undo&lt;/td>
&lt;td>&lt;code>Ctrl + w&lt;/code> / &lt;code>Ctrl + -&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/delete-undo.gif" target="_blank">&lt;img src="images/delete-undo.gif" alt="delete / undo" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delete next word&lt;/td>
&lt;td>&lt;code>Alt + d&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/delete-next-word.gif" target="_blank">&lt;img src="images/delete-next-word.gif" alt="delete next word" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delete all the way to the beginning[^1]&lt;/td>
&lt;td>&lt;code>Ctrl + u&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/delete-to-beginning.gif" target="_blank">&lt;img src="images/delete-to-beginning.gif" alt="delete to beginning" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Delete all the way to the end&lt;/td>
&lt;td>&lt;code>Ctrl + k&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/delete-to-end.gif" target="_blank">&lt;img src="images/delete-to-end.gif" alt="delete to end" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>&lt;/tbody>&lt;/table>
&lt;p>Note that if you are on a Mac, you might need to tweak your console to allow the &amp;lsquo;Alt&amp;rsquo; key to work.&lt;/p>
&lt;p>For iTerm2, go to settings (Command + ,) &amp;gt; Profiles Tab &amp;gt; select the profile you are using &amp;gt; Keys tab. There, you should see Left Option key and Right Option Key with three radio buttons. Select &amp;ldquo;Esc+&amp;rdquo; for the Left Option Key.&lt;/p>
&lt;p>For Terminal, go to Profiles Tab &amp;gt; Keyboard Tab &amp;gt; check &amp;ldquo;Use Option as Meta key&amp;rdquo; at the bottom of the screen.&lt;/p>
&lt;h2 id="searching">Searching&lt;/h2>
&lt;p>Once you have the basic navigation commands down, the next essential is searching. Let's assume we've run the following three commands:&lt;/p>
&lt;pre>&lt;code>$ command1 param1 param2 param3
$ command2 param4 param5 param6
$ command3 param7 param8 param9
&lt;/code>&lt;/pre>&lt;p>You can search backwards or forwards with &lt;code>Ctrl + r&lt;/code> and &lt;code>Ctrl + s&lt;/code>. This will search in the current command and then iteratively through previous commands:&lt;/p>
&lt;p>&lt;img src="images/search-backwards-and-forwards.gif" alt="search backwards and forwards">&lt;/p>
&lt;p>This is useful for searching in the current command, but can be also used to quickly search backwards and forwards through the command history:&lt;/p>
&lt;p>&lt;img src="images/search-commands-backwards-and-forwards-1.gif" alt="search commands backwards and forwards">&lt;/p>
&lt;p>As you type, your command history is searched, the most recent commands coming first. Use the arrow keys to edit the command, press enter to execute it, or &lt;code>Ctrl + g&lt;/code> to cancel the search.&lt;/p>
&lt;p>Here are the same commands applied to the original example:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Action&lt;/th>
&lt;th>Shortcut&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Search backwards / forwards&lt;/td>
&lt;td>&lt;code>Ctrl + r&lt;/code> / Ctrl + s&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/search-history-next.gif" target="_blank">&lt;img src="images/search-history-next.gif" alt="find next occurrence" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Run the command&lt;/td>
&lt;td>&lt;code>Enter&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/search-history-execute.gif" target="_blank">&lt;img src="images/search-history-execute.gif" alt="execute" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Edit the command&lt;/td>
&lt;td>&lt;code>Right Arrow&lt;/code> / &lt;code>Right Arrow&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/search-history-edit.gif" target="_blank">&lt;img src="images/search-history-edit.gif" alt="edit command" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stop searching&lt;/td>
&lt;td>&lt;code>Ctrl + g&lt;/code>&lt;/td>
&lt;td>&lt;a href="images/search-history-cancel.gif" target="_blank">&lt;img src="images/search-history-cancel.gif" alt="cancel search" style="max-width:100%;">&lt;/a>&lt;/td>
&lt;/tr>&lt;/tbody>&lt;/table>
&lt;h2 id="editing-in-place">Editing In-Place&lt;/h2>
&lt;p>These tips and tricks are helpful, but if you are working with a really long or complex command, you might find it useful just to jump into your favourite editor.&lt;/p>
&lt;p>Use &lt;code>Ctrl + x , Ctrl + e&lt;/code> to edit-in place:&lt;/p>
&lt;p>&lt;img src="images/edit-in-place.gif" alt="edit in place">&lt;/p>
&lt;p>In a later article I'll talk a little more about how to configure the default editor.&lt;/p>
&lt;h2 id="clear-the-screen">Clear the Screen&lt;/h2>
&lt;p>Probably the shortcut I use the most is &lt;code>Ctrl + l&lt;/code>, which clears the screen without trashing your current command. Here's how it looks:&lt;/p>
&lt;p>&lt;img src="images/clear-screen-2.gif" alt="clear screen">&lt;/p>
&lt;h2 id="pro-tip-all-the-keys">Pro Tip: All The Keys!&lt;/h2>
&lt;p>You can use the &lt;code>bindkey&lt;/code> command to see a list of all keyboard shortcuts:&lt;/p>
&lt;pre>&lt;code>$ bindkey
&amp;quot;^@&amp;quot; set-mark-command
&amp;quot;^A&amp;quot; beginning-of-line
&amp;quot;^B&amp;quot; backward-char
&amp;quot;^D&amp;quot; delete-char-or-list
&amp;quot;^E&amp;quot; end-of-line
&amp;quot;^F&amp;quot; forward-char
&amp;quot;^G&amp;quot; send-break
&amp;quot;^H&amp;quot; backward-delete-char
&amp;quot;^I&amp;quot; expand-or-complete
&amp;quot;^J&amp;quot; accept-line
&amp;quot;^K&amp;quot; kill-line
&amp;quot;^L&amp;quot; clear-screen
...
&lt;/code>&lt;/pre>&lt;p>This is an extremely useful command to use if you forget the specific keyboard shortcuts, or just want to see the shortcuts which are available.&lt;/p>
&lt;h2 id="pro-tip-transposing">Pro Tip: Transposing!&lt;/h2>
&lt;p>If you've mastered all of the commands here and feel like adding something else to your repertoire, try this:&lt;/p>
&lt;p>&lt;img src="images/transpose-word.gif" alt="transpose-word">&lt;/p>
&lt;p>The &lt;code>Alt + t&lt;/code> shortcut will transpose the last two words. Use &lt;code>Ctrl + t&lt;/code> to transpose the last two letters:&lt;/p>
&lt;p>&lt;img src="images/transpose-letters.gif" alt="transpose-letters">&lt;/p>
&lt;p>These were new to me when I was researching for this article. I can't see myself ever being able to remember the commands more quickly than just deleting the last two words or characters and re-typing them, but there you go!&lt;/p>
&lt;h2 id="closing-thoughts">Closing Thoughts&lt;/h2>
&lt;p>If you are ever looking to go deeper, then search the web for &lt;em>GNU Readline&lt;/em>, which is the library used under the hood to handle the command line in many shells. You can actually configure lower level details of how all shells which use readline work, with the &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html">&lt;code>.inputrc&lt;/code>&lt;/a> configuration file.&lt;/p>
&lt;p>The great thing about learning these shortcuts is that they will work in any prompt which uses GNU Readline. This means everything you've learnt applies to:&lt;/p>
&lt;ol>
&lt;li>Bash&lt;/li>
&lt;li>zsh&lt;/li>
&lt;li>The Python REPL&lt;/li>
&lt;li>The Node.js REPL&lt;/li>
&lt;/ol>
&lt;p>And probably a whole bunch more&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>All of these shortcuts should be familiar to Emacs users. There is in fact a &amp;lsquo;Vi Mode&amp;rsquo; option for readline, which allows you to use vi commands to work with text. You can enter this mode with &lt;code>set -o vi&lt;/code>, I'll likely come back to this in detail in a later article.&lt;/p>
&lt;p>There's a great cheat sheet on emacs readline commands at &lt;a href="http://readline.kablamo.org/emacs.html">readline.kablamo.org/emacs&lt;/a>, which is a very useful reference if you want to dig deeper. For this article I've tried to focus on what I think are the most useful commands (and transpose just so you can show off!).&lt;/p>
&lt;p>Hope that was useful! GIFs were made with &lt;a href="http://www.cockos.com/licecap/">LICEcap&lt;/a>.&lt;/p>
&lt;hr>
&lt;h4 id="footnotes">Footnotes&lt;/h4>
&lt;h4 id="references">References&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/GNU_Readline">Wikipedia: GNU Readline&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html">GNU Org: Readline Init File&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://readline.kablamo.org/emacs.html">Kablamo.org: Readline Cheat Sheet&lt;/a>&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>If you know of any more, please let me know and I'll update the article! &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>A utility to help you wait for ports to open</title><link>https://dwmkerr.com/a-utility-to-help-you-wait-for-ports-to-open/</link><pubDate>Thu, 25 May 2017 22:15:00 +0000</pubDate><guid>https://dwmkerr.com/a-utility-to-help-you-wait-for-ports-to-open/</guid><description>&lt;p>There are occasions where you might need to have scripts or commands which wait for TCP/IP ports to open before you continue.&lt;/p>
&lt;p>I've come across this need again and again when working with &lt;a href="https://dwmkerr.com/tag/microservices/">microservices&lt;/a>, to make my life easier I've created a little utility called &lt;a href="https://github.com/dwmkerr/wait-port">wait-port&lt;/a> which will wait for a port to open:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/wait-port">&lt;img src="images/wait-port.gif" alt="Wait Port Screenshot">&lt;/a>&lt;/p>
&lt;p>It's built in Node, the project is open source, open for contributions and ready to use:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/wait-port">github.com/dwmkerr/wait-port&lt;/a>&lt;/p>
&lt;p>Installation and usage is pretty straightforward:&lt;/p>
&lt;pre>&lt;code>$ npm install -g wait-port
wait-port@0.1.4
$ wait-port 8080
Waiting for localhost:8080.....
Connected!
&lt;/code>&lt;/pre>&lt;p>You can also install locally&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>This might be useful if you have a docker-compose workflow where you need to wait for a database to start up, want to run some automated tests against a server which can be slow to start, or have a complex set of interdependent services which need to start up in a specific order.&lt;/p>
&lt;p>I'd be interested to know of any cases where people find this useful, so please share in the comments and I can add a &amp;lsquo;use cases&amp;rsquo; section to the project showing others how they might be able to save some time and energy with the utility!&lt;/p>
&lt;h2 id="the-pure-shell-way">The Pure Shell Way&lt;/h2>
&lt;p>It is actually pretty easy to do this purely in bash. Here's how you can wait for a port to open in a shell script:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#66d9ef">until&lt;/span> nc -w &lt;span style="color:#ae81ff">10&lt;/span> 127.0.0.1 3000; &lt;span style="color:#66d9ef">do&lt;/span> sleep 1; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will be sufficient in many cases, the reason I created the utility is:&lt;/p>
&lt;ol>
&lt;li>I want something which is very readable in scripts (&lt;code>wait-port 3000&lt;/code> to me is more readable).&lt;/li>
&lt;li>I want to be able to specify an overall timeout (i.e. wait for up to 60 seconds) which requires adding more to the script.&lt;/li>
&lt;li>I need a different error code if the overall attempt to wait times out or fails for an unknown reason.&lt;/li>
&lt;li>I want to be able to optionally show some kind of progress (you can use the &lt;code>--output&lt;/code> flag to control the output from &lt;code>wait-port&lt;/code>).&lt;/li>
&lt;li>I know I need a few other features (being able to &amp;lsquo;snooze&amp;rsquo; after the port is opening, i.e. waiting for a little extra time, controllable intervals for trying the port etc, all of which can be easily added).&lt;/li>
&lt;/ol>
&lt;h2 id="testing-tip">Testing Tip!&lt;/h2>
&lt;p>One really useful tip which will be obvious to *nix pros but I wasn't aware of is that you can create a server listening on a port with &lt;code>netcat&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">nc -l &lt;span style="color:#ae81ff">8080&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is just the barest basics of what netcat can do, it's a very powerful tool. This tip makes it very easy to test the &lt;code>wait-port&lt;/code> behaviour.&lt;/p>
&lt;hr>
&lt;h3 id="footnotes">Footnotes&lt;/h3>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I hate installing things globally, if you are like me you'll prefer local usage with something like: npm install wait-port &amp;amp;&amp;amp; ./node_modules/.bin/wait-port :3000&lt;/code> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Tips and Tricks for Beautifully Simple Mobile App CI</title><link>https://dwmkerr.com/tips-and-tricks-for-beautifully-simple-mobile-app-ci/</link><pubDate>Mon, 03 Apr 2017 11:14:58 +0000</pubDate><guid>https://dwmkerr.com/tips-and-tricks-for-beautifully-simple-mobile-app-ci/</guid><description>&lt;p>In this article I'm going to demonstrate some simple tips and tricks which will help you build and maintain beautifully simple mobile build pipelines. These techniques can be applied to different mobile app technologies and integrated into almost any build system:&lt;/p>
&lt;p>&lt;img src="images/0-sample-index.png" alt="Sample App Index">&lt;/p>
&lt;p>Each tip is demonstrated in the sample apps in the &lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci">dwmkerr/beautifully-simple-app-ci&lt;/a> repo.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#TheChallengesOfMobileAppCI">The Challenges of Mobile App CI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip1EmbraceMakefilesForConsistency">Tip 1 - Embrace Makefiles for Consistency&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip2ControlVersionNumbersWithATouchCommand">Tip 2 - Control Version Numbers with a &amp;lsquo;Touch&amp;rsquo; Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tip3controlappiconswithalabelcommand">Tip 3 - Control App Icons with a &amp;lsquo;Label&amp;rsquo; Command&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip4SupportConfigurableAppIds">Tip 4 - Support Configurable App Ids&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tip5DocumentDocumentDocument">Tip 5 - Document, Document, Document&lt;/a>&lt;/li>
&lt;li>&lt;a href="#/conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="the-challenges-of-mobile-app-ci">The Challenges of Mobile App CI&lt;/h2>
&lt;p>Conceptually, a mobile app CI pipeline is pretty simple:&lt;/p>
&lt;p>&lt;img src="images/1-basic-ci.png" alt="Basic CI Pipeline">&lt;/p>
&lt;p>We take our code, perform some kind of validation (such as testing, linting, whatever), generate our artifacts and then deploy them to some devices.&lt;/p>
&lt;p>Often though there's a bit more to it than that:&lt;/p>
&lt;p>&lt;img src="images/2-basic-not-basic-1.png" alt="Basic CI is not Basic">&lt;/p>
&lt;p>Our source code has some metadata associated with it at the point in time you create your binaries, such as:&lt;/p>
&lt;ul>
&lt;li>The SHA, which uniquely identifies your exact location in the source history.&lt;/li>
&lt;li>The branch, which may have some &lt;em>semantic&lt;/em> meaning for your project, for example &lt;code>master&lt;/code> meaning &amp;lsquo;production&amp;rsquo; or &lt;code>alpha&lt;/code> meaning your current unstable public build.&lt;/li>
&lt;li>A tag, which may represent something like a semver, or may have more project-specific meaning.&lt;/li>
&lt;li>A version, which might be in something like a &lt;code>package.json&lt;/code> or embedded in your project files for iOS or Android.&lt;/li>
&lt;/ul>
&lt;p>When we build we have to:&lt;/p>
&lt;ul>
&lt;li>Think about how we test and validate&lt;/li>
&lt;li>Think about how we sign&lt;/li>
&lt;li>Handle package names and bundle ids, which can cause headaches if you are going to install multiple &lt;em>versions&lt;/em> of an app (e.g. dev and UAT builds)&lt;/li>
&lt;li>Consider build numbers and version number&lt;/li>
&lt;/ul>
&lt;p>So even the &amp;lsquo;basic&amp;rsquo; CI isn't all that basic. The rest of this article is a set of tips and techniques which I have found useful when developing mobile apps.&lt;/p>
&lt;h2 id="tip-1---embrace-makefiles-for-consistency">Tip 1 - Embrace Makefiles for Consistency&lt;/h2>
&lt;p>There are a raft of platform and framework specific tools and interfaces we will have to use in mobile projects. XCode, Gradle, NPM, framework specific CLIs, tools such as Fastlane, etc etc.&lt;/p>
&lt;p>If you ensure that your main &amp;lsquo;entrypoint&amp;rsquo; to key operations is a recipe in a makefile, you can provide a degree of consistency to mobile projects. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;code>make build&lt;/code> - Creates an IPA and APK, saving them to the &lt;code>./artifacts&lt;/code> folder.&lt;/li>
&lt;li>&lt;code>make test&lt;/code> - Runs all test suites.&lt;/li>
&lt;li>&lt;code>make deploy&lt;/code> - Deploys the binaries.&lt;/li>
&lt;/ul>
&lt;p>A &lt;code>makefile&lt;/code> for such commands might look like this:&lt;/p>
&lt;pre>&lt;code>test:
# Run all the tests.
npm test
build:
# Create the apk, copy to artifacts.
cd android &amp;amp;&amp;amp; ./gradlew assembleRelease &amp;amp;&amp;amp; cd ..
cp -f ./android/app/build/outputs/apk/myapp.apk ./artifacts
# Create the ipa, copy to artifacts.
cd ./ios; fastlane gym --scheme &amp;quot;app&amp;quot; --codesigning_identity &amp;quot;$(CODE_SIGNING_IDENTITY)&amp;quot;; cd ../;
cp -f ./ios/myapp.ipa ./artifacts
deploy:
# Push to TestFairy.
curl https://app.testfairy.com/api/upload \
-F api_key='$(API_KEY)' \
-F &amp;quot;file=@./artifacts/myapp.apk&amp;quot;
&lt;/code>&lt;/pre>&lt;p>This is a slightly shortened snippet, you can see a variety of working examples in the git repo:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci">github.com/dwmkerr/beautifully-simple-app-ci&lt;/a>&lt;/p>
&lt;p>The first sample in the above repo demonstrates using makefiles to handle key commands for a React Native app. In the example, CircleCI is used to handle automatic builds on code changes, and the apps themselves are distributed automatically to testers&amp;rsquo; devices with TestFairy.&lt;/p>
&lt;p>The nice feature is that the bulk of the logic is in the main repo source, in the &lt;code>makefile&lt;/code> - the CI tool simply orchestrates it. Developers can run &lt;em>exactly&lt;/em> the same commands on their local machine.&lt;/p>
&lt;p>The &lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci/blob/master/1_react_native_app/README.md">&lt;code>README.md&lt;/code>&lt;/a> immediately draws attention to the makefile commands:&lt;/p>
&lt;p>&lt;img src="images/3-tip1-readme.png" alt="Screenshot of the README.md file">&lt;/p>
&lt;p>The makefiles do most of the work, that makes setting up CircleCI almost trivial. Here's a snippet of its config:&lt;/p>
&lt;pre>&lt;code># Tell Circle where we keep our artifacts.
general:
artifacts:
- ./artifacts
# When we test, we build the android app and test it.
test:
override:
- make build-android
- make test
# If there are any changes to the master branch, push a new version
# of the app.
deployment:
master:
branch: [master]
commands:
- make deploy-android
&lt;/code>&lt;/pre>&lt;p>Our commands are android specific at this stage as Circle don't support iOS builds on their free plan&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Later samples which use other build systems demonstrate Android &lt;em>and&lt;/em> iOS.&lt;/p>
&lt;p>The CI automatically tests and builds whenever we have new code commits:&lt;/p>
&lt;p>&lt;img src="images/4-tip1-circle.png" alt="Screenshot of CircleCI and the artifacts">&lt;/p>
&lt;p>Also, if a commit is made to the &lt;code>master&lt;/code> branch, our new app is automatically pushed to TestFairy, which can be configured to automatically update the test team:&lt;/p>
&lt;p>&lt;img src="images/5-tip1-testfairy.png" alt="Screenshot of TestFairy">&lt;/p>
&lt;p>Makefile syntax is close enough to shell scripting that simple operations are generally straightforward&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to implement. The approach is also perfectly valid for server side code and almost any project.&lt;/p>
&lt;p>Teams with many projects can build consistent patterns and syntax for building. Take a look at the image below:&lt;/p>
&lt;p>&lt;img src="images/Simple-Docker-Image-CI.png" alt="Docker Workflow">&lt;/p>
&lt;p>This is from my article on &lt;a href="http://www.dwmkerr.com/simple-continuous-integration-for-docker-images/">Simple Continuous Integration for Docker Images&lt;/a> - where exactly the same principles are applied.&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Makefiles allow you to provide an entrypoint for common app CI tasks which is framework and toolkit agnostic&lt;/li>
&lt;li>Being able to run the individual &lt;em>steps&lt;/em> of a CI build on a local machine makes it easier for developers to work with the pipeline&lt;/li>
&lt;li>By having a CI platform only need to handle the orchestration of these simple steps, we are less tied to specific platforms and can reduce lock-in&lt;/li>
&lt;/ul>
&lt;p>We'll see more interesting makefile recipes as we get into the other tips.&lt;/p>
&lt;h2 id="tip-2---control-version-numbers-with-a-touch-command">Tip 2 - Control Version Numbers with a &amp;lsquo;Touch&amp;rsquo; command&lt;/h2>
&lt;p>iOS and Android apps have both a &lt;em>version number&lt;/em> and a &lt;em>build number&lt;/em>. We might have other files in our project with version numbers too (such as a &lt;code>package.json&lt;/code> file).&lt;/p>
&lt;p>It can be very useful to have a way of keeping these version numbers in sync. Again, we can use a makefile recipe:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make touch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will vary in implementation depending on your platform. For example, this would be all that is needed for a Cordova based project:&lt;/p>
&lt;pre>&lt;code># The version in package.json is the 'master' version.
VERSION ?= $(shell cat package.json | jq --raw-output .version)
BUILD_NUM ?= 0
touch:
$(info &amp;quot;Touching to version $(VERSION) and build number $(BUILD_NUM).&amp;quot;)
sed -i &amp;quot;&amp;quot; -e 's/android-versionCode=\&amp;quot;[0-9]*\&amp;quot;/android-versionCode=\&amp;quot;$(BUILD_NUM)\&amp;quot;/g' ./config.xml
sed -i &amp;quot;&amp;quot; -e 's/ios-CFBundleVersion=\&amp;quot;[0-9]*\&amp;quot;/ios-CFBundleVersion=\&amp;quot;$(BUILD_NUM)\&amp;quot;/g' ./config.xml
sed -i &amp;quot;&amp;quot; -e 's/version=\&amp;quot;[.0-9a-zA-Z]*\&amp;quot;/version=\&amp;quot;$(VERSION)&amp;quot;/g' ./config.xml
&lt;/code>&lt;/pre>&lt;p>Notice we don't really need complex tools for a job like this, &lt;code>sed[^3]&lt;/code> is sufficient to quickly make changes to config files.&lt;/p>
&lt;p>This works very nicely with build systems, many of which provide a build number as an environment variable. For example, we can add a build number with TravisCI like so:&lt;/p>
&lt;pre>&lt;code>env:
- BUILD_NUM=$TRAVIS_BUILD_NUMBER
script:
- make touch
- make test
- make build-android
&lt;/code>&lt;/pre>&lt;p>To go into more detail, we'll look at the second sample in the git repo, which is a Cordova App. This sample will always set the build number in both apps and the build version to whatever is present in the &lt;code>package.json&lt;/code> file. That means you can do things like this:&lt;/p>
&lt;pre>&lt;code>$ npm version minor # Bump the version
v0.1.0
$ BUILD_NUM=3 make build &amp;amp;&amp;amp; make deploy # Build and deploy the apps
...
done
&lt;/code>&lt;/pre>&lt;p>And all of the version numbers and build numbers are updated and the apps are deployed. In this example project, they're deployed to HockeyApp:&lt;/p>
&lt;p>&lt;img src="images/6-hockey-app.png" alt="Screenshot of the newly versioned apps in HockeyApp">&lt;/p>
&lt;p>This build runs on TravisCI, so only builds the Android version. You can clone the code and build the iOS version (and deploy it) using the makefile.&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>There will come a point in your project development where you'll need to handle version numbers, having a command to explicitly deal with this adds rigour to this process&lt;/li>
&lt;li>Build numbers are just as important as version numbers during development, ensuring your CI build number is baked into your artifacts is critical for troubleshooting and control&lt;/li>
&lt;/ul>
&lt;h1 id="tip-3---control-app-icons-with-a-label-command">Tip 3 - Control App Icons with a &amp;lsquo;Label&amp;rsquo; Command&lt;/h1>
&lt;p>When you are working in a larger team, it can be very useful to label your app icon so that team members know exactly what version of the app they are using. This is often the case if you are working in a team where features or bugfixes are being deployed rapidly.&lt;/p>
&lt;p>You might label your icons with build numbers, SHAs, branch names, versions, tags, or even something custom such as &amp;lsquo;QA&amp;rsquo; or &amp;lsquo;UAT&amp;rsquo; for different versions of your app. Here are a few examples:&lt;/p>
&lt;p>&lt;img src="images/8-framed-labelled-icons.png" alt="Labelled Icons Screenshot">&lt;/p>
&lt;p>I've found this to be very useful, so created a command-line tool called &amp;lsquo;&lt;a href="github.com/dwmkerr/app-icon">app-icon&lt;/a>&amp;rsquo; to help with the task:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/app-icon">github.com/dwmkerr/app-icon&lt;/a>&lt;/p>
&lt;p>This tool has a &lt;code>label&lt;/code> command to add a label, and a &lt;code>generate&lt;/code> command to generate icons of all different sizes. This means you can add recipes like this to your &lt;code>makefile&lt;/code>:&lt;/p>
&lt;pre>&lt;code>VERSION ?= $(shell cat package.json | jq --raw-output .version)
BUILD_NUM ?= 0 # This might come from Circle, Travis or Whatever...
label:
$(info Labeling icon with '$(VERSION)' and '$(BUILD_NUM)'...)
app-icon label -i base-icon.png -o icon.png --top $(VERSION) --bottom $(BUILD_NUM)
app-icon generate -i icon.png
&lt;/code>&lt;/pre>&lt;p>Each sample app labels its icon in a different way:&lt;/p>
&lt;ol>
&lt;li>The &lt;a href="./1_react_native_app/">React Native App&lt;/a> puts the short Git SHA on the bottom of the icon.&lt;/li>
&lt;li>The &lt;a href="./2_ionic_app/">Ionic App&lt;/a> puts the &lt;code>package.json&lt;/code> version at the top of the icon.&lt;/li>
&lt;li>The &lt;a href="./3_native_app">Native App&lt;/a> puts an environment label at the top of the icon, and the build number at the bottom.&lt;/li>
&lt;li>The &lt;a href="./4_xamarinapp">Xamarin App&lt;/a> includes the configurable app environment (this is detailed in the next tip) and build number&lt;/li>
&lt;/ol>
&lt;p>There are references to each sample and the associated code in the &lt;code>README.md&lt;/code> at:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/beautifully-simple-app-ci">github.com/dwmkerr/beautifully-simple-app-ci&lt;/a>&lt;/p>
&lt;p>As a quick example, the Pure Native App runs this code prior to each build:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">BUILD_NUM&lt;span style="color:#f92672">=&lt;/span>BUDDYBUILD_BUILD_NUMBER make label
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This app uses BuddyBuild as a build system, meaning we can just drop this line in the &lt;a href="./buddybuild_postclone.sh">&lt;code>buddybuild_postclone.sh&lt;/code>&lt;/a> script. You can see the labeled icons directly in the BuddyBuild UI:&lt;/p>
&lt;p>&lt;img src="images/12-buddybuild-icons.png" alt="BuddyBuild Icons">&lt;/p>
&lt;p>The Android build is currently having some issues due to fonts being accessible by the labelling tool (which uses ImageMagick under the hood), with any luck this issue will be fixed soon. This seems to be an issue with the BuddyBuild ImageMagick installation rather than the labelling code itself, which is running fine on all of the other builds!&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A little bit of time invested in managing your app icon can potentially save many hours if you are rapidly iterating on apps&lt;/li>
&lt;li>The &lt;a href="https://github.com/dwmkerr/app-icon">&lt;code>app-icon&lt;/code>&lt;/a> tool can help you quickly label and generate icons&lt;/li>
&lt;/ul>
&lt;h1 id="tip-4---support-configurable-app-ids">Tip 4 - Support Configurable App Ids&lt;/h1>
&lt;p>Another trick I've found useful is to have a command which automatically updates your iOS Bundle ID or Android Application ID. This can be handy when you have multiple versions of an app (such as a QA build, dev build, UAT build or whatever).&lt;/p>
&lt;p>If you have users who need to have different versions of your app on their phones then this is actually a necessary step (at least for iOS), as you cannot have multiple versions of an app with the same ID installed.&lt;/p>
&lt;p>Often, I will aim to have a standard &amp;lsquo;base id&amp;rsquo;, such as:&lt;/p>
&lt;pre>&lt;code>com.dwmkerr.myapp
&lt;/code>&lt;/pre>&lt;p>and then simply append whatever the &amp;lsquo;flavour&amp;rsquo; of my app is to the end of the id:&lt;/p>
&lt;pre>&lt;code>com.dwmkerr.myapp_qa # The QA build...
com.dwmkerr.myapp_uat # The UAT build...
&lt;/code>&lt;/pre>&lt;p>The base id is then reserved for the master build, which is what goes into production.&lt;/p>
&lt;p>Just like with all of the other tricks, I tend to use a recipe in the &lt;code>makefile&lt;/code> to do the heavy lifting, and then leave the build system to orchestrate the commands (we'll see more of this later). Here's how a recipe will typically look (this comes from the fourth sample, which is a Xamarin App):&lt;/p>
&lt;pre>&lt;code>ENV ?= production
# Set the app id, with the 'production' environment implying the unaltered 'base' id.
ifeq ($(ENV),production)
APP_ID=com.dwmkerr.xamarinapp
else
APP_ID=com.dwmkerr.xamarinapp_$(ENV)
endif
name:
$(info Naming app '$(APP_ID)'...)
sed -i.bak 's/com.dwmkerr.xamarinapp.*&amp;lt;/$(APP_ID)&amp;lt;/' iOS/Info.plist
sed -i.bak 's/com.dwmkerr.xamarinapp.*\&amp;quot;/$(APP_ID)\&amp;quot;/' Droid/Properties/AndroidManifest.xml
&lt;/code>&lt;/pre>&lt;p>This small recipe can be very useful in combination with other techniques. Ensuring your build respects the &lt;code>ENV&lt;/code> variable (or whatever you name your &amp;lsquo;flavour&amp;rsquo;) means that you can have different configurations for different environments, build multiple versions of the app, each with a distinct app icon, and distribute them to your team.&lt;/p>
&lt;p>In the screenshots below, you can see how the presence of the &lt;code>ENV&lt;/code> environment variable automatically updates the App ID (this is taken from the &lt;a href="./4_xamarinapp">Xamarin Sample&lt;/a>, which orchestrates builds with Bitrise&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;p>&lt;img src="images/9-bitrise.png" alt="The ENV Environment variable in Bitrise">&lt;/p>
&lt;p>&lt;img src="images/10-bitrise-apps.png" alt="The built apps in Bitrise">&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Configurable App Ids allow you to maintain isolated builds of your app for specific environments, even on the same physical device&lt;/li>
&lt;li>This tip must be used with caution, some features (such as iOS push notifications) will not work if the bundle id is changed (it can also cause issues if your provisioning profile does not use a wildcard)&lt;/li>
&lt;/ul>
&lt;h2 id="tip-5---document-document-document">Tip 5 - Document, Document, Document&lt;/h2>
&lt;p>Even teams which are great at documenting complex application code can sometimes be a bit lax when it comes to documenting build related code.&lt;/p>
&lt;p>Unfortunately, build related code will often need &lt;em>more&lt;/em> documentation than usual. Why is this?&lt;/p>
&lt;ul>
&lt;li>It is often &lt;em>complex&lt;/em> (spend any time working with the XCode commandline or provisioning profiles and you'll likely agree)&lt;/li>
&lt;li>It is &lt;em>rarely changed&lt;/em> (often worked on heavily at the early stages of a project then not touched)&lt;/li>
&lt;li>It is &lt;em>critical&lt;/em> (when it breaks, teams are often blocked)&lt;/li>
&lt;/ul>
&lt;p>When something goes wrong with a build process, or needs to be changed, it is a real pain when only one person knows how the code works. Be rigorous with this code, make sure it is documented and reviewed, and share the knowledge around your team. I tend to like to have a table of commands as a quick index in the README.md file, and then heavily comment the code itself:&lt;/p>
&lt;p>&lt;img src="images/11-document.png" alt="TODO">&lt;/p>
&lt;p>&lt;strong>In Summary&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Be rigorous with documentation, when things go wrong with CI code then people are often blocked&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Most of these tips are fairly explicit, there are detailed examples in the sample project. Familiarity with these patterns and techniques can be useful, but perhaps the most valuable takeaway would be to embrace the following principles:&lt;/p>
&lt;ul>
&lt;li>Developers should be able to run all of the key CI steps on their local machine, to be able to understand, adapt and improve the process&lt;/li>
&lt;li>When building more complex features, we should create small, simple units of work which can be composed into larger pipelines&lt;/li>
&lt;li>Complexity, if needed, should be in in code - not in &amp;lsquo;black box&amp;rsquo; CI tools (such as esoteric features for specific CI providers or Jenkins plugins). For example, CircleCI offers a Git Short SHA environment variable - but you can grab a short SHA with &lt;code>git log -1 --format=&amp;quot;%h&amp;quot;&lt;/code>, and the second approach works anywhere&lt;/li>
&lt;li>Use CI platforms to &lt;em>orchestrate&lt;/em> work, use makefiles and scripts to handle logic&lt;/li>
&lt;/ul>
&lt;p>I hope this article has been useful, any thoughts or comments are always welcome!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Footnotes&lt;/strong>&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>I have successfully used this approach to build Android &lt;em>and&lt;/em> iOS from the same OSX build agent on their paid plan on a number of projects. The most straightforward way to do this is to have a single build run on OSX and create the Android app as well as the iOS app. &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Perhaps straightforward is an overstatement, but getting those who are familiar with shell scripting will have few difficulties. Those who are not will find a learning curve, but it is &lt;em>very&lt;/em> useful to at least get the basics of shell scripting learnt. &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description><category>CodeProject</category></item><item><title>Simple Continuous Integration for Docker Images</title><link>https://dwmkerr.com/simple-continuous-integration-for-docker-images/</link><pubDate>Thu, 03 Nov 2016 05:14:35 +0000</pubDate><guid>https://dwmkerr.com/simple-continuous-integration-for-docker-images/</guid><description>&lt;p>In this article I'm going to demonstrate a few tips and tricks which can make your life easier when you are building or maintaining Dockerfiles.&lt;/p>
&lt;h2 id="the-need-for-a-build-pipeline">The need for a Build Pipeline&lt;/h2>
&lt;p>Do we really need any kind of continuous integration or build pipeline for Dockerfiles?&lt;/p>
&lt;p>There will be cases when the answer is no. However, if the answer to any of the following questions is &amp;lsquo;yes&amp;rsquo;, it might be worth considering:&lt;/p>
&lt;ol>
&lt;li>Do you want others to be able to contribute to the Dockerfile, perhaps changing the image over time?&lt;/li>
&lt;li>Are there specific functionalities in your Dockerfiles which could break if altered?&lt;/li>
&lt;li>Do you expect to need to release updates to your Dockerfile?&lt;/li>
&lt;/ol>
&lt;p>Essentially, if we are looking at providing some kind of automated quality assurance and automation around building and releasing, then a build pipeline is not a bad idea.&lt;/p>
&lt;h2 id="a-simple-build-pipeline">A simple Build Pipeline&lt;/h2>
&lt;p>Here's what a simple build pipeline could look like. This example is for a Docker Image I just created for local DynamoDB development - &lt;a href="https://github.com/dwmkerr/docker-dynamodb">dwmkerr/docker-dynamodb&lt;/a>:&lt;/p>
&lt;p>&lt;img src="images/Simple-Docker-Image-CI.png" alt="Simple Continous Intergration Pipeline">&lt;/p>
&lt;p>Let's dissect what we've got here.&lt;/p>
&lt;h3 id="the-dockerfile">The Dockerfile&lt;/h3>
&lt;p>This is the main &amp;lsquo;code&amp;rsquo; of the project if you like. The &lt;a href="https://github.com/dwmkerr/docker-dynamodb/blob/master/Dockerfile">Dockerfile&lt;/a> is the recipe for the image we create.&lt;/p>
&lt;h3 id="the-continuous-integration-service">The Continuous Integration Service&lt;/h3>
&lt;p>In this case, I am using &lt;a href="https://circleci.com/">CircleCI&lt;/a>, however the approach described would work fine with most CI systems (such as Jenkins, TravisCI and TeamCity). There &lt;em>is&lt;/em> an option to use the &lt;a href="https://docs.docker.com/docker-hub/builds/">Docker Hub Automated Builds&lt;/a>, but I've found this doesn't give the flexibility I need (see &lt;a href="#appendix1whynotdockerhubautomatedbuilds">Why not Docker Hub Automated Builds&lt;/a>).&lt;/p>
&lt;p>Essentially the CI service needs to offer the option to have three distinct steps in the pipeline, each of which must pass for process to proceed:&lt;/p>
&lt;ol>
&lt;li>Build&lt;/li>
&lt;li>Test&lt;/li>
&lt;li>Deploy&lt;/li>
&lt;/ol>
&lt;h3 id="the-build">The Build&lt;/h3>
&lt;p>We can build with tools, script files, whatever. At the moment, I am leaning towards &lt;a href="https://www.gnu.org/software/make/">makefiles&lt;/a>. Normally I only need a few lines of shell script to do a build - anything more complex and the makefile can call a shell script. See also &lt;a href="#appendix2whymakefiles">Why Makefiles?&lt;/a>&lt;/p>
&lt;p>Here's what it might look like:&lt;/p>
&lt;pre>&lt;code>build:
docker build -t dwmkerr/dynamodb:latest .
ifndef BUILD_NUM
$(warning No build number is defined, skipping build number tag.)
else
docker build -t dwmkerr/dynamodb:$(BUILD_NUM) .
endif
&lt;/code>&lt;/pre>&lt;p>This command just builds the &lt;code>Dockerfile&lt;/code> and tags it as &lt;code>dwmkerr/dynamodb:lastest&lt;/code>. If a &lt;code>BUILD_NUM&lt;/code> variable is present, we also create the tag &lt;code>dwmkerr/dynamodb:BUILD_NUM&lt;/code>. This means if we want to deploy to a service such as &lt;a href="https://aws.amazon.com/ecs/">Amazon ECS&lt;/a> we can push a specific build by referring to the image with that tag.&lt;/p>
&lt;h3 id="the-tests">The Tests&lt;/h3>
&lt;p>Again I'm relying on &lt;code>make&lt;/code>. I just want to be able to run &lt;code>make test&lt;/code> - if zero is returned I'm happy. If not, the pipeline should stop and I'll check the output. Here's my test command:&lt;/p>
&lt;pre>&lt;code>test: build
./test/basics.test.sh
./test/ephemeral.test.sh
./test/persistent.test.sh
&lt;/code>&lt;/pre>&lt;p>Not a thing of beauty, but it works. These scripts I'll discuss a little bit later on, in the delightly titled &lt;a href="#appendix3whatarethesetestscripts">What are these test scripts&lt;/a> section.&lt;/p>
&lt;p>For CircleCI, this is enough to have the main part of our pipeline. Here's how the &lt;code>circle.yml&lt;/code> file looks at this stage:&lt;/p>
&lt;pre>&lt;code>machine:
services:
- docker
environment:
# Set the build number, used in makefiles.
BUILD_NUM: $CIRCLE_BUILD_NUM
test:
override:
- make test
&lt;/code>&lt;/pre>&lt;p>(Actually there's a couple of other bits but they're just to make sure circle uses the right version of Docker, &lt;a href="https://github.com/dwmkerr/docker-dynamodb/blob/master/circle.yml">see the full circle.yml file here&lt;/a>).&lt;/p>
&lt;h3 id="the-deployments">The Deployments&lt;/h3>
&lt;p>Deployments are trivial as all we need to do is push to the Docker Hub. The &lt;code>make deploy&lt;/code> command looks-a like this:&lt;/p>
&lt;pre>&lt;code>deploy:
docker push dwmkerr/dynamodb:latest
ifndef BUILD_NUM
$(warning No build number is defined, skipping push of build number tag.)
else
docker push dwmkerr/dynamodb:$(BUILD_NUM)
endif
&lt;/code>&lt;/pre>&lt;p>We're pushing the &lt;code>latest&lt;/code> tag and &lt;code>BUILD_NUM&lt;/code> tag if present. To add this to the CircleCI pipeline, we just add the following to &lt;code>circle.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code>deployment:
master:
branch: master
commands:
- docker login -e $DOCKER_EMAIL -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
- make deploy
&lt;/code>&lt;/pre>&lt;p>If we have a push to &lt;code>master&lt;/code>, we log in to Docker (using environment variables I configure in the CircleCI UI) and then run &lt;code>make deploy&lt;/code> to push our images.&lt;/p>
&lt;h2 id="thats-it">That's It&lt;/h2>
&lt;p>That's about it. This is a pretty simple approach, you can see it in action at:&lt;/p>
&lt;p>&lt;a href="https://github.com/dwmkerr/docker-dynamodb">github.com/dwmkerr/docker-dynamodb&lt;/a>&lt;/p>
&lt;p>The rest of this post is a bit of a deep dive into some specific areas I found interesting.&lt;/p>
&lt;h2 id="appendix-1-why-not-docker-hub-automated-builds">Appendix 1: Why not Docker Hub Automated Builds?&lt;/h2>
&lt;p>There are automated builds available in the Docker Hub:&lt;/p>
&lt;p>&lt;img src="images/dockerhubbuilds.png" alt="Docker Hub Automated Builds">&lt;/p>
&lt;p>I'm not using this feauture at the moment, here's a brief roundup of what I think are the current pros and cons:&lt;/p>
&lt;p>Pros&lt;/p>
&lt;ul>
&lt;li>You don't have to goof around installing Docker on a CI platform.&lt;/li>
&lt;li>It allows you to update the description of your Docker image automatically, from the GitHub &lt;code>README.md&lt;/code>.&lt;/li>
&lt;li>It allows you to associate the image with a specific GitHub repo (rather than just linking from the image description).&lt;/li>
&lt;li>Branch management - allowing tags to be built for specific branches.&lt;/li>
&lt;/ul>
&lt;p>Cons&lt;/p>
&lt;ul>
&lt;li>It doesn't &lt;em>seem&lt;/em> to support any kind of configurable gating, such as a running a test command prior to deploying.&lt;/li>
&lt;li>It doesn't &lt;em>seem&lt;/em> to support any kind of triggering of downstream processes, such as updating environments, sending notifications or whatever.&lt;/li>
&lt;/ul>
&lt;p>The lack of ability to perform tests on the image before deploying it why I'm currently not using the service.&lt;/p>
&lt;p>By doing the testing in a CI system for every pull request and only merging PRs where the tests pass we could mitigate the risk here. This service is worth watching as I'm sure it will evolve quickly.&lt;/p>
&lt;h2 id="appendix-2-why-makefiles">Appendix 2: Why Makefiles?&lt;/h2>
&lt;p>I started coding with a commandline compiler in DOS. When I used my first GUI (Borland Turbo C++) it felt like a huge leap:&lt;/p>
&lt;p>&lt;img src="images/turbocpp.png" alt="Borland Turbo C++">&lt;/p>
&lt;p>Later on I moved onto Microsoft Visual C++ 4.2:&lt;/p>
&lt;p>&lt;img src="images/visualcpp.png" alt="Visual C++ 4.2">&lt;/p>
&lt;p>And you cannot imagine the excitement when I got my boxed edition of Visual Studio .NET:&lt;/p>
&lt;p>&lt;img src="images/visualstudiodotnet.jpg" alt="Visual Studio .NET">&lt;/p>
&lt;p>Wow!&lt;/p>
&lt;p>Anyway, I digress. GNU &lt;code>make&lt;/code> was invented by Leonardo Da Vinci in 1473 to allow you to build something from the commandline, using a fairly consistent syntax.&lt;/p>
&lt;p>It is near ubiquitous on *nix systems. I am increasingly using it as an &amp;lsquo;entry point&amp;rsquo; to builds, as I use variety of languages and platforms. Being able to know that most of the time:&lt;/p>
&lt;pre>&lt;code>make build
make test
&lt;/code>&lt;/pre>&lt;p>Will build and test something is convenient. Makefiles actually are not that great to work with (see &lt;a href="http://stackoverflow.com/questions/448910/makefile-variable-assignment">this&lt;/a>, &lt;a href="http://stackoverflow.com/questions/10121182/multiline-bash-commands-in-makefile">this&lt;/a> and &lt;a href="http://www.conifersystems.com/whitepapers/gnu-make/">this&lt;/a>). I've found as long as you keep the commands simple, they're OK. For anything really complex, I normally have a &lt;code>scripts/&lt;/code> folder, but call the scripts &lt;em>from&lt;/em> the makefile, so that there's still a simple entrypoint.&lt;/p>
&lt;p>I'm not entirely sold on makefiles, but they tend to be my default at the moment if I know I'm going to use the commandline for builds (for example, in Java projects I'll often write a makefile to call Maven or Gradle).&lt;/p>
&lt;p>For things like Node.js, where you have commands like &lt;code>npm test&lt;/code> or &lt;code>npm run xyz&lt;/code> I &lt;em>still&lt;/em> sometimes use makefiles, using &lt;code>npm&lt;/code> for day-to-day dev tests (&lt;code>npm start&lt;/code>) and &lt;code>make&lt;/code> if it's something more complex (e.g. &lt;code>make deploy-sit&lt;/code> to deploy to an SIT environment).&lt;/p>
&lt;h2 id="appendix-3-what-are-these-test-scripts">Appendix 3: What are these test scripts?&lt;/h2>
&lt;p>You may have noticed:&lt;/p>
&lt;pre>&lt;code>test: build
./test/basics.test.sh
./test/ephemeral.test.sh
./test/persistent.test.sh
&lt;/code>&lt;/pre>&lt;p>What's going on here?&lt;/p>
&lt;p>My Docker image is just a wrapper around &lt;a href="http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html">Amazon's Local DynamoDB tool&lt;/a>. I don't really need to test that tool. But what I wanted to test was the capabilities which lie at the &lt;em>intersection&lt;/em> between &amp;lsquo;native&amp;rsquo; Docker and &amp;lsquo;native&amp;rsquo; DynamoDB.&lt;/p>
&lt;p>For example, I know Docker supports volume mapping. I know DynamoDB supports using a data directory, to allow persistent between runs. I want to test I can combine Docker volume mapping and the DynamoDB data directory features. I know Docker images should default to being ephemeral, I want to test this holds true by default for my image.&lt;/p>
&lt;p>Testing Docker is a little hard - I want to test that I can run containers, start, stop, check state before and after and so on. This is essentially an integration test, it can be tricky to make it truly isolated and deterministic.&lt;/p>
&lt;p>I've given it my best go with these scripts. Here's an example for the &amp;lsquo;ephemeral&amp;rsquo; test, where I'm trying to assert that if I run a container, create a table, stop the container and run a new one, I no longer have the table. Here's the test:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># Bomb if anything fails.&lt;/span>
set -e
&lt;span style="color:#75715e"># Kill any running dynamodb containers.&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Cleaning up old containers...&amp;#34;&lt;/span>
docker ps -a | grep dwmkerr/dynamodb | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span> | xargs docker rm -f &lt;span style="color:#f92672">||&lt;/span> true
&lt;span style="color:#75715e"># Run the container.&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Checking we can run the container...&amp;#34;&lt;/span>
ID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>docker run -d -p 8000:8000 dwmkerr/dynamodb&lt;span style="color:#66d9ef">)&lt;/span>
sleep &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># Create a table.&lt;/span>
aws dynamodb --endpoint-url http://localhost:8000 --region us-east-1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> create-table &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --table-name Supervillains &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --attribute-definitions AttributeName&lt;span style="color:#f92672">=&lt;/span>name,AttributeType&lt;span style="color:#f92672">=&lt;/span>S &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --key-schema AttributeName&lt;span style="color:#f92672">=&lt;/span>name,KeyType&lt;span style="color:#f92672">=&lt;/span>HASH &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> --provisioned-throughput ReadCapacityUnits&lt;span style="color:#f92672">=&lt;/span>1,WriteCapacityUnits&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># Clean up the container. On CircleCI the FS is BTRFS, so this might fail...&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;Stopping and restarting...&amp;#34;&lt;/span>
docker stop $ID &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> docker rm $ID &lt;span style="color:#f92672">||&lt;/span> true
ID&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>docker run -d -p 8000:8000 dwmkerr/dynamodb&lt;span style="color:#66d9ef">)&lt;/span>
sleep &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># List the tables - there shouldn&amp;#39;t be any!&lt;/span>
COUNT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>aws dynamodb --endpoint-url http://localhost:8000 --region us-east-1 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> list-tables &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> | jq &lt;span style="color:#e6db74">&amp;#39;.TableNames | length&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> $COUNT -ne &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">Expected to find no tables, found &lt;/span>$COUNT&lt;span style="color:#e6db74">...&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
exit &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It's a bit dirty - it removes containers from the host, changes things and so on. But it works.&lt;/p>
&lt;p>I did experiment with running these tests &lt;em>in a container&lt;/em>, which has the benefit of giving you a clean host to start with, which you can throw away after each test.&lt;/p>
&lt;p>I had to give up after a little while due to time constraints, but will probably revisit this process. The benefits of running these integration tests in a container is that we get a degree of isolation from the host.&lt;/p>
&lt;p>If anyone is interested, my attempts so far are on this &lt;a href="https://github.com/dwmkerr/docker-dynamodb/pull/2">RFC Pull Request&lt;/a>. Feel free to jump in!&lt;/p></description><category>CodeProject</category></item><item><title>Creating Info Tip Handlers with .NET</title><link>https://dwmkerr.com/creating-info-tip-handlers-with-net/</link><pubDate>Mon, 14 Jan 2013 03:47:44 +0000</pubDate><guid>https://dwmkerr.com/creating-info-tip-handlers-with-net/</guid><description>&lt;p>I have just added an article to the CodeProject that discusses how to create Info Tip shell extensions in .NET. These extensions are used by the shell to customise the tooltips shown over shell items.&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/2013/01/creating-info-tip-handlers-with-net/shellinfotiphandler/" rel="attachment wp-att-210">&lt;img src="images/ShellInfoTipHandler.png" alt="ShellInfoTipHandler" width="385" />&lt;/a>&lt;/p>
&lt;p>The article shows how you can use &lt;a title="SharpShell on CodePlex" href="http://sharpshell.codeplex.com">SharpShell &lt;/a>to very quickly create these extensions, you can find it at: &lt;a title="Shell Info Tip Handlers" href="http://www.codeproject.com/Articles/527058/NET-Shell-Extensions-Shell-Info-Tip-Handlers">&lt;a href="http://www.codeproject.com/Articles/527058/NET-Shell-Extensions-Shell-Info-Tip-Handlers">http://www.codeproject.com/Articles/527058/NET-Shell-Extensions-Shell-Info-Tip-Handlers&lt;/a>&lt;/a>.&lt;/p>
&lt;p>So just how easy does SharpShell make creating Shell Info Tip Handlers? The answer is pretty easy indeed. The code below shows the &lt;strong>full &lt;/strong>implementation of a Shell Info Tip Handler that changes the tooltips for folders to show the name of the folder and the number of items it contains:&lt;/p>
&lt;p>[csharp]/// &amp;lt;summary&amp;gt;
/// The FolderInfoTip handler is an example SharpInfoTipHandler that provides an info tip
/// for folders that shows the number of items in the folder.
/// &amp;lt;/summary&amp;gt;
[ComVisible(true)]
[COMServerAssociation(AssociationType.Directory)]
public class FolderInfoTipHandler : SharpInfoTipHandler
{
/// &amp;lt;summary&amp;gt;
/// Gets info for the selected item (SelectedItemPath).
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name=&amp;quot;infoType&amp;quot;&amp;gt;Type of info to return.&amp;lt;/param&amp;gt;
/// &amp;lt;param name=&amp;quot;singleLine&amp;quot;&amp;gt;if set to &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt;, put the info in a single line.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;
/// Specified info for the selected file.
/// &amp;lt;/returns&amp;gt;
protected override string GetInfo(RequestedInfoType infoType, bool singleLine)
{
// Switch on the tip of info we need to provide.
switch (infoType)
{
case RequestedInfoType.InfoTip:&lt;/p>
&lt;pre>&lt;code> // Format the formatted info tip.
return string.Format(singleLine
? &amp;amp;quot;{0} - {1} Items&amp;amp;quot;
: &amp;amp;quot;{0}&amp;amp;quot; + Environment.NewLine + &amp;amp;quot;Contains {1} Items&amp;amp;quot;,
Path.GetFileName(SelectedItemPath), Directory.GetFiles(SelectedItemPath).Length);
case RequestedInfoType.Name:
// Return the name of the folder.
return string.Format(&amp;amp;quot;Folder '{0}'&amp;amp;quot;, Path.GetFileName(SelectedItemPath));
default:
// We won't be asked for anything else, like shortcut paths, for folders, so we
// can return an empty string in the default case.
return string.Empty;
}
}
&lt;/code>&lt;/pre>
&lt;p>} [/csharp]&lt;/p>
&lt;p>As you can see, all of the COM interfaces are hidden away and handled for you, there is no ugly pinvoke code and no use of strange structures imported from Win32. SharpShell handles all of the plumbing for you.&lt;/p></description><category>CodeProject</category></item><item><title>SharpShell</title><link>https://dwmkerr.com/sharpshell/</link><pubDate>Tue, 08 Jan 2013 16:28:05 +0000</pubDate><guid>https://dwmkerr.com/sharpshell/</guid><description>&lt;p>SharpShell is a project that I have recently uploaded to CodePlex. This class library, and set of tools and samples, is designed to be a framework to enable rapid development of Shell Extensions using the .NET Framework. In time it may grow to contain some functionality for using Shell entities within managed applications (for example, allowing an Explorer context menu to be built dynamically for a given path).&lt;/p>
&lt;p>Anyway, the code is all at &lt;a title="SharpShell on CodePlex" href="http://sharpshell.codeplex.com" target="_blank">sharpshell.codeplex.com&lt;/a>. You can also see a nice article on the CodeProject that show's how to create a Shell Context Menu Extension using C#, the article is at: &lt;a title=".NET Shell Extensions - Shell Context Menus" href="http://www.codeproject.com/Articles/512956/NET-Shell-Extensions-Shell-Context-Menus" target="_blank">.NET Shell Extensions - Shell Context Menus&lt;/a>.&lt;/p>
&lt;p>&lt;a href="http://www.dwmkerr.com/2013/01/sharpshell/screenshot1_exampleiconhandler/" rel="attachment wp-att-200">&lt;img src="images/Screenshot1_ExampleIconHandler.png" alt="Screenshot1_ExampleIconHandler" width="515" />&lt;/a>&lt;/p>
&lt;p>&lt;em>Above: An example of a Managed Shell Extension. This sample colours the icons for dlls differently, depending on whether they are native dlls or assemblies.&lt;/em>&lt;/p>
&lt;p>So far, in the repo on CodePlex there are also samples for Shell Icon Handlers (which customise icons in Explorer) and Shell Info Tip Handlers (which customise tooltips). Both of these extension types are fully supported in the current dev version and will be released in the next few days. There's also a partially functioning Shell Property Sheet implementation which will be delivered in the subsequent version. The Shell Property Sheet introduces some particularly strange code - 32 and 64 bit C++ dlls are embedded as manifest resource streams and extracted as needed to provide access to C++ function pointers - ouch.&lt;/p>
&lt;p>More to follow - check out the project and the article.&lt;/p></description><category>CodeProject</category></item></channel></rss>