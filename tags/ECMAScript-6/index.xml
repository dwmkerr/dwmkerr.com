<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ECMAScript 6 on dwmkerr.com</title><link>https://dwmkerr.github.io/dwmkerr.com/tags/ECMAScript-6/</link><description>Recent content in ECMAScript 6 on dwmkerr.com</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><copyright>Dave Kerr</copyright><lastBuildDate>Mon, 07 Sep 2015 19:44:54 +0000</lastBuildDate><atom:link href="https://dwmkerr.github.io/dwmkerr.com/tags/ECMAScript-6/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with React &amp; ES6</title><link>https://dwmkerr.github.io/dwmkerr.com/getting-started-with-react/</link><pubDate>Mon, 07 Sep 2015 19:44:54 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/getting-started-with-react/</guid><description>Feeling like having a go with Facebook's hugely popular React framework but not sure where to start?
In this post I'm going to build a simple React application from scratch - using ECMAScript 6.
We'll put together the bare minimum skeleton of a site and keep the folder structure free of noise and clutter so that you can focus on the app code and not the tooling!
The simple app we'll build is at github.</description></item><item><title>The Best Module System for AngularJS Applications</title><link>https://dwmkerr.github.io/dwmkerr.com/the-best-module-system-for-angularjs-applications/</link><pubDate>Wed, 18 Mar 2015 14:47:10 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/the-best-module-system-for-angularjs-applications/</guid><description>I was working on a small and simple application built with AngularJS the other day. As with most applications like this, I start with a single JavaScript file caled app.js and no module system.
In the past I've used RequireJS with AngularJS. It's an awful mistake. It leads to a big jump in complexity with no benefts. Angular apps don't work well with AMDs, so really your are using RequireJS to combine files into one big file.</description></item><item><title>AngularJS Promises - The Definitive Guide</title><link>https://dwmkerr.github.io/dwmkerr.com/promises-in-angularjs-the-definitive-guide/</link><pubDate>Wed, 07 May 2014 12:06:55 +0000</pubDate><guid>https://dwmkerr.github.io/dwmkerr.com/promises-in-angularjs-the-definitive-guide/</guid><description>Promises are a core feature of AngularJS - whether you understand them or not, if you use AngularJS you've almost certainly been using them for a while.
In this post I'm going to explain what promises are, how they work, where they're used and finally how to use them effectively.
Once we've got the core understanding of promises, we'll look at some more advanced functionality - chaining and resolving promises when routing.</description></item></channel></rss>